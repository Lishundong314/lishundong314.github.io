<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringSecuritys</title>
    <link href="/2022/03/19/springsecurity/"/>
    <url>/2022/03/19/springsecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="SpringSecurity总结"><a href="#SpringSecurity总结" class="headerlink" title="SpringSecurity总结"></a>SpringSecurity总结</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><h3 id="写过滤器"><a href="#写过滤器" class="headerlink" title="写过滤器"></a>写过滤器</h3><h3 id="写核心配置类"><a href="#写核心配置类" class="headerlink" title="写核心配置类"></a>写核心配置类</h3><h3 id="HttpSecurity的常用方法"><a href="#HttpSecurity的常用方法" class="headerlink" title="HttpSecurity的常用方法"></a>HttpSecurity的常用方法</h3><h4 id="一、匹配路径的方法"><a href="#一、匹配路径的方法" class="headerlink" title="一、匹配路径的方法"></a>一、匹配路径的方法</h4><p>.antMatchers()：表达支持ant风格的路径通配符</p><p>.regexMatchers()：接受正则表达式来定义请求的路径</p><h4 id="二、保护路径的配置方法"><a href="#二、保护路径的配置方法" class="headerlink" title="二、保护路径的配置方法"></a>二、保护路径的配置方法</h4><p>.authenticated()：表示需要认证,在执行请求时，必须要登录</p><p>.permitAll()：允许没有任何限制</p><p>.access(String springEl)：给定的spEl计算为true的话，就允许访问</p><p>.anonymous()：允许匿名用户访问</p><h3 id="denyAll-：无条件拒绝所有访问"><a href="#denyAll-：无条件拒绝所有访问" class="headerlink" title=".denyAll()：无条件拒绝所有访问"></a>.denyAll()：无条件拒绝所有访问</h3><p>.fullyAuthenticated()：如果用户是完整认证的话(不是通过remember-me功能认证的)，就允许访问</p><p>.hasAnyAuthority(String …)：如果用户具备给定权限中一个的话，就允许访问</p><p>.hasAnyRole(String… roles)：如果用户具备给定角色中一个的话，就允许访问</p><p>.hasAuthority(String)：拥有给定权限就允许访问</p><p>.hasIpAddress(String ip)：如果请求来自给定ip地址的话，就允许访问</p><p>.hasRole(String role)：拥有指定角色的话，就允许访问</p><p>.not()：对其他访问的结果取反</p><p>permitAll()：无条件允许访问</p><p>rememberMe()：通过remember-me功能认证的，就允许访问</p><p>备注：可以使用.access(String springEl)结合其他配置方法使用，从而达到二维限定的作用</p><h4 id="三、其他安全方法-需要加-and"><a href="#三、其他安全方法-需要加-and" class="headerlink" title="三、其他安全方法(需要加.and())"></a>三、其他安全方法(需要加.and())</h4><p>.requiresChannel()：强制使用https的请求</p><p>.csrf().disable()：禁用crsf防护</p><p>.formLogin()：启用基本登录功能</p><p>.httpBasic()：启用HTTP Basic认证功能(浏览器会弹出一个简单模态框，可以输入账号和密码进行认证)</p><p>.rememberMe()：启用记住me的功能</p><p>.logout()</p><p>.logoutUrl(“/logout”)</p><p>配置登出的相关路径</p><p>.logoutSuccessUrl(“/“)</p><p>登出成功的路径</p><h3 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h3><p><a href="https://www.jianshu.com/p/615dcdd3ea37">jwt的三个部分</a></p><p><a href="https://www.jianshu.com/p/d5ce890c67f7">security整合jwt</a></p><h2 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h2><h3 id="步骤一：实现UserDetailsService接口"><a href="#步骤一：实现UserDetailsService接口" class="headerlink" title="步骤一：实现UserDetailsService接口"></a>步骤一：实现UserDetailsService接口</h3><p>​    实现UserDetailsService接口，并重写loadUserByUsername，返回的对象时UserDetails 的实现类。</p><p>​    这个方法如名字一样，就是将传来的userName查询数据库，看是否存在这个数据，如果没有就抛出异常UsernameNotFoundException（Security自带）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>   <span class="hljs-comment">//需要放入容器中</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span></span>&#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DbUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br>        DbUser user = userService.selectUserByUsername(username);<br>        <span class="hljs-keyword">if</span>(Objects.isNull(user))&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(ExceptionMessageEnum.USER_PASS_ERROR.getMessage());<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> SecurityUser(user);   <span class="hljs-comment">//Sercurity是自己定义的实体类，实现了UserDetails</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>SecurityUser是需要返回的，因为实现了UserDetails。而DbUser是自己定义的实现类。</p><h3 id="步骤二：配置类"><a href="#步骤二：配置类" class="headerlink" title="步骤二：配置类"></a>步骤二：配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception</span>&#123;<br><br>       httpSecurity.cors(Customizer.withDefaults())<br>               <span class="hljs-comment">// 配置跨域资源共享（ CORS ）</span><br>               .authorizeRequests()<br>               <span class="hljs-comment">//</span><br>               .antMatchers(<span class="hljs-string">&quot;/**&quot;</span>).permitAll()<br>               <span class="hljs-comment">// 对于登录login 验证码captchaImage 允许匿名访问</span><br>               .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>,<span class="hljs-string">&quot;/error&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/user/login&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/organization/**&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/company/getCompanyByTenantId&quot;</span>,<span class="hljs-string">&quot;/getDeptAndRoleInfo&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/department/getDepartmentByTypeAndCompanyOrProjectId/**&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/role/selectByDept/**&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/user/**&quot;</span>).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/user/authorize/**&quot;</span>).permitAll()<br>               .antMatchers(<br>                       HttpMethod.GET,<br>                       <span class="hljs-string">&quot;/*.html&quot;</span>,<br>                       <span class="hljs-string">&quot;/**/*.html&quot;</span>,<br>                       <span class="hljs-string">&quot;/**/*.css&quot;</span>,<br>                       <span class="hljs-string">&quot;/**/*.js&quot;</span><br>               ).permitAll()<br>               .antMatchers(<span class="hljs-string">&quot;/profile/**&quot;</span>).anonymous()<br>               .antMatchers(<span class="hljs-string">&quot;/swagger-ui.html&quot;</span>).anonymous()<br>               .antMatchers(<span class="hljs-string">&quot;/swagger-resources/**&quot;</span>).anonymous()<br>               .antMatchers(<span class="hljs-string">&quot;/webjars/**&quot;</span>).anonymous()<br>               .antMatchers(<span class="hljs-string">&quot;/*/api-docs&quot;</span>).anonymous()<br>               .antMatchers(<span class="hljs-string">&quot;/druid/**&quot;</span>).anonymous()<br>               <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>               .anyRequest().authenticated()<br>               .and()<br>               <span class="hljs-comment">//登录过滤器</span><br>               .addFilterAt(userTokenLoginFilter, UsernamePasswordAuthenticationFilter.class);<br><br>       httpSecurity.addFilter(<span class="hljs-keyword">new</span> MyAuthenticationTokenFilter(authenticationManager(),jwtService,jedisService));<br><br>       <span class="hljs-comment">// 添加JWT filter</span><br>       <span class="hljs-comment">//httpSecurity.addFilterAfter(authenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);</span><br>       <span class="hljs-comment">// 认证失败处理类</span><br>       httpSecurity.exceptionHandling()<br>               .authenticationEntryPoint(<span class="hljs-keyword">new</span> AuthenticationEntryPointImplFilter())<br>               <span class="hljs-comment">//自定义授权失败处理器</span><br>               .accessDeniedHandler(<span class="hljs-keyword">new</span> AuthAccessDeniedHandler());<br>       <span class="hljs-comment">// 基于token，所以不需要session</span><br>       httpSecurity.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);<br>       <span class="hljs-comment">//先禁用 csrf</span><br>       httpSecurity.csrf().disable();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="自己继承过滤器"><a href="#自己继承过滤器" class="headerlink" title="自己继承过滤器"></a>自己继承过滤器</h3><p>Security自己实现了过滤器，我们如果想要改进可以继承其。</p><p><img src="/2022/03/19/springsecurity/image-20211227220104802.png" alt="image-20211227220104802"></p><h4 id="继承UsernamePasswordAuthenticationFilter"><a href="#继承UsernamePasswordAuthenticationFilter" class="headerlink" title="继承UsernamePasswordAuthenticationFilter"></a>继承UsernamePasswordAuthenticationFilter</h4><h3 id="Oauth2-授权码模式"><a href="#Oauth2-授权码模式" class="headerlink" title="Oauth2 授权码模式"></a>Oauth2 授权码模式</h3><p><img src="https://img-blog.csdnimg.cn/2020051516581693.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3hqOTAzMTQ=,size_16,color_FFFFFF,t_70" alt="Oauth2.0"></p><h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="1、SpringBoot创建Filter的方式"><a href="#1、SpringBoot创建Filter的方式" class="headerlink" title="1、SpringBoot创建Filter的方式"></a>1、SpringBoot创建Filter的方式</h3><ul><li>加@WebFilter注解在过滤器上加上@WebFilter注解（还要加上@Component)，实现Filter接口，并指明拦截的url地址，最后重写dofiter方法</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">package com.<span class="hljs-keyword">filter</span>.demo.<span class="hljs-keyword">filter</span>;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.<span class="hljs-keyword">Filter</span>;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br>@WebFilter(urlPatterns=&#123;&quot;/login/dev/*&quot;, &quot;/login/test/*&quot;&#125;, <br>        displayName=&quot;WebFilterDemo&quot;, description=&quot;WebFilter Demo&quot;,<br>        filterName=&quot;WebFilterDemo&quot;)<br>@Component<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> WebFilterDemo implements <span class="hljs-keyword">Filter</span>&#123;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> init(FilterConfig filterConfig) &#123;<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;WebFilterDemo init()&quot;);<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(filterConfig.getFilterName());<br>    &#125;<br><br>    @Override<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> doFilter(ServletRequest arg0, ServletResponse arg1,<br>            FilterChain arg2) throws IOException, ServletException &#123;<br>        HttpServletRequest request = (HttpServletRequest) arg0;<br>        String url = request.getRequestURL().toString();<br>        <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;Enter WebFilterDemo &quot; + url);<br>        arg2.doFilter(arg0, arg1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>@Bean对象注入实现Filter接口，通过FilterRegistrationBean注入<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.filter.demo.filter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> javax.servlet.Filter;<br><span class="hljs-keyword">import</span> javax.servlet.FilterChain;<br><span class="hljs-keyword">import</span> javax.servlet.FilterConfig;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.ServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.ServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFilter1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig config)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestFilter1 init()&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest arg0, ServletResponse arg1,</span></span><br><span class="hljs-params"><span class="hljs-function">            FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br><br>        System.out.println(<span class="hljs-string">&quot;Enter TestFilter1 ***&quot;</span>);<br>        chain.doFilter(arg0, arg1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.filter.demo.filter;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WebFilterRegistration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterRegistrationBean&lt;TestFilter1&gt; <span class="hljs-title">registerFilter</span><span class="hljs-params">()</span></span>&#123;<br><br>        FilterRegistrationBean&lt;TestFilter1&gt; registration = <span class="hljs-keyword">new</span> FilterRegistrationBean&lt;TestFilter1&gt;();<br>        registration.setFilter(<span class="hljs-keyword">new</span> TestFilter1());      <br>        registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);      <br>        registration.setName(<span class="hljs-string">&quot;ParamFilter&quot;</span>); <br>        <span class="hljs-comment">// 优先顺序，数字越小，越先执行</span><br>        registration.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registration;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、Spring-Security原理"><a href="#2、Spring-Security原理" class="headerlink" title="2、Spring Security原理"></a>2、Spring <a href="https://so.csdn.net/so/search?q=Security&spm=1001.2101.3001.7020">Security</a>原理</h3><p>其实是一系列过滤器，也就是说，springsecurity采用了过滤器链的设计模式，通过url地址进行拦截，从而实现认证和授权的功能。最前端的过滤器链分别是UsernamePasswordAuthenticationFilter和BasicAuthenticationFilter。在实际开发中一般直接实现这些过滤器，就可以完成基本的授权和认证。</p><p>UsernamePasswordAuthenticationFilter主要是对登录接口拦截，获取到登录时的用户名和密码，并将这些信息封装成UsernamePasswordAuthenticationToken传递，通过对UserDetailService进行实现，可以完成相应的登录逻辑。</p><p>BasicAuthenticationFilter则是完成对普通请求的过滤，一般是获取请求的请求头拿到token，判断token有效就放行。</p><p><img src="/2022/03/19/springsecurity/1646183516637.png" alt="1646183516637"></p><h3 id="什么是安全上下文security-context？"><a href="#什么是安全上下文security-context？" class="headerlink" title="什么是安全上下文security context？"></a>什么是安全上下文security context？</h3><p>Security context实际上就是一个存放授权信息的一个接口，</p><h3 id="什么是JWT-优点"><a href="#什么是JWT-优点" class="headerlink" title="什么是JWT,优点"></a>什么是JWT,优点</h3><ol><li><p>支持跨域访问，Cookie不允许跨域访问(因为cookie包含Domain），但要求是Http协议</p><p><img src="/2022/03/19/springsecurity/1646268230314.png" alt="1646268230314"></p></li><li><p>无状态，token不需要在服务端储存session,token包含了所有的用户信息。</p></li><li><p>适合移动端，客户端为ios，Android时，cookie不支持</p></li><li><p>适合CDN（内容分发网络）</p></li><li><p>规避csrf（跨站请求伪造 )</p></li><li><p>性能比session好，和session相比,要考虑到如何在服务端储存，如果是分布式的架构，又要保证每次请求都是同一个服务器或者是需要保证session在其他服务器上保持同步。而token就只需要做一次SHA256计算。</p></li></ol><p>组成：</p><p>第一部分：header包含声明类型和加密算法类型</p><p>第二部分：payload载荷</p><p>第三部分：</p>]]></content>
    
    
    <categories>
      
      <category>常用框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java核心技术卷笔记</title>
    <link href="/2022/03/19/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/"/>
    <url>/2022/03/19/java%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E5%8D%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="java核心技术卷"><a href="#java核心技术卷" class="headerlink" title="java核心技术卷"></a>java核心技术卷</h1><h2 id="第五章-继承"><a href="#第五章-继承" class="headerlink" title="第五章 继承"></a>第五章 继承</h2><h3 id="泛型数组列表"><a href="#泛型数组列表" class="headerlink" title="泛型数组列表"></a>泛型数组列表</h3><ul><li>java中，允许数组的大小在运行时决定。</li><li>而且如果使用了ArrayList那么它的数组大小可以动态改变（扩容或缩减 trimtoSize）</li></ul><h4 id="ArrayList-lt-gt-数组"><a href="#ArrayList-lt-gt-数组" class="headerlink" title="ArrayList&lt;&gt;数组"></a>ArrayList&lt;&gt;数组</h4><blockquote><p>注意</p><p>set方法：只能对存在的元素调用，如果下标不存在，会出错</p></blockquote><h3 id="包装器和自动装箱"><a href="#包装器和自动装箱" class="headerlink" title="包装器和自动装箱"></a>包装器和自动装箱</h3><p>包装：基本数据类型它不是对象，所以需要包装器进行包装为对象。</p><p>自动拆箱：包装类和未包装类可以直接转换，而不需要手动实现。</p><h4 id="大小比较"><a href="#大小比较" class="headerlink" title="大小比较"></a>大小比较</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Integer a</span> = 1000;<br><span class="hljs-attribute">Integer b</span> = 1000;<br><span class="hljs-attribute">boolen res</span> = a==b<br></code></pre></td></tr></table></figure><p>res的值可能不同，也就是说a和b的内存地址可能不同。所以在比较值的时候，应该尽量使用eauqals方法。</p><p>因为介于-128-127之间的short和integer被包装到固定对象。</p><h4 id="Integer常用api"><a href="#Integer常用api" class="headerlink" title="Integer常用api"></a>Integer常用api</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListTest</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Integer a = <span class="hljs-number">1000</span>;<br>        String s = <span class="hljs-string">&quot;1111&quot;</span>;<br>        <span class="hljs-keyword">int</span> value = a.intValue();<br>        <span class="hljs-keyword">int</span> i = Integer.parseInt(s);<br>        String s1 = a.toString();<br>        Integer integer = Integer.valueOf(s);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="参数可变的方法"><a href="#参数可变的方法" class="headerlink" title="参数可变的方法"></a>参数可变的方法</h3><p>语法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">xx</span><span class="hljs-params">(数据类型... args)</span></span><br><br>例如：<br><span class="hljs-function"><span class="hljs-title">max</span><span class="hljs-params">(double... args)</span></span><br></code></pre></td></tr></table></figure><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p>枚举类相当于已经构建好实例的类。</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>放一下</p><h2 id="第六章-接口"><a href="#第六章-接口" class="headerlink" title="第六章 接口"></a>第六章 接口</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><h4 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h4><h5 id="接口演化"><a href="#接口演化" class="headerlink" title="接口演化"></a>接口演化</h5><p>默认方法解决了<code>接口演化</code>的问题。</p><p>exmaple： 一个Student继承了Play接口，而接口可能会在未来增加一些方法，如果这个方法不是非默认方法，那么就会有编译问题。但是如果这个方法是默认方法，程序就不会报错，尽管被需要调用该方法也不会出错。</p><h5 id="接口冲突"><a href="#接口冲突" class="headerlink" title="接口冲突"></a>接口冲突</h5><ul><li><p>一个类实现了两个接口，这个两个接口有同名的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Person</span> , <span class="hljs-title">Named</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> Person.<span class="hljs-keyword">super</span>.getName();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>一个类实现了一个接口和继承了一个类，则个类和接口有同名的方法</p><ul><li>不论这个接口是默认方法还是抽象方法，都不会考虑，只考虑超类的方法（继承的方法）</li></ul></li></ul><h4 id="一些接口"><a href="#一些接口" class="headerlink" title="一些接口"></a>一些接口</h4><h5 id="Cloneable接口"><a href="#Cloneable接口" class="headerlink" title="Cloneable接口"></a>Cloneable接口</h5><blockquote><p><strong>浅拷贝和深拷贝</strong></p><p>浅拷贝并没有克隆对象中引用的其它对象</p></blockquote><p><strong>todo</strong> 加深</p><h3 id="Lambda表达"><a href="#Lambda表达" class="headerlink" title="Lambda表达"></a>Lambda表达</h3><p>lambda表达式就是一个可传递的代码块</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li><p>语法格式一 : 无参数，无返回值</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-function"><span class="hljs-params">()</span> -&gt;</span> System.out.println(<span class="hljs-string">&quot;Hello Lambda!&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>语法格式二 : 有一个参数，并且无返回值</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas">(<span class="hljs-meta">x</span>) -&gt; System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-meta">x</span>)<br></code></pre></td></tr></table></figure></li><li><p>语法格式三 : 若只有一个参数，小括号可以省略不写</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">x</span> -&gt; System.<span class="hljs-meta">out</span>.print<span class="hljs-meta">ln(</span><span class="hljs-meta">x</span>)<br></code></pre></td></tr></table></figure></li><li><p>语法格式四 : 有两个以上的参数，有返回值，并且 Lambda 体中有多条语句</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Comparator &lt;<span class="hljs-type">Integer</span>&gt; com = (x, y) -&gt; &#123;<br>    <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;函数式接口&quot;);<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">Integer</span>.compare(x, y);<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>语法格式五 : 若 Lambda 体中只有一条语句， return 和 大括号都可以省略不写</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">Comparator &lt;Integer&gt; com = <span class="hljs-function"><span class="hljs-params">(x, y)</span> -&gt;</span> Integer.compare(x, y);<br></code></pre></td></tr></table></figure></li><li><p>语法格式六 : Lambda 表达式的参数列表的数据类型可以省略不写，因为JVM编译器通过上下文推断出，数据类型，即“类型推断”</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">(<span class="hljs-type">Integer</span> x, <span class="hljs-type">Integer</span> y) -&gt; <span class="hljs-type">Integer</span>.<span class="hljs-keyword">compare</span>(x, y);<br></code></pre></td></tr></table></figure><p>注 : Lambda 表达式中的参数类型都是由编译器推断得出的。 Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。 Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的 “类型推断”</p></li></ul><h5 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h5><ul><li>函数式接口”是指仅仅只包含一个抽象方法的接口。</li></ul><blockquote><p>在Comparator接口中定义了两个抽象方法：compare 和 equals方法，但是由于equals方法是Object类的方法，重写后会让这个方法不再抽象。</p></blockquote><ul><li>@FunctionalInterface</li></ul><blockquote><p>如果一个接口只有一个抽象方法，他就是函数式接口，加上@FunctionalInterface注解，只是为了更明显</p></blockquote><ul><li>函数式接口可以用lambda表达式代替</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">Arrays.<span class="hljs-built_in">sort</span>(planets, (<span class="hljs-built_in">first</span>, <span class="hljs-built_in">second</span>) -&gt; <span class="hljs-built_in">first</span>.<span class="hljs-built_in">length</span>() - <span class="hljs-built_in">second</span>.<span class="hljs-built_in">length</span>());<br></code></pre></td></tr></table></figure><ul><li>Lambda表达式的作用就是转化为函数式接口，也就是说：lambda创建了函数式接口的实现类对象</li></ul><h4 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h4><p><a href="https://blog.csdn.net/weixin_42022555/article/details/81943263?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163936325716780269830388%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=163936325716780269830388&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-81943263.pc_search_result_cache&utm_term=lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8&spm=1018.2226.3001.4187">六种方法引用</a>（不是很常用）</p><ul><li>方法引用就是lambda表示式创建了函数式接口的实例对象，并且这个lambada表达式又作为其他他方法的方法体。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">(String string)</span></span>;<br>&#125;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">blog</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <br>        printString(<span class="hljs-string">&quot;静态方法引用&quot;</span>,System.out::println);    <br><span class="hljs-comment">//   实质代码: printString(&quot;静态方法引用&quot;, (string) -&gt; System.out.println(string));   </span><br>&#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printString</span><span class="hljs-params">(String str, test t)</span> </span>&#123;<br>        t.run(str);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>作用：</p><ul><li>内部类可以访问外部类的数据，包括私有的数据</li><li>内部类对同一包下的其它类隐藏</li><li>匿名内部类简化回调函数</li></ul><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><a href="https://www.runoob.com/w3cnote/java-inner-class-intro.html">博客地址</a></p><h5 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h5><h2 id="intera"><a href="#intera" class="headerlink" title="intera"></a>intera</h2>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础面试</title>
    <link href="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/"/>
    <url>/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h2><h3 id="⾯向对象和⾯向过程的区别"><a href="#⾯向对象和⾯向过程的区别" class="headerlink" title="⾯向对象和⾯向过程的区别"></a>⾯向对象和⾯向过程的区别</h3><ul><li>⾯向过程 ：<strong>⾯向过程性能⽐⾯向对象⾼</strong>。 因为类调⽤时需要实例化，开销⼤，消耗资源，所以当性能是最重要的考量因素的时候，⽐如单⽚机、嵌⼊式开发、Linux/Unix 等。⼀般采⽤⾯向过程开发。但是，⾯向过程没有⾯向对象易维护、易复⽤、易扩展。</li><li>⾯向对象 ：<strong>⾯向对象易维护、易复⽤、易扩展</strong>。 因为⾯向对象有封装、继承、多态性的特<br>性，所以可以设计出低耦合的系统，使 于维护。但是，⾯向对象性能<br>⽐⾯向过程低。</li></ul><blockquote><p> Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执⾏的二进制机械码。</p><h3 id="一处编译处处运行"><a href="#一处编译处处运行" class="headerlink" title="一处编译处处运行"></a>一处编译处处运行</h3><p> java从源代码到运行的流程</p><p> <img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211113133129514.png" alt="image-20211113133129514"></p></blockquote><ol><li>《编译》通过<code>javac</code>将源文件（<code>.java</code>）编译为<code>.class</code>文件</li><li>《解释》不同的操作系统有不同的虚拟机,通过JVM把<code>.class</code>转化为操作系统的能够读懂的二进制机械码</li></ol><h3 id="Java-语⾔有哪些特点"><a href="#Java-语⾔有哪些特点" class="headerlink" title="Java 语⾔有哪些特点"></a>Java 语⾔有哪些特点</h3><ol><li><p>⾯向对象（封装，继承，多态）；</p></li><li><p>平台⽆关性（ Java 虚拟机实现平台⽆关性）；</p></li><li><p>⽀持多线程（ C++ 语⾔没有内置的多线程机制，因此必须调⽤操作系统的多线程功能来进<br>⾏多线程程序设计，⽽ Java 语⾔却提供了多线程⽀持）；</p></li><li><p>⽀持⽹络编程并且很⽅便（ Java 语⾔诞⽣本身就是为简化⽹络编程设计的，因此 Java 语<br>⾔不仅⽀持⽹络编程⽽且很⽅便）；</p></li><li><p>编译与解释并存：先把源文件编译为class文件，再将class文件解释为机器能够读得懂的二进制机械码</p></li></ol><h3 id="JVM-JDK-和-JRE-最详细通俗的解答"><a href="#JVM-JDK-和-JRE-最详细通俗的解答" class="headerlink" title="JVM JDK 和 JRE 最详细通俗的解答"></a>JVM JDK 和 JRE 最详细通俗的解答</h3><h4 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h4><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211017225824857.png" alt="image-20211017225824857"></p><p>Java 虚拟机（JVM）是运⾏ Java 字节码的虚拟机。实现⼀次编译，随处可以运⾏。</p><p><strong>Java</strong> <strong>程序从源代码到运⾏⼀般有下⾯</strong> <strong>3</strong> <strong>步：</strong></p><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211017225936809.png" alt="image-20211017225936809"></p><h4 id="JDK-和-JRE"><a href="#JDK-和-JRE" class="headerlink" title="JDK 和 JRE"></a>JDK 和 JRE</h4><ul><li><p>JDK 是 Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编<br>译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p></li><li><p>JRE 是 Java 运⾏时环境。它能够运⾏已编译 Java 程序，它包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的⼀些基础构件。</p></li></ul><h3 id="Oracle-JDK-和-OpenJDK-的对⽐"><a href="#Oracle-JDK-和-OpenJDK-的对⽐" class="headerlink" title="Oracle JDK 和 OpenJDK 的对⽐"></a><strong>Oracle JDK</strong> <strong>和</strong> <strong>OpenJDK</strong> <strong>的对⽐</strong></h3><ol><li>OpenJDK 是⼀个参考模型并且是完全开源的，⽽ Oracle JDK 是 OpenJDK 的⼀个实现，并不是完全开源的；</li><li>Oracle JDK ⽐ OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码⼏乎相同，但 OracleJDK 有更多的类和⼀些错误修复。</li><li>在响应性和 JVM 性能⽅⾯，Oracle JDK 与 OpenJDK 相⽐提供了更好的性能；</li></ol><h3 id="Java-和-C-的区别"><a href="#Java-和-C-的区别" class="headerlink" title="Java 和 C++的区别"></a>Java 和 C++的区别</h3><ul><li><p>都是⾯向对象的语⾔，都⽀持封装、继承和多态</p></li><li><p>Java 不提供指针来直接访问内存，程序内存更加安全</p></li><li><p>Java 的类是单继承的，C++ ⽀持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。</p></li><li><p>Java 有⾃动内存管理机制，不需要程序员⼿动释放⽆⽤内存</p></li><li><p>在 C 语⾔中，字符串或字符数组最后都会有⼀个额外的字符‘\0’来表示结束。但是，Java 语<br>⾔中没有结束符这⼀概念。</p></li></ul><h3 id="字符型常量和字符串常量的区别"><a href="#字符型常量和字符串常量的区别" class="headerlink" title="字符型常量和字符串常量的区别"></a>字符型常量和字符串常量的区别</h3><ol><li>形式上: 字符常量是单引号引起的⼀个字符; 字符串常量是双引号引起的若⼲个字符</li><li>含义上: 字符常量相当于⼀个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表⼀个地<br>址值(该字符串在内存中存放位置)</li><li>占内存⼤⼩ 字符常量<strong>只占 2 个字节</strong>; 字符串常量占若⼲个字节。</li></ol><h3 id="构造器-Constructor-是否可被-override"><a href="#构造器-Constructor-是否可被-override" class="headerlink" title="构造器 Constructor 是否可被 override?"></a>构造器 Constructor 是否可被 override?</h3><p>Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到⼀个类中有多<br>个构造函数的情况。</p><h3 id="重载和重写的区别"><a href="#重载和重写的区别" class="headerlink" title="重载和重写的区别"></a>重载和重写的区别</h3><ul><li><p>重载就是同⼀个类中多个同名⽅法根据不同的传参来执⾏不同的逻辑处理。</p></li><li><p>重写就是⼦类对⽗类⽅法的重新改造，外部样⼦不能改变，内部逻辑可以改变</p></li></ul><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211017231220928.png" alt="image-20211017231220928"></p><p>为什么重写是发生在运行期，编译器是无法知道我们到底是调用父类的方法还是子类的方法，相反的，只有在实际运行的时候，我们才知道应该调用哪个方法。</p><h3 id="Java-⾯向对象编程三⼤特性-封装-继承-多态"><a href="#Java-⾯向对象编程三⼤特性-封装-继承-多态" class="headerlink" title="Java ⾯向对象编程三⼤特性: 封装 继承 多态"></a>Java ⾯向对象编程三⼤特性: 封装 继承 多态</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><p>封装把⼀个对象的属性私有化，同时提供⼀些可以被外界访问的属性的⽅法</p><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>继承是使⽤已存在的类的定义作为基础建⽴新类的技术，新类的定义可以增加新的数据或新的功</p><p>能，也可以⽤⽗类的功能，但不能选择性地继承⽗类。</p><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><p>即⼀个引⽤变量到底会指向哪个类的实例对象，该引⽤变量发出的⽅法调⽤到底是哪个类中实现的⽅法，必须在由程序运⾏期间才能决定。</p><p>在 Java 中有两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）。</p><h4 id="对多态的理解"><a href="#对多态的理解" class="headerlink" title="对多态的理解"></a>对多态的理解</h4><p>多态体现为<strong>父类引用变量可以指向子类对象</strong>。</p><p>编译时多态</p><p>运行时多态</p><h3 id="String-StringBuffer-和-StringBuilder-的区别是什么"><a href="#String-StringBuffer-和-StringBuilder-的区别是什么" class="headerlink" title="String StringBuffer 和 StringBuilder 的区别是什么?"></a>String StringBuffer 和 StringBuilder 的区别是什么?</h3><table><thead><tr><th></th><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>可变性</td><td>不可变（final修饰）</td><td>可变</td><td>可变</td></tr><tr><td>线程安全性</td><td>y    (常量)</td><td>y</td><td>n  (没有同步锁)</td></tr><tr><td>性能</td><td>最低</td><td>中等</td><td>最高</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><p>对于三者使⽤的总结：</p><ol><li>操作少量的数据: 适⽤ String</li><li>单线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuilder</li><li>多线程操作字符串缓冲区下操作⼤量数据: 适⽤ StringBuffer</li></ol><h3 id="⾃动装箱与拆箱"><a href="#⾃动装箱与拆箱" class="headerlink" title="⾃动装箱与拆箱"></a>⾃动装箱与拆箱</h3><ul><li>装箱：将基本类型⽤它们对应的引⽤类型包装起来；</li><li>拆箱：将包装类型转换为基本数据类型；</li></ul><h4 id="为什么要装箱和拆箱"><a href="#为什么要装箱和拆箱" class="headerlink" title="为什么要装箱和拆箱"></a>为什么要装箱和拆箱</h4><p>为了保证通用性和提高系统性能</p><ul><li><p>Java是一种完全面向对象的语言。因此，包括数字、字符、日期、布尔值等等在内的一切，都是对象。</p></li><li><p>对于CPU来说，处理一个完整的对象，需要很多的指令，对于内存来说，又需要很多的内存。</p></li></ul><h3 id="在⼀个静态⽅法内调⽤⼀个⾮静态成员为什么是⾮法的"><a href="#在⼀个静态⽅法内调⽤⼀个⾮静态成员为什么是⾮法的" class="headerlink" title="在⼀个静态⽅法内调⽤⼀个⾮静态成员为什么是⾮法的"></a>在⼀个静态⽅法内调⽤⼀个⾮静态成员为什么是⾮法的</h3><p>静态⽅法可以不通过对象进⾏调⽤，如果如题说是，那么非静态方法也能够直接通过类名调用。</p><h3 id="在-Java-中定义⼀个不做事且没有参数的构造⽅法的作⽤"><a href="#在-Java-中定义⼀个不做事且没有参数的构造⽅法的作⽤" class="headerlink" title="在 Java 中定义⼀个不做事且没有参数的构造⽅法的作⽤"></a>在 Java 中定义⼀个不做事且没有参数的构造⽅法的作⽤</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person3</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person3</span><span class="hljs-params">(String name, String sex, <span class="hljs-keyword">int</span> age )</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.sex = sex;<br>        <span class="hljs-keyword">this</span>.age = age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当使用无参构造法构造实例对象时，如果无参方法被覆盖了，编译不通过。</p><h3 id="接⼝和抽象类的区别是什么？"><a href="#接⼝和抽象类的区别是什么？" class="headerlink" title="接⼝和抽象类的区别是什么？"></a>接⼝和抽象类的区别是什么？</h3><ul><li>在jdk1.8前，接口中的方法都是抽象方法（被abstract修饰），而抽象类有非抽象方法。但是1.8以后，接口可以有默认实现，用default修饰。</li><li>⼀个类可以实现多个接⼝，但只能实现⼀个抽象类。</li><li>接⼝⾃⼰本身可以通过 extends 关键字扩展多个接⼝，但是抽象类只能继承一个抽象类。</li><li>接口中的变量默认是通过public static final进行修饰，而抽象类不一定。</li><li>从设计层⾯来说，抽象是对类的抽象，是⼀种模板设计，⽽接⼝是对⾏为的抽象，是⼀种⾏<br>为的规范。</li></ul><h3 id="成员变量与局部变量的区别有哪些"><a href="#成员变量与局部变量的区别有哪些" class="headerlink" title="成员变量与局部变量的区别有哪些"></a>成员变量与局部变量的区别有哪些</h3><ol><li><p>形式上：成员变量定义在类中，局部变量定义在类的方法中，不能被static修饰</p><p>都是都能够被final修饰</p></li><li><p>内存中的存储方式：如果成员变量是使⽤ static 修饰的，那么这个成员变量是属于类的，如果没有使⽤ static 修饰，这个成员变量是属于实例的。静态变量存储在堆内存，</p></li><li><p>⽣存时间:成员变量是对象的⼀部分，它随着对象的创建⽽存在，⽽局部变量随着⽅法的调⽤⽽⾃动消失。</p></li><li><p>成员变量如果没有被赋初值:则会⾃动以类型的默认值⽽赋值（⼀种情况例外:被 final 修饰</p><p>的成员变量也必须显式地赋值），⽽局部变量则不会⾃动赋值。</p></li></ol><h3 id="创建⼀个对象⽤什么运算符-对象实体与对象引⽤有何不同"><a href="#创建⼀个对象⽤什么运算符-对象实体与对象引⽤有何不同" class="headerlink" title="创建⼀个对象⽤什么运算符?对象实体与对象引⽤有何不同?"></a>创建⼀个对象⽤什么运算符?对象实体与对象引⽤有何不同?</h3><p>new 运算符</p><p>对象引用要么指向对象，要么不指向；对象实例可以有几个引用指向它</p><h3 id="构造方法的作用"><a href="#构造方法的作用" class="headerlink" title="构造方法的作用"></a>构造方法的作用</h3><p>对象的初始化</p><p>一个类没有声明构造方法也能执行，因为会默认有无参构造法</p><h3 id="构造⽅法有哪些特性？"><a href="#构造⽅法有哪些特性？" class="headerlink" title="构造⽅法有哪些特性？"></a>构造⽅法有哪些特性？</h3><ul><li>方法名和类名相同</li><li>没有返回值，但不能用void声明</li><li>生成类的对象时自动执行，不需要调用</li></ul><h3 id="静态⽅法和实例⽅法有何不同"><a href="#静态⽅法和实例⽅法有何不同" class="headerlink" title="静态⽅法和实例⽅法有何不同"></a>静态⽅法和实例⽅法有何不同</h3><ol><li>在外部调⽤静态⽅法时，可以使⽤”类名.⽅法名”的⽅式，也可以使⽤”对象名.⽅法名”的⽅<br> 式。⽽实例⽅法只有后⾯这种⽅式。也就是说，<strong>调⽤静态⽅法可以⽆需创建对象</strong>。</li><li>静态⽅法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态⽅法），⽽不<br> 允许访问实例成员变量和实例⽅法；实例⽅法则⽆此限制。</li></ol><h3 id="对象的相等不同"><a href="#对象的相等不同" class="headerlink" title="对象的相等不同?"></a>对象的相等不同?</h3><p>对象的相等，⽐的是内存中存放的内容是否相等（equals）。⽽引⽤相等，⽐的是他们指向的内存地址是</p><p>否相等。（==）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test1</span> </span>&#123;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> String a = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// a 为⼀个引⽤</span><br> String b = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">// b为另⼀个引⽤,对象的内容⼀样</span><br> String aa = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 放在常量池中</span><br> String bb = <span class="hljs-string">&quot;ab&quot;</span>; <span class="hljs-comment">// 从常量池中查找</span><br> <span class="hljs-keyword">if</span> (aa == bb) <span class="hljs-comment">// true</span><br> System.out.println(<span class="hljs-string">&quot;aa==bb&quot;</span>);<br> <span class="hljs-keyword">if</span> (a == b) <span class="hljs-comment">// false，⾮同⼀对象</span><br> System.out.println(<span class="hljs-string">&quot;a==b&quot;</span>);<br> <span class="hljs-keyword">if</span> (a.equals(b)) <span class="hljs-comment">// true</span><br> System.out.println(<span class="hljs-string">&quot;aEQb&quot;</span>);<br> <span class="hljs-keyword">if</span> (<span class="hljs-number">42</span> == <span class="hljs-number">42.0</span>) &#123; <span class="hljs-comment">// true</span><br> System.out.println(<span class="hljs-string">&quot;true&quot;</span>);<br> &#125;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hashCode-与-equals"><a href="#hashCode-与-equals" class="headerlink" title="hashCode 与 equals"></a>hashCode 与 equals</h3><blockquote><p>hashCode </p><ul><li>定义在Object 类中，这就意味着 Java 中的任何类都包含有 hashCode() 函数</li><li>hashCode() 的作⽤是获取哈希码，也称为散列码;哈希码的作⽤是确定该对象在哈希表中的索引位置。散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。</li><li>Object 的 hashcode ⽅法是本地⽅法，也就是⽤ c 语⾔或 c++ 实现的，该⽅法通常⽤来将对象的 内存地址 转换为整数之后返回。</li></ul></blockquote><h4 id="为什么要有hascode"><a href="#为什么要有hascode" class="headerlink" title="为什么要有hascode"></a>为什么要有hascode</h4><p>每当把对象加入到hashset时，如果直接比较equal()来比较对象，会降低效率。如果先比较hashcode是否相同，再用equals()比较是否真的相同，就可以降低equals的比较，因为哈希表的检索很快！</p><h4 id="为什么重写-equals-时必须重写-hashCode-⽅法？"><a href="#为什么重写-equals-时必须重写-hashCode-⽅法？" class="headerlink" title="为什么重写 equals 时必须重写 hashCode ⽅法？"></a>为什么重写 equals 时必须重写 hashCode ⽅法？</h4><p>如果两个对象相等，则 hashcode ⼀定也是相同的。两个对象相等,对两个对象分别调⽤ equals⽅法都返回 true。</p><p>实现了“两个对象 equals 相等，那么地址也一定相同”的概念！</p><h4 id="为什么两个对象有相同的-hashcode-值，它们也不⼀定是相等的？"><a href="#为什么两个对象有相同的-hashcode-值，它们也不⼀定是相等的？" class="headerlink" title="为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？"></a>为什么两个对象有相同的 hashcode 值，它们也不⼀定是相等的？</h4><p>hashCode()算法的问题!</p><p>所以在比较对象相等的时候，不仅要比较hashcode还是要比较equals比较</p><h3 id="String是基本类型数据吗"><a href="#String是基本类型数据吗" class="headerlink" title="String是基本类型数据吗"></a>String是基本类型数据吗</h3><p>不是。为引用，基本的就是byte,short,int,long,float,double,cahr,boolean</p><h3 id="java中有没有goto"><a href="#java中有没有goto" class="headerlink" title="java中有没有goto"></a>java中有没有goto</h3><p>保留字</p><h3 id="amp-和-amp-amp"><a href="#amp-和-amp-amp" class="headerlink" title="&amp;和&amp;&amp;"></a>&amp;和&amp;&amp;</h3><p>&amp;表示与 、和</p><p>都是要求两边为true才为true，但&amp;&amp;可以短路，如果左边为false则直接false，右边的不会进行计算。</p><h3 id="为什么-Java-中只有值传递？"><a href="#为什么-Java-中只有值传递？" class="headerlink" title="为什么 Java 中只有值传递？"></a>为什么 Java 中只有值传递？</h3><p>⽅法得到的是所有参数值的⼀个拷⻉。</p><ul><li><strong>⼀个⽅法不能修改⼀个基本数据类型的参数</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br> <span class="hljs-keyword">int</span> num1 = <span class="hljs-number">10</span>;<br> <span class="hljs-keyword">int</span> num2 = <span class="hljs-number">20</span>;<br> swap(num1, num2);<br> System.out.println(<span class="hljs-string">&quot;num1 = &quot;</span> + num1);<br> System.out.println(<span class="hljs-string">&quot;num2 = &quot;</span> + num2);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br> <span class="hljs-keyword">int</span> temp = a;<br> a = b;<br> b = temp;<br> System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br> System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>&#125;<br><br>a = <span class="hljs-number">20</span><br>b = <span class="hljs-number">10</span><br>num1 = <span class="hljs-number">10</span><br>num2 = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211018174207110.png" alt="image-20211018174207110"></p><ul><li>⼀个⽅法不能修改⼀个基本数据类型的参数，但可以修改对象引⽤作为参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> &#125;;<br>System.out.println(arr[<span class="hljs-number">0</span>]);<br>change(arr);<br>System.out.println(arr[<span class="hljs-number">0</span>]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span> </span>&#123;<br><span class="hljs-comment">// 将数组的第⼀个元素变为0</span><br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211018174348780.png" alt="image-20211018174348780"></p><h3 id="线程、程序、进程的基本概念，及联系"><a href="#线程、程序、进程的基本概念，及联系" class="headerlink" title="线程、程序、进程的基本概念，及联系"></a>线程、程序、进程的基本概念，及联系</h3><p><strong>程序</strong>是含有指令和数据的⽂件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。</p><p><strong>进程</strong>是程序的⼀次执⾏过程，是系统运⾏程序的基本单位。</p><p><strong>线程</strong>与进程相似，但线程是⼀个⽐进程更⼩的执⾏单位。</p><h3 id="线程有哪些基本状态"><a href="#线程有哪些基本状态" class="headerlink" title="线程有哪些基本状态"></a>线程有哪些基本状态</h3><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211018183752472.png" alt="image-20211018183752472"></p><h3 id="final-关键字"><a href="#final-关键字" class="headerlink" title="final 关键字"></a>final 关键字</h3><p>final 关键字主要⽤在三个地⽅：变量、⽅法、类。</p><ol><li>对于⼀个 final 变量，如果是基本数据类型的变量，则其数值⼀旦在初始化之后便不能更<br>改；如果是引⽤类型的变量，则在对其初始化之后便不能再让其指向另⼀个对象。</li><li>当⽤ final 修饰⼀个类时，表明这个类不能被继承。final 类中的所有成员⽅法都会被隐式地<br>指定为 final ⽅法。</li><li>使⽤ final ⽅法的原因有两个。第⼀个原因是把⽅法锁定，以防任何继承类修改它的含义；<br>第⼆个原因是效率。在早期的 Java 实现版本中，会将 final ⽅法转为内嵌调⽤。但是如果⽅<br>法过于庞⼤，可能看不到内嵌调⽤带来的任何性能提升（现在的 Java 版本已经不需要使⽤<br>final ⽅法进⾏这些优化了）。类中所有的 private ⽅法都隐式地指定为 final。</li></ol><h3 id="Java-序列化中如果有些字段不想进⾏序列化，怎么办？"><a href="#Java-序列化中如果有些字段不想进⾏序列化，怎么办？" class="headerlink" title="Java 序列化中如果有些字段不想进⾏序列化，怎么办？"></a>Java 序列化中如果有些字段不想进⾏序列化，怎么办？</h3><p>对于不想进⾏序列化的变量，使⽤ transient 关键字修饰</p><h3 id="获取⽤键盘输⼊常⽤的两种⽅法"><a href="#获取⽤键盘输⼊常⽤的两种⽅法" class="headerlink" title="获取⽤键盘输⼊常⽤的两种⽅法"></a>获取⽤键盘输⼊常⽤的两种⽅法</h3><ol><li><p>通过 Scanner</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Scanner input = <span class="hljs-keyword">new</span> Scanner(System.in);<br>String s = input.nextLine();<br>input.close();<br></code></pre></td></tr></table></figure></li><li><p> BufferedReader</p></li></ol>   <figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe">BufferedReader input = <span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(System.<span class="hljs-keyword">in</span>));<br><span class="hljs-keyword">String</span> s = input.readLine();<br></code></pre></td></tr></table></figure><h3 id="接口中的修饰符"><a href="#接口中的修饰符" class="headerlink" title="接口中的修饰符"></a>接口中的修饰符</h3><ul><li>接口的修饰符：abstract</li><li>接口中字段的修饰：public static final</li><li>接口中的方法分修饰：public abstract</li></ul><h3 id="java中的权限修饰符"><a href="#java中的权限修饰符" class="headerlink" title="java中的权限修饰符"></a>java中的权限修饰符</h3><h4 id="类的修饰符"><a href="#类的修饰符" class="headerlink" title="类的修饰符"></a>类的修饰符</h4><p>类可以被public修饰，表示它是公共的可以访问的</p><p>abstract:表示抽象类，不能够被实例</p><p>final:不能够被继承</p><h4 id="方法的修饰符"><a href="#方法的修饰符" class="headerlink" title="方法的修饰符"></a>方法的修饰符</h4><p>public、protrcted(同类不同包下，可以访问)、private</p><p>abstract：表示为抽象方法，没有方法体和具体实现</p><p>static:表示该方法属于类，可以直接通过类名调用该方法</p><p>final：表示为最终方法，不能够重写或者覆盖。</p><p>native:表示本地方法，非java方法</p><p>synchronize：</p><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><h3 id="七大数据类型有哪些"><a href="#七大数据类型有哪些" class="headerlink" title="七大数据类型有哪些"></a>七大数据类型有哪些</h3><p>int byte  short long float double char boolean</p><h3 id="Java-中-IO-流"><a href="#Java-中-IO-流" class="headerlink" title="Java 中 IO 流"></a>Java 中 IO 流</h3><h4 id="Java-中-IO-流分为⼏种"><a href="#Java-中-IO-流分为⼏种" class="headerlink" title="Java 中 IO 流分为⼏种?"></a>Java 中 IO 流分为⼏种?</h4><ul><li><p>按照流的流向分，可以分为输⼊流和输出流；</p></li><li><p>按照操作单元划分，可以划分为字节流和字符流；</p><p><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211115161139289.png" alt="image-20211115161139289"></p></li></ul><h4 id="既然有了字节流-为什么还要有字符流"><a href="#既然有了字节流-为什么还要有字符流" class="headerlink" title="既然有了字节流,为什么还要有字符流?"></a>既然有了字节流,为什么还要有字符流?</h4><p>直接操作字符,提升效率</p><h4 id="BIO-NIO-AIO-有什么区别"><a href="#BIO-NIO-AIO-有什么区别" class="headerlink" title="BIO,NIO,AIO 有什么区别?"></a>BIO,NIO,AIO 有什么区别?</h4><p><strong>BIO (Blocking I/O):</strong> 同步阻塞 I/O 模式，数据的读取写⼊必须阻塞在⼀个线程内等待其完</p><p>成。BIO单线程，简单但效率低。</p><p><strong>NIO (Non-blocking/New I/O):</strong> NIO 是⼀种同步⾮阻塞的 I/O 模型，在 Java 1.4 中引⼊了</p><p>NIO 框架。</p><p>AIO <strong>(Asynchronous I/O)</strong>:异步非阻塞。</p><h3 id="深拷⻉-vs-浅拷⻉"><a href="#深拷⻉-vs-浅拷⻉" class="headerlink" title="深拷⻉ vs 浅拷⻉"></a>深拷⻉ vs 浅拷⻉</h3><ol><li>浅拷⻉：对基本数据类型进⾏值传递，对引⽤数据类型进⾏引⽤传递般的拷⻉，此为浅拷<br> ⻉。</li><li>深拷⻉：对基本数据类型进⾏值传递，对引⽤数据类型，创建⼀个新的对象，并复制其内<br> 容，此为深拷⻉。</li></ol><h3 id="Java中InvokeDynamic指令是干什么？"><a href="#Java中InvokeDynamic指令是干什么？" class="headerlink" title="Java中InvokeDynamic指令是干什么？"></a>Java中InvokeDynamic指令是干什么？</h3><h2 id="JAVA集合"><a href="#JAVA集合" class="headerlink" title="JAVA集合"></a>JAVA集合</h2><h3 id="List-Set-Map三者的区别？"><a href="#List-Set-Map三者的区别？" class="headerlink" title="List,Set,Map三者的区别？"></a>List,Set,Map三者的区别？</h3><ul><li><p>List (对付顺序的好帮⼿)： 存储的元素是有序的、可重复的。</p></li><li><p>Set (注重独⼀⽆⼆的性质): 存储的元素是⽆序的、不可重复的。</p></li><li><p>Map (⽤ Key 来搜索的专家): 使⽤键值对（kye-value）存储，Key 是⽆序的、不可重复的，value 是⽆序的、可重复的，每个键最多映射到⼀个值。</p></li></ul><h3 id="Arraylist-与-LinkedList-区别"><a href="#Arraylist-与-LinkedList-区别" class="headerlink" title="Arraylist 与 LinkedList 区别"></a>Arraylist 与 LinkedList 区别</h3><table><thead><tr><th></th><th>Arraylist</th><th>LinkedList</th></tr></thead><tbody><tr><td><strong>线程安全</strong></td><td>不安全</td><td>不安全</td></tr><tr><td>数据结构</td><td><strong>Object</strong> <strong>数组</strong></td><td>双向链表</td></tr><tr><td><strong>快速随机访问</strong></td><td>支持</td><td>不支持</td></tr><tr><td>内存占用空间</td><td>list表预留一定的容量空间</td><td>每一个元素都比ArrayList消耗的空间多</td></tr></tbody></table><h3 id="ArrayList-与-Vector-区别呢"><a href="#ArrayList-与-Vector-区别呢" class="headerlink" title="ArrayList 与 Vector 区别呢"></a>ArrayList 与 Vector 区别呢</h3><ul><li>ArrayList 是 List 的主要实现类，底层使⽤ Object[ ] 存储，适⽤于频繁的查找⼯作，线程不安全 ；</li><li>Vector 是 List 的古⽼实现类，底层使⽤ Object[ ] 存储，线程安全的</li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h4 id><a href="#" class="headerlink" title></a><img src="/2022/03/19/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95/image-20211018184442674.png" alt="image-20211018184442674"></h4><h4 id="Throwable-类常⽤⽅法"><a href="#Throwable-类常⽤⽅法" class="headerlink" title="Throwable 类常⽤⽅法"></a>Throwable 类常⽤⽅法</h4><ul><li><p><strong>public string getMessage()</strong> :返回异常发⽣时的简要描述</p></li><li><p><strong>public string toString()</strong> :返回异常发⽣时的详细信息</p></li><li><p><strong>public string getLocalizedMessage()</strong> :返回异常对象的本地化信息。使⽤ Throwable 的⼦类覆盖这个⽅法，可以⽣成本地化信息。如果⼦类没有覆盖该⽅法，则该⽅法返回的信息与</p></li><li><p>getMessage 返回的结果相同</p></li><li><p><strong>public void printStackTrace()</strong> :在控制台上打印 Throwable 对象封装的异常信息</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫学习笔记</title>
    <link href="/2022/01/14/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/01/14/%E7%88%AC%E8%99%AB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="xpath解析"><a href="#xpath解析" class="headerlink" title="xpath解析"></a>xpath解析</h3>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Elasticsearch</title>
    <link href="/2022/01/03/elastcsearch/"/>
    <url>/2022/01/03/elastcsearch/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是Elasticsearch"><a href="#什么是Elasticsearch" class="headerlink" title="什么是Elasticsearch"></a>什么是Elasticsearch</h3><ul><li>个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p> Elasticsearch 通过隐藏 Lucene 的复杂性(Lucene 只是一个提供全文搜索功能类库的核心工具包)，取而代之的提供一套简单一致的 RESTful API，完成全文检索。</p><p>Elasticsearch 将所有的功能打包成一个单独的服务，这样你可以通过程序与它提供的简单的 RESTful API 进行通信。</p><p>它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理 PB 级别的数据。</p><h3 id="chr"><a href="#chr" class="headerlink" title="chr"></a>chr</h3>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>手写Spring笔记</title>
    <link href="/2022/01/02/%E6%89%8B%E5%86%99Spring/"/>
    <url>/2022/01/02/%E6%89%8B%E5%86%99Spring/</url>
    
    <content type="html"><![CDATA[<h3 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h3><p>step1所写的容器，不能够注册实例对象。这一步是优化这一点。</p><p>不足：如果要注册的对象含有构造参数，无法放入容器。会抛出异常。</p><p><img src="/2022/01/02/%E6%89%8B%E5%86%99Spring/image-20220102101925568.png" alt="image-20220102101925568"></p><h3 id="step4-基于Cglib实现含构造函数的类实例化策略"><a href="#step4-基于Cglib实现含构造函数的类实例化策略" class="headerlink" title="step4 基于Cglib实现含构造函数的类实例化策略"></a>step4 基于Cglib实现含构造函数的类实例化策略</h3><p><a href="https://blog.csdn.net/qq_33661044/article/details/79767596?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164117272916780255297750%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=164117272916780255297750&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-1-79767596.pc_search_result_cache&utm_term=cglib&spm=1018.2226.3001.4187">cglib参考文章</a></p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/zTfAIs5rNXiaKafsTUIKlmjZrCkwvew5BezTy0Cg4MzWXo3MUJxu40UibdX8yVHrybeD8aXewKgWiadcwp8vxu55g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring基础知识总结</title>
    <link href="/2021/12/27/spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/12/27/spring%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h3><p>做切面增强</p><h4 id="RequestContextHolder"><a href="#RequestContextHolder" class="headerlink" title="RequestContextHolder"></a>RequestContextHolder</h4><p>可以通过RequestContextHolder获取到HttpServletRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HttpServletRequest request = (ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();<br></code></pre></td></tr></table></figure><ul><li><p>request和response怎么和当前请求挂钩?</p><p>ThreadLocal的应用</p></li></ul><h3 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h3><p><a href="https://blog.csdn.net/itachi85/article/details/50773358?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164058332816780271596368%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=164058332816780271596368&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-50773358.pc_search_result_control_group&utm_term=%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F&spm=1018.2226.3001.4187">观察者模式</a></p><p>事件驱动</p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Shiro相关笔记</title>
    <link href="/2021/12/26/Shiro/"/>
    <url>/2021/12/26/Shiro/</url>
    
    <content type="html"><![CDATA[<h2 id="Shiro使用"><a href="#Shiro使用" class="headerlink" title="Shiro使用"></a>Shiro使用</h2><p><a href="https://shiro.apache.org/reference.html">官方文档</a></p><h3 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h3><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroFilterFactoryBean <span class="hljs-title">shiroFilterFactoryBean</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;<br>        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="hljs-keyword">new</span> ShiroFilterFactoryBean();<br>        <span class="hljs-comment">// 设置securityManager</span><br>        shiroFilterFactoryBean.setSecurityManager(securityManager);<br>        <span class="hljs-comment">// 登录的url</span><br>        shiroFilterFactoryBean.setLoginUrl(<span class="hljs-string">&quot;/login&quot;</span>);<br>        <span class="hljs-comment">// 登录成功后跳转的url</span><br>        shiroFilterFactoryBean.setSuccessUrl(<span class="hljs-string">&quot;/index&quot;</span>);<br>        <span class="hljs-comment">// 未授权url</span><br>        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="hljs-string">&quot;/403&quot;</span>);<br>        <br>        LinkedHashMap&lt;String, String&gt; filterChainDefinitionMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;&gt;();<br>        <br>        <span class="hljs-comment">// 定义filterChain，静态资源不拦截</span><br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/css/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/js/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/fonts/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/img/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        <span class="hljs-comment">// druid数据源监控页面不拦截</span><br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/druid/**&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        <span class="hljs-comment">// 配置退出过滤器，其中具体的退出代码Shiro已经替我们实现了 </span><br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/logout&quot;</span>, <span class="hljs-string">&quot;logout&quot;</span>);<br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot;anon&quot;</span>);<br>        <span class="hljs-comment">// 除上以外所有url都必须认证通过才可以访问，未通过认证自动访问LoginUrl</span><br>        filterChainDefinitionMap.put(<span class="hljs-string">&quot;/**&quot;</span>, <span class="hljs-string">&quot;authc&quot;</span>);<br>        <br>        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);<br>        <span class="hljs-keyword">return</span> shiroFilterFactoryBean;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span></span>&#123;  <br>        <span class="hljs-comment">// 配置SecurityManager，并注入shiroRealm</span><br>        DefaultWebSecurityManager securityManager =  <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>        securityManager.setRealm(shiroRealm());<br>        <span class="hljs-keyword">return</span> securityManager;  <br>    &#125; <br><br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ShiroRealm <span class="hljs-title">shiroRealm</span><span class="hljs-params">()</span></span>&#123;  <br>        <span class="hljs-comment">// 配置Realm，需自己实现</span><br>        ShiroRealm shiroRealm = <span class="hljs-keyword">new</span> ShiroRealm();  <br>        <span class="hljs-keyword">return</span> shiroRealm;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>anon</code>、<code>authc</code>等为Shiro为我们实现的过滤器，具体如下表所示：</p><table><thead><tr><th align="left">Filter Name</th><th align="left">Class</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">anon</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html">org.apache.shiro.web.filter.authc.AnonymousFilter</a></td><td align="left">匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例<code>/static/**=anon</code></td></tr><tr><td align="left">authc</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html">org.apache.shiro.web.filter.authc.FormAuthenticationFilter</a></td><td align="left">基于表单的拦截器；如<code>/**=authc</code>，如果没有登录会跳到相应的登录页面登录</td></tr><tr><td align="left">authcBasic</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html">org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</a></td><td align="left">Basic HTTP身份验证拦截器</td></tr><tr><td align="left">logout</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html">org.apache.shiro.web.filter.authc.LogoutFilter</a></td><td align="left">退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/），示例<code>/logout=logout</code></td></tr><tr><td align="left">noSessionCreation</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html">org.apache.shiro.web.filter.session.NoSessionCreationFilter</a></td><td align="left">不创建会话拦截器，调用<code>subject.getSession(false)</code>不会有什么问题，但是如果<code>subject.getSession(true)</code>将抛出<code>DisabledSessionException</code>异常</td></tr><tr><td align="left">perms</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html">org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</a></td><td align="left">权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例<code>/user/**=perms[&quot;user:create&quot;]</code></td></tr><tr><td align="left">port</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html">org.apache.shiro.web.filter.authz.PortFilter</a></td><td align="left">端口拦截器，主要属性<code>port(80)</code>：可以通过的端口；示例<code>/test= port[80]</code>，如果用户访问该页面是非80，将自动将请求端口改为80并重定向到该80端口，其他路径/参数等都一样</td></tr><tr><td align="left">rest</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html">org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</a></td><td align="left">rest风格拦截器，自动根据请求方法构建权限字符串；示例<code>/users=rest[user]</code>，会自动拼出user:read,user:create,user:update,user:delete权限字符串进行权限匹配（所有都得匹配，isPermittedAll）</td></tr><tr><td align="left">roles</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html">org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</a></td><td align="left">角色授权拦截器，验证用户是否拥有所有角色；示例<code>/admin/**=roles[admin]</code></td></tr><tr><td align="left">ssl</td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html">org.apache.shiro.web.filter.authz.SslFilter</a></td><td align="left">SSL拦截器，只有请求协议是https才能通过；否则自动跳转会https端口443；其他和port拦截器一样；</td></tr><tr><td align="left"><strong>user</strong></td><td align="left"><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html">org.apache.shiro.web.filter.authc.UserFilter</a></td><td align="left">用户拦截器，用户已经身份验证/记住我登录的都可；示例<code>/**=user</code></td></tr></tbody></table><h4 id="ShiroRealm-自己实现"><a href="#ShiroRealm-自己实现" class="headerlink" title="ShiroRealm 自己实现"></a>ShiroRealm 自己实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroRealm</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AuthorizingRealm</span> </span>&#123;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserMapper userMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取用户角色和权限</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principal)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 登录认证</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthenticationInfo <span class="hljs-title">doGetAuthenticationInfo</span><span class="hljs-params">(AuthenticationToken token)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>String userName = (String) token.getPrincipal();<br>String password = <span class="hljs-keyword">new</span> String((<span class="hljs-keyword">char</span>[]) token.getCredentials());<br><br>System.out.println(<span class="hljs-string">&quot;用户&quot;</span> + userName + <span class="hljs-string">&quot;认证-----ShiroRealm.doGetAuthenticationInfo&quot;</span>);<br>User user = userMapper.findByUserName(userName);<br><br><span class="hljs-comment">//shiro自定义了异常类</span><br><span class="hljs-keyword">if</span> (user == <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UnknownAccountException(<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (!password.equals(user.getPassword())) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IncorrectCredentialsException(<span class="hljs-string">&quot;用户名或密码错误！&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (user.getStatus().equals(<span class="hljs-string">&quot;0&quot;</span>)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> LockedAccountException(<span class="hljs-string">&quot;账号已被锁定,请联系管理员！&quot;</span>);<br>&#125;<br>SimpleAuthenticationInfo info = <span class="hljs-keyword">new</span> SimpleAuthenticationInfo(user, password, getName());<br><span class="hljs-keyword">return</span> info;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li><p>继承AuthorizingRealm，实现两个方法，一个方法用于认证，一个方法用于授权</p></li><li><p>入参AuthenticationToken对象的两个方法，可以获取用户名和密码，但需要进行<strong>类型转换</strong></p><blockquote><p>getPrincipal（）底层返回的是String</p><p>getCredentials（）底层返回的是char[]</p></blockquote></li><li><p>最后将SimpleAuthenticationInfo返回即可</p></li></ul><h4 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br><br><span class="hljs-meta">@GetMapping(&quot;/login&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ResponseBo <span class="hljs-title">login</span><span class="hljs-params">(String username, String password)</span> </span>&#123;<br>password = MD5Utils.encrypt(username, password);<br>UsernamePasswordToken token = <span class="hljs-keyword">new</span> UsernamePasswordToken(username, password);<br>Subject subject = SecurityUtils.getSubject();<br><span class="hljs-keyword">try</span> &#123;<br>subject.login(token);<br><span class="hljs-keyword">return</span> ResponseBo.ok();<br>&#125; <span class="hljs-keyword">catch</span> (UnknownAccountException e) &#123;<br><span class="hljs-keyword">return</span> ResponseBo.error(e.getMessage());<br>&#125; <span class="hljs-keyword">catch</span> (IncorrectCredentialsException e) &#123;<br><span class="hljs-keyword">return</span> ResponseBo.error(e.getMessage());<br>&#125; <span class="hljs-keyword">catch</span> (LockedAccountException e) &#123;<br><span class="hljs-keyword">return</span> ResponseBo.error(e.getMessage());<br>&#125; <span class="hljs-keyword">catch</span> (AuthenticationException e) &#123;<br><span class="hljs-keyword">return</span> ResponseBo.error(<span class="hljs-string">&quot;认证失败！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">redirectIndex</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;redirect:/index&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/index&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>User user = (User) SecurityUtils.getSubject().getPrincipal();<br>model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>UsernamePasswordToken:根据username和password生成token，根据token进行登录。</p><h3 id="记住我"><a href="#记住我" class="headerlink" title="记住我"></a>记住我</h3><h4 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h4><p>在SecurityManage中上设置CookieRememberMeManager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span></span>&#123;  <br>       DefaultWebSecurityManager securityManager =  <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>       securityManager.setRealm(shiroRealm());<br>       securityManager.setRememberMeManager(rememberMeManager());<br>       <span class="hljs-keyword">return</span> securityManager;  <br>    &#125;  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> SimpleCookie <span class="hljs-title">rememberMeCookie</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">// 设置cookie名称，对应login.html页面的&lt;input type=&quot;checkbox&quot; name=&quot;rememberMe&quot;/&gt;</span><br>SimpleCookie cookie = <span class="hljs-keyword">new</span> SimpleCookie(<span class="hljs-string">&quot;rememberMe&quot;</span>);<br><span class="hljs-comment">// 设置cookie的过期时间，单位为秒，15天</span><br>cookie.setMaxAge(<span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">14</span>*<span class="hljs-number">15</span>);<br><span class="hljs-keyword">return</span> cookie;<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * cookie管理对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> CookieRememberMeManager <span class="hljs-title">rememberMeManager</span><span class="hljs-params">()</span> </span>&#123;<br>CookieRememberMeManager cookieRememberMeManager = <span class="hljs-keyword">new</span> CookieRememberMeManager();<br>cookieRememberMeManager.setCookie(rememberMeCookie());<br><span class="hljs-comment">// rememberMe cookie加密的密钥 </span><br>cookieRememberMeManager.setCipherKey(Base64.decode(<span class="hljs-string">&quot;3AvVhmFLUs0KTA3Kprsdag==&quot;</span>));<br><span class="hljs-keyword">return</span> cookieRememberMeManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ShiroFilterFactoryBean设置</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">filterChainDefinitionMap.<span class="hljs-keyword">put</span>(<span class="hljs-string">&quot;/**&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>);<br></code></pre></td></tr></table></figure><p>“user” 就是指定使用的拦截器，该拦截器就可以实现remeberme</p><h4 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">UsernamePasswordToken token = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UsernamePasswordToken(<span class="hljs-params">username</span>, <span class="hljs-params">password</span>, <span class="hljs-params">rememberMe</span>)</span>;<br></code></pre></td></tr></table></figure><p>token中需要包含rememberMe</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><h4 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h4><p>使用RBAC（Role-Based Access Control，基于角色的访问控制）模型设计用户，角色和权限间的关系</p><p><img src="/2021/12/26/Shiro/image-20211226212131239.png" alt="image-20211226212131239"></p><h4 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h4><p>创建permission和role实体类和对应的mapper，完成初始化</p><h4 id="ShiroRealm"><a href="#ShiroRealm" class="headerlink" title="ShiroRealm"></a>ShiroRealm</h4><ul><li><p>重写doGetAuthorizationInfo方法：通过shiro提供的SecurityUtils获取到当前的user(需要类型转化)</p></li><li><p>通过user，从数据库中查找到对应的角色集和权限集，并且以set的形式传入到SimpleAuthorizationInfo</p></li><li><p>返回SimpleAuthorizationInfo</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> AuthorizationInfo <span class="hljs-title">doGetAuthorizationInfo</span><span class="hljs-params">(PrincipalCollection principal)</span> </span>&#123;<br>User user = (User) SecurityUtils.getSubject().getPrincipal();<br>String userName = user.getUserName();<br><br>System.out.println(<span class="hljs-string">&quot;用户&quot;</span> + userName + <span class="hljs-string">&quot;获取权限-----ShiroRealm.doGetAuthorizationInfo&quot;</span>);<br>SimpleAuthorizationInfo simpleAuthorizationInfo = <span class="hljs-keyword">new</span> SimpleAuthorizationInfo();<br><br><span class="hljs-comment">// 获取用户角色集</span><br>List&lt;Role&gt; roleList = userRoleMapper.findByUserName(userName);<br>Set&lt;String&gt; roleSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br><span class="hljs-keyword">for</span> (Role r : roleList) &#123;<br>roleSet.add(r.getName());<br>&#125;<br>simpleAuthorizationInfo.setRoles(roleSet);     <span class="hljs-comment">//admin</span><br><br><span class="hljs-comment">// 获取用户权限集</span><br>List&lt;Permission&gt; permissionList = userPermissionMapper.findByUserName(userName);<br>Set&lt;String&gt; permissionSet = <span class="hljs-keyword">new</span> HashSet&lt;String&gt;();<br><span class="hljs-keyword">for</span> (Permission p : permissionList) &#123;<br>permissionSet.add(p.getName());<br>&#125;<br>simpleAuthorizationInfo.setStringPermissions(permissionSet);     <span class="hljs-comment">//add delete user</span><br><span class="hljs-keyword">return</span> simpleAuthorizationInfo;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置类-2"><a href="#配置类-2" class="headerlink" title="配置类"></a>配置类</h4><p>​    shiro提供一些列注解，可以快速设置哪些接口需要权限。但是需要通过配置进行设置，放入容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="hljs-title">authorizationAttributeSourceAdvisor</span><span class="hljs-params">(SecurityManager securityManager)</span> </span>&#123;<br>    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor = <span class="hljs-keyword">new</span> AuthorizationAttributeSourceAdvisor();<br>    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);<br>    <span class="hljs-keyword">return</span> authorizationAttributeSourceAdvisor;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// 表示当前Subject已经通过login进行了身份验证；即Subject.isAuthenticated()返回true。</span><br><span class="hljs-variable">@RequiresAuthentication</span>  <br> <br><span class="hljs-comment">// 表示当前Subject已经身份验证或者通过记住我登录的。</span><br><span class="hljs-variable">@RequiresUser</span>  <br><br><span class="hljs-comment">// 表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</span><br><span class="hljs-variable">@RequiresGuest</span>  <br><br><span class="hljs-comment">// 表示当前Subject需要角色admin和user。  </span><br><span class="hljs-variable">@RequiresRoles</span>(value=&#123;<span class="hljs-string">&quot;admin&quot;</span>, <span class="hljs-string">&quot;user&quot;</span>&#125;, logical= Logical.<span class="hljs-keyword">AND</span>)  <br><br><span class="hljs-comment">// 表示当前Subject需要权限user:a或user:b。</span><br><span class="hljs-variable">@RequiresPermissions</span> (value=&#123;<span class="hljs-string">&quot;user:a&quot;</span>, <span class="hljs-string">&quot;user:b&quot;</span>&#125;, logical= Logical.<span class="hljs-keyword">OR</span>)<br></code></pre></td></tr></table></figure><h4 id="controller层-1"><a href="#controller层-1" class="headerlink" title="controller层"></a>controller层</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(&quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserController</span> </span>&#123;<br><br>    <span class="hljs-meta">@RequiresPermissions(&quot;user:user&quot;)</span>   <span class="hljs-comment">//需要的权限</span><br>    <span class="hljs-meta">@RequestMapping(&quot;list&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userList</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;获取用户信息&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequiresPermissions(&quot;user:add&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;add&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userAdd</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;新增用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequiresPermissions(&quot;user:delete&quot;)</span><br>    <span class="hljs-meta">@RequestMapping(&quot;delete&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">userDelete</span><span class="hljs-params">(Model model)</span> </span>&#123;<br>        model.addAttribute(<span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-string">&quot;删除用户&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;user&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="权限信息放入缓存"><a href="#权限信息放入缓存" class="headerlink" title="权限信息放入缓存"></a>权限信息放入缓存</h3><p>设计开发时，应该尽可能的少访问数据库，尤其是需要反复查询而且不会经常修改的数据。</p><p>把权限信息放入redis,可以提高速度。</p><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><p>在配置内中简单配置一下就行了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> RedisManager <span class="hljs-title">redisManager</span><span class="hljs-params">()</span> </span>&#123;<br>    RedisManager redisManager = <span class="hljs-keyword">new</span> RedisManager();<br>    <span class="hljs-keyword">return</span> redisManager;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> RedisCacheManager <span class="hljs-title">cacheManager</span><span class="hljs-params">()</span> </span>&#123;<br>    RedisCacheManager redisCacheManager = <span class="hljs-keyword">new</span> RedisCacheManager();<br>    redisCacheManager.setRedisManager(redisManager());<br>    <span class="hljs-keyword">return</span> redisCacheManager;<br>&#125;<br><span class="hljs-meta">@Bean</span>  <br><span class="hljs-function"><span class="hljs-keyword">public</span> SecurityManager <span class="hljs-title">securityManager</span><span class="hljs-params">()</span></span>&#123;  <br>    DefaultWebSecurityManager securityManager =  <span class="hljs-keyword">new</span> DefaultWebSecurityManager();<br>    ...<br>    securityManager.setCacheManager(cacheManager());<br>    <span class="hljs-keyword">return</span> securityManager;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在线会话管理"><a href="#在线会话管理" class="headerlink" title="在线会话管理"></a>在线会话管理</h3><p>可以查看哪些用户上线，也可以让其下线</p><h4 id="配置类-3"><a href="#配置类-3" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> RedisSessionDAO <span class="hljs-function"><span class="hljs-title">sessionDAO</span>(<span class="hljs-params"></span>)</span> &#123;<br>    RedisSessionDAO redisSessionDAO = <span class="hljs-keyword">new</span> RedisSessionDAO();<br>    redisSessionDAO.setRedisManager(redisManager());<br>    <span class="hljs-keyword">return</span> redisSessionDAO;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> SessionManager <span class="hljs-title">sessionManager</span><span class="hljs-params">()</span> </span>&#123;<br>    DefaultWebSessionManager sessionManager = <span class="hljs-keyword">new</span> DefaultWebSessionManager();<br>    Collection&lt;SessionListener&gt; listeners = <span class="hljs-keyword">new</span> ArrayList&lt;SessionListener&gt;();<br>    listeners.add(<span class="hljs-keyword">new</span> ShiroSessionListener());<br>    sessionManager.setSessionListeners(listeners);<br>    sessionManager.setSessionDAO(sessionDAO());<br>    <span class="hljs-keyword">return</span> sessionManager;<br>&#125;<br></code></pre></td></tr></table></figure><p>SessionManager中的ShiroSessionListener需要自己写</p><h4 id="ShiroSessionListener"><a href="#ShiroSessionListener" class="headerlink" title="ShiroSessionListener"></a>ShiroSessionListener</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShiroSessionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">SessionListener</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicInteger sessionCount = <span class="hljs-keyword">new</span> AtomicInteger(<span class="hljs-number">0</span>);<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStart</span><span class="hljs-params">(Session session)</span> </span>&#123;<br>sessionCount.incrementAndGet();<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onStop</span><span class="hljs-params">(Session session)</span> </span>&#123;<br>sessionCount.decrementAndGet();<br><br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">onExpiration</span><span class="hljs-params">(Session session)</span> </span>&#123;<br>sessionCount.decrementAndGet();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>实现的SessionListener是shiro旗下的</p><p>定义了原子Integer类，是为了防止多线程下，数据不一致的情况</p><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">SessionService</span> </span>&#123;<br><br><span class="hljs-function">List&lt;UserOnline&gt; <span class="hljs-title">list</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">forceLogout</span><span class="hljs-params">(String sessionId)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">Service(<span class="hljs-string">&quot;sessionService&quot;</span>)</span><br>public <span class="hljs-keyword">class</span> SessionServiceImpl implements SessionService &#123;<br><br>@Autowired<br><span class="hljs-keyword">private</span> SessionDAO sessionDAO;<br><br>@Override<br>public List&lt;UserOnline&gt; <span class="hljs-built_in">list</span><span class="hljs-literal">()</span> &#123;<br>List&lt;UserOnline&gt; <span class="hljs-built_in">list</span> = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>Collection&lt;Session&gt; sessions = sessionDAO.get<span class="hljs-constructor">ActiveSessions()</span>;<br><span class="hljs-keyword">for</span> (Session session : sessions) &#123;<br>UserOnline userOnline = <span class="hljs-keyword">new</span> <span class="hljs-constructor">UserOnline()</span>;<br>User user = <span class="hljs-keyword">new</span> <span class="hljs-constructor">User()</span>;<br>SimplePrincipalCollection principalCollection = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SimplePrincipalCollection()</span>;<br><span class="hljs-keyword">if</span> (session.get<span class="hljs-constructor">Attribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY)</span><span class="hljs-operator"> == </span>null) &#123;<br>continue;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>principalCollection = (SimplePrincipalCollection) session<br>.get<span class="hljs-constructor">Attribute(DefaultSubjectContext.PRINCIPALS_SESSION_KEY)</span>;<br>user = (User) principalCollection.get<span class="hljs-constructor">PrimaryPrincipal()</span>;<br>userOnline.set<span class="hljs-constructor">Username(<span class="hljs-params">user</span>.<span class="hljs-params">getUserName</span>()</span>);<br>userOnline.set<span class="hljs-constructor">UserId(<span class="hljs-params">user</span>.<span class="hljs-params">getId</span>()</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>);<br>&#125;<br>userOnline.set<span class="hljs-constructor">Id((String)</span> session.get<span class="hljs-constructor">Id()</span>);<br>userOnline.set<span class="hljs-constructor">Host(<span class="hljs-params">session</span>.<span class="hljs-params">getHost</span>()</span>);<br>userOnline.set<span class="hljs-constructor">StartTimestamp(<span class="hljs-params">session</span>.<span class="hljs-params">getStartTimestamp</span>()</span>);<br>userOnline.set<span class="hljs-constructor">LastAccessTime(<span class="hljs-params">session</span>.<span class="hljs-params">getLastAccessTime</span>()</span>);<br>Long timeout = session.get<span class="hljs-constructor">Timeout()</span>;<br><span class="hljs-keyword">if</span> (timeout<span class="hljs-operator"> == </span><span class="hljs-number">0l</span>) &#123;<br>userOnline.set<span class="hljs-constructor">Status(<span class="hljs-string">&quot;离线&quot;</span>)</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>userOnline.set<span class="hljs-constructor">Status(<span class="hljs-string">&quot;在线&quot;</span>)</span>;<br>&#125;<br>userOnline.set<span class="hljs-constructor">Timeout(<span class="hljs-params">timeout</span>)</span>;<br><span class="hljs-built_in">list</span>.add(userOnline);<br>&#125;<br>return <span class="hljs-built_in">list</span>;<br>&#125;<br><br>@Override<br>public boolean force<span class="hljs-constructor">Logout(String <span class="hljs-params">sessionId</span>)</span> &#123;<br>Session session = sessionDAO.read<span class="hljs-constructor">Session(<span class="hljs-params">sessionId</span>)</span>;<br>session.set<span class="hljs-constructor">Timeout(0)</span>;<br>return <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这个接口可以获取到UsrOnline(自己定义的)包括了ip、状态等等 ，</p><p>具体细节不需要知道</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserOnline</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Serializable</span></span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> final long serialVersionUID = <span class="hljs-number">3828664348416633856</span>L;<br><br><span class="hljs-comment">// session id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> id;<br>    <span class="hljs-comment">// 用户id</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> userId;<br>    <span class="hljs-comment">// 用户名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> username;<br><span class="hljs-comment">// 用户主机地址</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> host;<br>    <span class="hljs-comment">// 用户登录时系统IP</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> systemHost;<br>    <span class="hljs-comment">// 状态</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> status;<br>    <span class="hljs-comment">// session创建时间</span><br>    <span class="hljs-keyword">private</span> Date startTimestamp;<br>    <span class="hljs-comment">// session最后访问时间</span><br>    <span class="hljs-keyword">private</span> Date lastAccessTime;<br>    <span class="hljs-comment">// 超时时间</span><br>    <span class="hljs-keyword">private</span> Long timeout;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>常用框架</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Febs管理系统项目总结</title>
    <link href="/2021/12/25/Febs%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2021/12/25/Febs%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h3 id="配置文件知识点"><a href="#配置文件知识点" class="headerlink" title="配置文件知识点"></a>配置文件知识点</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">uri-encoding:</span> <span class="hljs-string">utf-8</span><br>    <span class="hljs-attr">basedir:</span> <span class="hljs-string">&quot;log/tomcat&quot;</span><br>    <span class="hljs-attr">accesslog:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">directory:</span> <span class="hljs-string">&quot;logs&quot;</span><br>      <span class="hljs-attr">encoding:</span> <span class="hljs-string">utf-8</span><br>      <span class="hljs-attr">file-date-format:</span> <span class="hljs-string">_yyyy-MM-dd</span><br>      <span class="hljs-attr">locale:</span> <span class="hljs-string">zh_CN</span><br>      <span class="hljs-attr">max-days:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">prefix:</span> <span class="hljs-string">&quot;tomcat_access_log&quot;</span><br>      <span class="hljs-attr">suffix:</span> <span class="hljs-string">&quot;.log&quot;</span><br>      <span class="hljs-attr">pattern:</span> <span class="hljs-string">&quot;[$&#123;spring.application.name&#125;] ===&gt; 请求时间-%t 客户端IP-%a 客户端Host-%h</span><br><span class="hljs-string">      客户端协议-%H 线程名称-%I SessionId-%S 请求URL-%U 请求方法-%m 请求状态码-%s 耗时(ms)-%D 连接状态-%X&quot;</span><br>  <span class="hljs-attr">shutdown:</span> <span class="hljs-string">graceful</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">thymeleaf:</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">jackson:</span><br>    <span class="hljs-attr">date-format:</span> <span class="hljs-string">yyyy-MM-dd</span> <span class="hljs-string">HH:mm:ss</span><br>    <span class="hljs-attr">time-zone:</span> <span class="hljs-string">GMT+8</span><br>  <span class="hljs-attr">aop:</span><br>    <span class="hljs-attr">proxy-target-class:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#使用jdk动态代理  false为使用cglib进行代理</span><br>  <span class="hljs-attr">config:</span><br>    <span class="hljs-attr">import:</span> <span class="hljs-string">classpath:febs.yml</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;@artifactId@&quot;</span><span class="hljs-comment">#应用名称和artifactId相同</span><br>    <span class="hljs-attr">package-time:</span> <span class="hljs-string">&quot;@package-time@&quot;</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">resources:</span><br>      <span class="hljs-attr">chain:</span><br>        <span class="hljs-attr">strategy:</span><br>          <span class="hljs-attr">content:</span><br>            <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>            <span class="hljs-attr">paths:</span> <span class="hljs-string">&quot;/**&quot;</span><br><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">type-aliases-package:</span> <span class="hljs-string">cc.mrbird.febs.*.entity</span><br>  <span class="hljs-attr">mapper-locations:</span> <span class="hljs-string">classpath:mapper/*/*.xml</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">jdbc-type-for-null:</span> <span class="hljs-literal">null</span><br>  <span class="hljs-attr">global-config:</span><br>    <span class="hljs-attr">banner:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">db-config:</span><br>      <span class="hljs-attr">select-strategy:</span> <span class="hljs-string">not_empty</span> <span class="hljs-comment">#入参为null或者&quot;&quot;时，则MP不会把其当做条件去执</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com:</span><br>      <span class="hljs-attr">baomidou:</span><br>        <span class="hljs-attr">mybatisplus:</span><br>          <span class="hljs-attr">core:</span><br>            <span class="hljs-attr">metadata:</span><br>              <span class="hljs-attr">TableInfoHelper:</span> <span class="hljs-string">error</span><br></code></pre></td></tr></table></figure><ul><li><h4 id="accesslog是统计各个接口被调用的信息"><a href="#accesslog是统计各个接口被调用的信息" class="headerlink" title="accesslog是统计各个接口被调用的信息"></a>accesslog是统计各个接口被调用的信息</h4><ul><li><p>pattern格式中个参数信息如下</p><blockquote><p>​    %a    远端IP<br>​    %A 本地IP<br>​    %b    发送的字节数，不包含HTTP头，如果为0，使用”-”<br>​    %B    发送的字节数，不包含HTTP头<br>​    %h    远端主机名（如果resolveHosts=false），远端的IP<br>​    %H    请求协议<br>​    %l    从identd返回的远端逻辑用户名，总是返回’-’<br>​    %m    请求的方法<br>​    %p    收到请求的本地端口号<br>​    %q    查询字符串<br>​    %r    请求的第一行<br>​    %s　响应的状态码<br>​    %S    用户的sessionID<br>​    %t    日志和时间，使用通常的log格式<br>​    %u    认证以后的远端用户（如果存在的话，否则为’-’）<br>​    %U    请求的ＵＲＩ路径<br>​    %v    本地服务器的名称<br>​    %D　处理请求的时间，以毫秒为单位<br>​    %T    处理请求的时间，以秒为单位</p></blockquote></li></ul></li><li><h4 id="server-shutdown"><a href="#server-shutdown" class="headerlink" title="server.shutdown"></a>server.shutdown</h4><p>在最新版的<strong>Spring Boot 2.3</strong>中终于集成了优雅退出（Graceful shutdown），在官方文档中可以看到内置的 web 服务器（Jetty、Reactor Netty、Tomcat 和 Undertow）以及反应式和基于 Servlet 的 web 应用程序都支持优雅退出功能。当server.shutdown=graceful启用时，在 web 容器关闭时，web 服务器将不再接收新请求，并将等待活动请求完成的缓冲期。</p></li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#相关配置</span><br><span class="hljs-attr">server.shutdown</span>=graceful<br><span class="hljs-attr">spring.lifecycle.timeout-per-shutdown-phase</span>=<span class="hljs-number">20</span>s<br></code></pre></td></tr></table></figure><h3 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h3><h3 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h3><h3 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h3><h4 id="Autowired-required-false"><a href="#Autowired-required-false" class="headerlink" title="@Autowired(required = false)"></a>@Autowired(required = false)</h4><p>使用这个注解，如果注入的对象不存在，也不会报错</p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python基础知识笔记</title>
    <link href="/2021/12/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h4><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta"># xxxx</span><br></code></pre></td></tr></table></figure><p>多行</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">&#x27;&#x27;&#x27;<br>XXXX<br>XXX<br>XXX<br>&#x27;&#x27;&#x27;<br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><img src="/2021/12/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211208090624967.png" alt="image-20211208090624967"></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><h4 id="基本输出"><a href="#基本输出" class="headerlink" title="基本输出"></a>基本输出</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&#x27;sss&#x27;</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">age = <span class="hljs-number">10</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;我今年%d岁&quot;</span> % age)</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">格式符号</th><th align="center">转换</th></tr></thead><tbody><tr><td align="center">%c</td><td align="center">字符</td></tr><tr><td align="center">%s</td><td align="center">字符串</td></tr><tr><td align="center">%d</td><td align="center">有符号十进制整数</td></tr><tr><td align="center">%u</td><td align="center">无符号十进制整数</td></tr><tr><td align="center">%o</td><td align="center">八进制整数</td></tr><tr><td align="center">%x</td><td align="center">十六进制整数（小写字母0x）</td></tr><tr><td align="center">%X</td><td align="center">十六进制整数（大写字母0X）</td></tr><tr><td align="center">%f</td><td align="center">浮点数</td></tr><tr><td align="center">%e</td><td align="center">科学计数法（小写’e’）</td></tr><tr><td align="center">%E</td><td align="center">科学计数法（大写“E”）</td></tr><tr><td align="center">%g</td><td align="center">％f和％e 的简写</td></tr><tr><td align="center">%G</td><td align="center">％f和％E的简写</td></tr></tbody></table><h4 id="换行输出"><a href="#换行输出" class="headerlink" title="换行输出"></a>换行输出</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ssssss\nskdskd&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">password</span> = input(<span class="hljs-string">&#x27;输入密码&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">+</td><td align="center">加</td><td>两个对象相加 a + b 输出结果 30</td></tr><tr><td align="left">-</td><td align="center">减</td><td>得到负数或是一个数减去另一个数 a - b 输出结果 -10</td></tr><tr><td align="left">*</td><td align="center">乘</td><td>两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td align="left">/</td><td align="center">除</td><td>b / a 输出结果 2</td></tr><tr><td align="left">//</td><td align="center">取整除</td><td>返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr><tr><td align="left">%</td><td align="center">取余</td><td>返回除法的余数 b % a 输出结果 0</td></tr><tr><td align="left">**</td><td align="center">指数</td><td>a**b 为10的20次方， 输出结果 100000000000000000000</td></tr></tbody></table><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">=</td><td align="center">赋值运算符</td><td>把 = 号右边的结果 赋给 左边的变量，如 num = 1 + 2 * 3，结果num的值为7</td></tr></tbody></table><table><thead><tr><th align="left">运算符</th><th align="center">描述</th><th>实例</th></tr></thead><tbody><tr><td align="left">+=</td><td align="center">加法赋值运算符</td><td>c += a 等效于 c = c + a</td></tr><tr><td align="left">-=</td><td align="center">减法赋值运算符</td><td>c -= a 等效于 c = c - a</td></tr><tr><td align="left">*=</td><td align="center">乘法赋值运算符</td><td>c *= a 等效于 c = c * a</td></tr><tr><td align="left">/=</td><td align="center">除法赋值运算符</td><td>c /= a 等效于 c = c / a</td></tr><tr><td align="left">%=</td><td align="center">取模赋值运算符</td><td>c %= a 等效于 c = c % a</td></tr><tr><td align="left">**=</td><td align="center">幂赋值运算符</td><td>c **= a 等效于 c = c ** a</td></tr><tr><td align="left">//=</td><td align="center">取整除赋值运算符</td><td>c //= a 等效于 c = c // a</td></tr></tbody></table><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">示例</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">检查两个操作数的值是否相等，如果是则条件变为真。</td><td align="left">如a=3,b=3，则（a == b) 为 True</td></tr><tr><td align="left">!=</td><td align="left">检查两个操作数的值是否相等，如果值不相等，则条件变为真。</td><td align="left">如a=1,b=3，则(a != b) 为 True</td></tr><tr><td align="left">&gt;</td><td align="left">检查左操作数的值是否大于右操作数的值，如果是，则条件成立。</td><td align="left">如a=7,b=3，则(a &gt; b) 为 True</td></tr><tr><td align="left">&lt;</td><td align="left">检查左操作数的值是否小于右操作数的值，如果是，则条件成立。</td><td align="left">如a=7,b=3，则(a &lt; b) 为 False</td></tr><tr><td align="left">&gt;=</td><td align="left">检查左操作数的值是否大于或等于右操作数的值，如果是，则条件成立。</td><td align="left">如a=3,b=3，则(a &gt;= b) 为 True</td></tr><tr><td align="left">&lt;=</td><td align="left">检查左操作数的值是否小于或等于右操作数的值，如果是，则条件成立。</td><td align="left">如a=3,b=3，则(a &lt;= b) 为 True</td></tr></tbody></table><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">int(x [,base ])</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x )</td><td align="center">将x转换为一个浮点数</td></tr><tr><td align="center">complex(real [,imag ])</td><td align="center">创建一个复数，real为实部，imag为虚部</td></tr><tr><td align="center">str(x )</td><td align="center">将对象 x 转换为字符串</td></tr><tr><td align="center">repr(x )</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">eval(str )</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">tuple(s )</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">list(s )</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">chr(x )</td><td align="center">将一个整数转换为一个Unicode字符</td></tr><tr><td align="center">ord(x )</td><td align="center">将一个字符转换为它的ASCII整数值</td></tr><tr><td align="center">hex(x )</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x )</td><td align="center">将一个整数转换为一个八进制字符串</td></tr><tr><td align="center">bin(x )</td><td align="center">将一个整数转换为一个二进制字符串</td></tr></tbody></table><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> 要判断的条件:<br>       条件成立时，要做的事情<br></code></pre></td></tr></table></figure><h4 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">if</span> 条件:<br>        满足条件时要做的事情<span class="hljs-number">1</span><br>        满足条件时要做的事情<span class="hljs-number">2</span><br>        满足条件时要做的事情<span class="hljs-number">3</span><br>        <span class="hljs-params">...</span>(省略)<span class="hljs-params">...</span><br>    <span class="hljs-keyword">else</span>:<br>        不满足条件时要做的事情<span class="hljs-number">1</span><br>        不满足条件时要做的事情<span class="hljs-number">2</span><br>        不满足条件时要做的事情<span class="hljs-number">3</span><br>        <span class="hljs-params">...</span>(省略)<span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h4 id="if…elif…else…"><a href="#if…elif…else…" class="headerlink" title="if…elif…else…"></a>if…elif…else…</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">if xxx1:</span><br>      <span class="hljs-string">事情1</span><br>  <span class="hljs-attr">elif xxx2:</span><br>      <span class="hljs-string">事情2</span><br>  <span class="hljs-attr">elif xxx3:</span><br>      <span class="hljs-string">事情3</span><br></code></pre></td></tr></table></figure><h4 id="if嵌套"><a href="#if嵌套" class="headerlink" title="if嵌套"></a>if嵌套</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">if 条件1:<br><br><span class="hljs-code">       满足条件1 做的事情1</span><br><span class="hljs-code">       满足条件1 做的事情2</span><br><span class="hljs-code"></span><br><span class="hljs-code">       if 条件2:</span><br><span class="hljs-code">           满足条件2 做的事情1</span><br><span class="hljs-code">           满足条件2 做的事情2</span><br></code></pre></td></tr></table></figure><h4 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span> 条件:<br>       条件满足时，做的事情<span class="hljs-number">1</span><br>       条件满足时，做的事情<span class="hljs-number">2</span><br>       条件满足时，做的事情<span class="hljs-number">3</span><br>       <span class="hljs-params">...</span>(省略)<span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h4 id="while嵌套"><a href="#while嵌套" class="headerlink" title="while嵌套"></a>while嵌套</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">while</span> 条件<span class="hljs-number">1</span>:<br><br>    条件<span class="hljs-number">1</span>满足时，做的事情<span class="hljs-number">1</span><br>    条件<span class="hljs-number">1</span>满足时，做的事情<span class="hljs-number">2</span><br>    条件<span class="hljs-number">1</span>满足时，做的事情<span class="hljs-number">3</span><br>    <span class="hljs-params">...</span>(省略)<span class="hljs-params">...</span><br><br>    <span class="hljs-keyword">while</span> 条件<span class="hljs-number">2</span>:<br>        条件<span class="hljs-number">2</span>满足时，做的事情<span class="hljs-number">1</span><br>        条件<span class="hljs-number">2</span>满足时，做的事情<span class="hljs-number">2</span><br>        条件<span class="hljs-number">2</span>满足时，做的事情<span class="hljs-number">3</span><br>        <span class="hljs-params">...</span>(省略)<span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><h4 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h4><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">for</span> 临时变量 <span class="hljs-variable"><span class="hljs-keyword">in</span></span> 列表或者字符串等可迭代对象:<br>    循环满足条件时执行的代码<br>    <br><span class="hljs-variable">name</span> = <span class="hljs-string">&#x27;itheima&#x27;</span><br><span class="hljs-variable">for</span> <span class="hljs-variable">x</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-variable">name</span>:<br>    <span class="hljs-function"><span class="hljs-title">print</span>(<span class="hljs-variable">x</span>)</span><br>    <br><span class="hljs-variable">for</span> <span class="hljs-variable">i</span> <span class="hljs-variable"><span class="hljs-keyword">in</span></span> <span class="hljs-function"><span class="hljs-title">range</span>(<span class="hljs-number">5</span>):</span><br><span class="hljs-function">    <span class="hljs-title">print</span>(<span class="hljs-variable">i</span>)</span><br></code></pre></td></tr></table></figure><h4 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h4><ul><li><p>break的作用：立刻结束break所在的循环</p></li><li><p>continue的作用：用来结束本次循环，紧接着执行下一次的循环</p></li></ul><h2 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串输出和输入"><a href="#字符串输出和输入" class="headerlink" title="字符串输出和输入"></a>字符串输出和输入</h4><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">name = <span class="hljs-string">&#x27;峰哥&#x27;</span><br>   position = <span class="hljs-string">&#x27;讲师&#x27;</span><br>  <span class="hljs-built_in"> address </span>= <span class="hljs-string">&#x27;北京市&#x27;</span><br><br>   <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;--------------------------------------------------&#x27;</span>)<br>   <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;姓名：%s&quot;</span> % name)<br>   <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;职位：%s&quot;</span> % position)<br>   <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;公司地址：%s&quot;</span> % address)<br>   <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;--------------------------------------------------&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;峰哥&#x27;</span><br>age = <span class="hljs-number">33</span><br>format_string1 = <span class="hljs-string">f&#x27;我的名字是 <span class="hljs-subst">&#123;name&#125;</span>, 我的年龄是 <span class="hljs-subst">&#123;age&#125;</span>&#x27;</span><br><span class="hljs-built_in">print</span>(format_string1)<br></code></pre></td></tr></table></figure><h5 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h5><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs hsp">username = <span class="hljs-keyword">input</span>(<span class="hljs-string">&#x27;请输入用户名:&#x27;</span>)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;用户名为：%s&quot;</span> % username)<br></code></pre></td></tr></table></figure><h4 id="下标与切片"><a href="#下标与切片" class="headerlink" title="下标与切片"></a>下标与切片</h4><h5 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h5><p>![image-20200929094153410](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929094153410.png)</p><h5 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_str[:]  得到和原来一样的字符串<br>my_str[::-<span class="hljs-number">1</span>]  字符串的逆置<br></code></pre></td></tr></table></figure><h4 id="查找方法"><a href="#查找方法" class="headerlink" title="查找方法"></a>查找方法</h4><h5 id="find-amp-rfind"><a href="#find-amp-rfind" class="headerlink" title="find() &amp; rfind()"></a>find() &amp; rfind()</h5><p>![image-20200929104051168](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929104051168.png)</p><h5 id="index-amp-rindex"><a href="#index-amp-rindex" class="headerlink" title="index &amp; rindex()"></a>index &amp; rindex()</h5><p>![image-20200929104809098](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929104809098.png)</p><h5 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h5><p>![image-20200929105103951](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929105103951.png)</p><h4 id="字符串替换方法-replace"><a href="#字符串替换方法-replace" class="headerlink" title="字符串替换方法 replace"></a>字符串替换方法 replace</h4><p>![image-20200929110650386](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929110650386.png)</p><h4 id="字符串分隔-split"><a href="#字符串分隔-split" class="headerlink" title="字符串分隔 split()"></a>字符串分隔 split()</h4><p>![image-20200929111640115](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929111640115.png)</p><h4 id="字符串连接-join"><a href="#字符串连接-join" class="headerlink" title="字符串连接 join()"></a>字符串连接 join()</h4><p>![image-20200929112426212](E:/Python学习/资料-python零基础入门/day03 容器/01-笔记/day03.assets/image-20200929112426212.png)</p><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = <span class="hljs-built_in">dict</span>()<br>my_dict2 = &#123;&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><h5 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dict</span>:<br><span class="hljs-built_in">print</span>(key,<span class="hljs-built_in">dict</span>[key]);<br></code></pre></td></tr></table></figure><h5 id="字典的keys方法"><a href="#字典的keys方法" class="headerlink" title="字典的keys方法"></a>字典的keys方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;isaac&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>keys = my_dict.keys()<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-built_in">print</span>(key)<br></code></pre></td></tr></table></figure><p>通过<code>dict.keys()</code>获得key表，类型为<code>&lt;class &#39;dict_keys&#39;&gt;</code></p><h5 id="字典的values方法"><a href="#字典的values方法" class="headerlink" title="字典的values方法"></a>字典的values方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;isaac&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>values = my_dict.values()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(values))<br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> values:<br>    <span class="hljs-built_in">print</span>(value)<br></code></pre></td></tr></table></figure><h5 id="字典的items方法"><a href="#字典的items方法" class="headerlink" title="字典的items方法"></a>字典的items方法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;isaac&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br>result = my_dict.items()<br><span class="hljs-built_in">print</span>(result, <span class="hljs-built_in">type</span>(result))<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(item))<br>    <span class="hljs-built_in">print</span>(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>item的类型是<code>&lt;class &#39;tuple&#39;&gt;</code></p><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;isaac&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&#x27;gender&#x27;</span>: <span class="hljs-string">&#x27;男&#x27;</span>&#125;<br><span class="hljs-keyword">for</span> k,V <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-built_in">print</span>(k,V)<br></code></pre></td></tr></table></figure><h4 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 补充: 字典推导式 </span><br><span class="hljs-comment"># 变量 = &#123;生成字典的规则 for 临时变量 in xx&#125;</span><br><span class="hljs-comment"># my_dict = &#123;key: value for i in range(3)&#125;</span><br>my_dict = &#123;<span class="hljs-string">f&quot;name<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>: i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;<br><span class="hljs-built_in">print</span>(my_dict)<br><br>my_dict = &#123;<span class="hljs-string">f&quot;name<span class="hljs-subst">&#123;i&#125;</span>&quot;</span>: j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;<br><span class="hljs-built_in">print</span>(my_dict)  <span class="hljs-comment"># 3</span><br>my_dict = &#123;<span class="hljs-string">f&quot;name<span class="hljs-subst">&#123;i&#125;</span><span class="hljs-subst">&#123;j&#125;</span>&quot;</span>: j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)&#125;<br><span class="hljs-built_in">print</span>(my_dict)<br><br></code></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">my_list</span> =  []<br><span class="hljs-attr">my_list1</span> = list()<br><span class="hljs-attr">mu_list2</span> = [<span class="hljs-literal">True</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;hello&#x27;</span>]<br></code></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><h5 id="for"><a href="#for" class="headerlink" title="for"></a>for</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">my_list2 = [<span class="hljs-literal">True</span>,1,<span class="hljs-string">&#x27;hello&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_list2:<br>    <span class="hljs-builtin-name">print</span>(i)<br></code></pre></td></tr></table></figure><h5 id="while"><a href="#while" class="headerlink" title="while"></a>while</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">j</span> = <span class="hljs-number">0</span><br><span class="hljs-attribute">while</span> j&lt;len(my_list<span class="hljs-number">2</span>):<br>    <span class="hljs-attribute">print</span>(my_list<span class="hljs-number">2</span>[j])<br>    <span class="hljs-attribute">j</span>+=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="向列表中添加数据"><a href="#向列表中添加数据" class="headerlink" title="向列表中添加数据"></a>向列表中添加数据</h4><h5 id="在最后面"><a href="#在最后面" class="headerlink" title="在最后面"></a>在最后面</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">append</span> = my_list<span class="hljs-number">2</span>.append(<span class="hljs-number">12</span>)<br></code></pre></td></tr></table></figure><h5 id="在指定的下标位置"><a href="#在指定的下标位置" class="headerlink" title="在指定的下标位置"></a>在指定的下标位置</h5><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">my_list2</span><span class="hljs-selector-class">.insert</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;test&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="列表中的数据查询操作"><a href="#列表中的数据查询操作" class="headerlink" title="列表中的数据查询操作"></a>列表中的数据查询操作</h4><h5 id="查询下标"><a href="#查询下标" class="headerlink" title="查询下标"></a>查询下标</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">my_list</span>.index(<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h5 id="查询是否存在"><a href="#查询是否存在" class="headerlink" title="查询是否存在"></a>查询是否存在</h5><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">isExist</span> = <span class="hljs-number">3</span> in my_list  <span class="hljs-comment">#返回的是布尔值</span><br></code></pre></td></tr></table></figure><h5 id="查询出现的次数"><a href="#查询出现的次数" class="headerlink" title="查询出现的次数"></a>查询出现的次数</h5><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">count</span> = my_list2.<span class="hljs-keyword">count</span>(<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><h5 id="指定删除某个值"><a href="#指定删除某个值" class="headerlink" title="指定删除某个值"></a>指定删除某个值</h5><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">my_list.<span class="hljs-builtin-name">remove</span>(4)<br></code></pre></td></tr></table></figure><h5 id="通过下标删除"><a href="#通过下标删除" class="headerlink" title="通过下标删除"></a>通过下标删除</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">my_list.pop()   <span class="hljs-meta">#删除最后一个</span><br>my_list.pop(<span class="hljs-number">2</span>)  <span class="hljs-meta">#删除第二个</span><br></code></pre></td></tr></table></figure><h4 id="列表排序和逆置"><a href="#列表排序和逆置" class="headerlink" title="列表排序和逆置"></a>列表排序和逆置</h4><h5 id="sort（）方法"><a href="#sort（）方法" class="headerlink" title="sort（）方法"></a>sort（）方法</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">my_list = <span class="hljs-selector-attr">[1,5,6,8,3]</span> <br>my_list<span class="hljs-selector-class">.sort</span>()<br></code></pre></td></tr></table></figure><h5 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h5><p>通过sorted是不会改变原来的list，但会返回一个列表</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">my_list</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>]<br><span class="hljs-attr">l</span> = sorted(my_list, reverse=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># [0, 1, 2, 3, 4]</span><br><br>my_list1 = [<span class="hljs-string">&#x27;hello&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(my_list1)<br><br>my_list2 = [<span class="hljs-string">f&#x27;num:<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> my_list]<br><span class="hljs-built_in">print</span>(my_list2)<br>my_list3 = [i+i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><span class="hljs-built_in">print</span>(my_list3)<br><br><span class="hljs-comment"># 2. 变量 = [生成数据的规则 for 临时变量 in xxx if xxx]</span><br><span class="hljs-comment"># 每循环一次,并且if条件为True,生成一个数据</span><br>my_list = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># [0, 2, 4]</span><br><br><span class="hljs-comment"># 3. 变量 = [生成数据的规则 for 临时变量 in xxx  for j in xxx]</span><br><span class="hljs-comment"># 第二个for 循环 循环一次,生成一个数据</span><br>my_list4 = [(i,j) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><span class="hljs-built_in">print</span>(my_list4)<br></code></pre></td></tr></table></figure><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">my_tuple</span>=()<br></code></pre></td></tr></table></figure><p>和list差不多，只不过元组中的数据不能够修改</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">my_set</span> = &#123;xxx,xxx,xxxx,xx&#125;<br></code></pre></td></tr></table></figure><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">my_<span class="hljs-keyword">set</span>.remove<span class="hljs-params">(xxx)</span><br>my_<span class="hljs-keyword">set</span>.pop<span class="hljs-params">()</span><br>my_<span class="hljs-keyword">set</span>.add（xxx）<br>my_<span class="hljs-keyword">set</span>.<span class="hljs-keyword">clear</span><span class="hljs-params">()</span><br>my_list=list<span class="hljs-params">(my_set)</span><br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><h3 id="变量-1"><a href="#变量-1" class="headerlink" title="变量"></a>变量</h3><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul><li>在函数外部定义的变量就是全局变量</li><li>要想在函数内部修改全局变量，需要加<code>global</code>关键字</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul><li>可以返回多个值，则是以元组的形式返回</li><li>也可以直接使用<code>return</code>，返回的是<code>None</code>,和不写<code>return</code>效果一样</li></ul><h3 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h3><ul><li>关键字传参和位置传参</li><li>但是不能同时使用，使用不定长参数从除外</li></ul><h3 id="函数形参"><a href="#函数形参" class="headerlink" title="函数形参"></a>函数形参</h3><h4 id="缺省参数"><a href="#缺省参数" class="headerlink" title="缺省参数"></a>缺省参数</h4><p>缺省函数在传参是非必需</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">def <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(a,b,c=<span class="hljs-number">0</span>)</span></span><br></code></pre></td></tr></table></figure><h4 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h4><p><code>*args</code>接受位置参数，类型为元组</p><p><code>**kwargs</code>接受关键字参数，类型为字典</p><p><img src="/2021/12/07/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20211209092906244.png" alt="image-20211209092906244"></p><h3 id="拆包和组包"><a href="#拆包和组包" class="headerlink" title="拆包和组包"></a>拆包和组包</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(a)</span></span><br><br><span class="hljs-selector-tag">b</span>, c, d, e = <span class="hljs-selector-tag">a</span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(b, c, d, sep=<span class="hljs-string">&#x27;_&#x27;</span>)</span></span><br><br>my_list = <span class="hljs-selector-attr">[10, 20]</span><br><span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> = my_list<br></code></pre></td></tr></table></figure><p>注意在拆包字典的时候，拆的是key值</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">my_dict = &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;isaac&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: <span class="hljs-number">18</span>&#125;<br>a, b = my_dict   <span class="hljs-meta"># key值</span><br><span class="hljs-keyword">print</span>(a, b)   <span class="hljs-meta"># name age</span><br></code></pre></td></tr></table></figure><h4 id="应用：交换变量"><a href="#应用：交换变量" class="headerlink" title="应用：交换变量"></a>应用：交换变量</h4><p>不会引入中间变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">a</span>=10<br><span class="hljs-attribute">b</span>=20<br>a,<span class="hljs-attribute">b</span>=b,a<br></code></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>值相同则引用相同</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">a</span>=10<br><span class="hljs-attribute">b</span>=10<br><br><span class="hljs-builtin-name">print</span>(id(a)==id(b)) #<span class="hljs-literal">True</span><br><span class="hljs-attribute">a</span>=<span class="hljs-string">&#x27;s&#x27;</span><br><span class="hljs-attribute">b</span>=<span class="hljs-string">&#x27;s&#x27;</span><br><br><span class="hljs-builtin-name">print</span>(id(a)==id(b)) #<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>如果两个列表的引用相同，则一个列表的改变，另外一个列表也会改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 将列表的引用地址保存到变量my_list 中</span><br>my_list1 = my_list  <span class="hljs-comment"># 将my_list 变量中存储的引用地址给到 my_list1</span><br><span class="hljs-built_in">print</span>(my_list, <span class="hljs-built_in">id</span>(my_list))<br><span class="hljs-built_in">print</span>(my_list1, <span class="hljs-built_in">id</span>(my_list1))<br><br>my_list.append(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 向列表中添加数据4, 将数据4 的引用保存到列表中</span><br><span class="hljs-built_in">print</span>(my_list, <span class="hljs-built_in">id</span>(my_list))<br><span class="hljs-built_in">print</span>(my_list1, <span class="hljs-built_in">id</span>(my_list1))<br></code></pre></td></tr></table></figure><h4 id="可变与不可变类型"><a href="#可变与不可变类型" class="headerlink" title="可变与不可变类型"></a>可变与不可变类型</h4><p>对于不可变类型：只要值相等则id值相同</p><p>对于可变类型：即使值相同，但id值不相同</p><h4 id="引⽤做函数参数"><a href="#引⽤做函数参数" class="headerlink" title="引⽤做函数参数"></a><strong>引⽤做函数参数</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数传参传递的也是引用</span><br>my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 全局变量</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span>(<span class="hljs-params">a</span>):</span><br>    a.append(<span class="hljs-number">4</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func2</span>():</span><br>    <span class="hljs-comment"># 为啥不加global, 因为没有修改 my_list 中存的引用值</span><br>    my_list.append(<span class="hljs-number">5</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span>():</span><br>    <span class="hljs-keyword">global</span> my_list<br>    my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]   <span class="hljs-comment"># 修改全局变量的值</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func4</span>(<span class="hljs-params">a</span>):</span><br>    <span class="hljs-comment"># += 对于列表来说,类似列表的extend方法,不会改变变量的引用地址</span><br>    a += a  <span class="hljs-comment"># a = a + a, 修改了a变量a的引用</span><br>    <span class="hljs-comment"># print(a)</span><br><br><br>func1(my_list)    <span class="hljs-comment"># [1, 2, 3, 4]</span><br><span class="hljs-built_in">print</span>(my_list)<br>func2()  <span class="hljs-comment"># [1,2, 3, 4, 5]</span><br><span class="hljs-built_in">print</span>(my_list)<br>func3()  <span class="hljs-comment"># [1, 2, 3]</span><br><span class="hljs-built_in">print</span>(my_list)<br><br>b = <span class="hljs-number">10</span>  <span class="hljs-comment"># 不可变类型</span><br>func4(b)<br><span class="hljs-built_in">print</span>(b)  <span class="hljs-comment">#</span><br><br>func4(my_list)<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># [1, 2, 3, 1, 2, 3]</span><br><br></code></pre></td></tr></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#无参有返回值</span><br>f2 = <span class="hljs-keyword">lambda</span>: <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(f2())<br><br><span class="hljs-comment">#有参无返回值</span><br>f3 = <span class="hljs-keyword">lambda</span> a : <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-comment">#有参有返回值</span><br>f3 = <span class="hljs-keyword">lambda</span> *a : a+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="使用匿名函数列表排序"><a href="#使用匿名函数列表排序" class="headerlink" title="使用匿名函数列表排序"></a>使用匿名函数列表排序</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sas">list1 = [&#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: 19&#125;,<br>         &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: 16&#125;,<br>         &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: 16&#125;,<br>         &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;age&#x27;</span>: 20&#125;]<br>         <br>list1.sort(<span class="hljs-meta">key</span>=lambda <span class="hljs-meta">x</span>: <span class="hljs-meta">x</span>[<span class="hljs-string">&#x27;name&#x27;</span>])<br>p<span class="hljs-meta">rint(</span>list1)<br>list1.sort(<span class="hljs-meta">key</span>=lambda <span class="hljs-meta">x</span>: <span class="hljs-meta">x</span>[<span class="hljs-string">&#x27;age&#x27;</span>])<br>p<span class="hljs-meta">rint(</span>list1)<br><br>list2 = [<span class="hljs-string">&#x27;aghdd&#x27;</span>, <span class="hljs-string">&#x27;bc&#x27;</span>, <span class="hljs-string">&#x27;ghlj&#x27;</span>, <span class="hljs-string">&#x27;def&#x27;</span>, <span class="hljs-string">&#x27;ab&#x27;</span>]<br>list2.sort(<span class="hljs-meta">key</span>=lambda <span class="hljs-meta">x</span>: l<span class="hljs-meta">en(</span><span class="hljs-meta">x</span>))<br>p<span class="hljs-meta">rint(</span>list2)<br></code></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h4><ul><li><p>私有属性不能够被外部调用</p></li><li><p>可以通过<code>xxx.__dict__</code>查看对象对应的属性，包括公用的属性和私有的属性。</p><ul><li>通过该方式查看的私有属性，会默认加一个类名例如 <code>_类名__私有属性</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>黑马程序员juc笔记</title>
    <link href="/2021/11/29/%E9%BB%91%E9%A9%AC_juc/"/>
    <url>/2021/11/29/%E9%BB%91%E9%A9%AC_juc/</url>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><p><strong>进程</strong></p><ul><li>进程就是用来加载指令、管理内存、管理 IO 的</li><li>进程就可以视为程序的一个实例。（记事本、穿越火线）</li></ul><p><strong>线程</strong></p><ul><li>一个进程之内可以分为一到多个线程。</li><li>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给 CPU 执行</li></ul><p>Java 中，线程作为cpu的最小调度单位，进程作为资源分配的最小单位。</p><p><strong>二者对比</strong></p><ul><li><p>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集</p></li><li><p>进程间通信较为复杂</p><p>​    同一台计算机的进程通信称为 IPC（Inter-process communication）</p><p>​    不同计算机之间的进程通信，需要通过网络，并遵守共同的协议，例如 HTTP</p></li><li><p>线程通信相对简单，因为它们共享进程内的内存，一个例子是多个线程可以访问同一个共享变量</p></li><li><p>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低</p></li></ul><h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a><strong>并行与并发</strong></h3><p>区别：是否同一时间进行</p><p>并发：交替做不同事的能力</p><p>并行：同时做不同事的能力</p><h2 id="Java线程"><a href="#Java线程" class="headerlink" title="Java线程"></a>Java线程</h2><h3 id="创建并允许线程的三种方法"><a href="#创建并允许线程的三种方法" class="headerlink" title="创建并允许线程的三种方法"></a>创建并允许线程的三种方法</h3><h4 id="直接使用-Thread"><a href="#直接使用-Thread" class="headerlink" title="直接使用 Thread"></a><strong>直接使用</strong> <strong>Thread</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 构造方法的参数是给线程指定名字，推荐</span><br>Thread t1 = <span class="hljs-keyword">new</span> Thread(<span class="hljs-string">&quot;t1&quot;</span>) &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-comment">// run 方法内实现了要执行的任务</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br> log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br> &#125;<br>&#125;;<br>t1.start();<br></code></pre></td></tr></table></figure><h4 id="使用-Runnable-配合-Thread"><a href="#使用-Runnable-配合-Thread" class="headerlink" title="使用 Runnable 配合 Thread"></a><strong>使用</strong> <strong>Runnable</strong> <strong>配合</strong> <strong>Thread</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>Runnable task2 = <span class="hljs-keyword">new</span> Runnable() &#123;<br> <span class="hljs-meta">@Override</span><br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br> log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br> &#125;<br>&#125;;<br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br>Thread t2 = <span class="hljs-keyword">new</span> Thread(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br>t2.start();<br></code></pre></td></tr></table></figure><p>Java 8 以后可以使用 lambda 精简代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>Runnable task2 = () -&gt; log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br>Thread t2 = <span class="hljs-keyword">new</span> Thread(task2, <span class="hljs-string">&quot;t2&quot;</span>);<br>t2.start();<br></code></pre></td></tr></table></figure><blockquote><p><strong>Thread</strong> <strong>与</strong> <strong>Runnable</strong> <strong>的关系</strong></p><p>方法1 是把线程和任务合并在了一起，方法2 是把线程和任务分开了</p><p>用 Runnable 更容易与线程池等高级 API 配合</p><p>用 Runnable 让任务类脱离了 Thread 继承体系，更灵活</p></blockquote><h4 id="FutureTask-配合-Thread"><a href="#FutureTask-配合-Thread" class="headerlink" title="FutureTask 配合 Thread"></a><strong>FutureTask</strong> <strong>配合</strong> <strong>Thread</strong></h4><p>FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 创建任务对象</span><br>FutureTask&lt;Integer&gt; task3 = <span class="hljs-keyword">new</span> FutureTask&lt;&gt;(() -&gt; &#123;<br> log.debug(<span class="hljs-string">&quot;hello&quot;</span>);<br> <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>&#125;);<br><span class="hljs-comment">// 参数1 是任务对象; 参数2 是线程名字，推荐</span><br><span class="hljs-keyword">new</span> Thread(task3, <span class="hljs-string">&quot;t3&quot;</span>).start();<br><span class="hljs-comment">// 主线程阻塞，同步等待 task 执行完毕的结果</span><br>Integer result = task3.get();<br>log.debug(<span class="hljs-string">&quot;结果是:&#123;&#125;&quot;</span>, result);<br></code></pre></td></tr></table></figure><h3 id="Linux查看进程和线程的方法"><a href="#Linux查看进程和线程的方法" class="headerlink" title="Linux查看进程和线程的方法"></a>Linux查看进程和线程的方法</h3><ul><li>ps -fe 查看所有线程</li><li>ps -fT -p <pid> 查看进程下面的线程</pid></li><li>kill 杀死进程</li><li>top 动态的查看线程</li><li>top -H -p <pid> 查看进程下面的线程</pid></li></ul><h3 id="线程运行的原理"><a href="#线程运行的原理" class="headerlink" title="线程运行的原理"></a>线程运行的原理</h3><p>线程的创建就是在虚拟机栈中，为它分配栈内存。每个栈由多个栈帧组成，每一个java方法就对应一个栈帧，每个栈帧就存放了局部变量表、操作数栈、动态连接方法出口等信息。</p><p>线程的运行原理：每一个方法被调用直至执行完毕的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。</p><h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3>]]></content>
    
    
    <categories>
      
      <category>笔记</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql基础</title>
    <link href="/2021/11/10/mysql%E5%9F%BA%E7%A1%80/"/>
    <url>/2021/11/10/mysql%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Mysql基础知识"><a href="#Mysql基础知识" class="headerlink" title="Mysql基础知识"></a>Mysql基础知识</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="DQL语句"><a href="#DQL语句" class="headerlink" title="DQL语句"></a>DQL语句</h3><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">from</span> <br>表名<br><br>#对查询出字段进行去重<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">distinct</span> 字段名 <span class="hljs-keyword">from</span> 表名<br><br>#查询一个版本<br><span class="hljs-keyword">SELECT</span> version()<br><br>#将查询出的字段名进行一个连接<br><span class="hljs-keyword">SELECT</span> <br>concat(last_name,first_name) <span class="hljs-keyword">AS</span> 姓名<br><span class="hljs-keyword">FROM</span> <br>employee<br><br>#注意<span class="hljs-operator">*</span><span class="hljs-number">12</span><br><span class="hljs-keyword">SELECT</span> employee_id , last_name,<br>salary <span class="hljs-operator">*</span> <span class="hljs-number">12</span> <span class="hljs-keyword">AS</span> &quot;ANNUAL  SALARY&quot;<br><span class="hljs-keyword">FROM</span> employees;<br><br>#从第<span class="hljs-number">4</span>行开始，查询<span class="hljs-number">5</span>条数据<br><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> products<br>LIMIT <span class="hljs-number">3</span>,<span class="hljs-number">5</span>；<br><br>#从第<span class="hljs-number">4</span>行开始，查询<span class="hljs-number">5</span>条数据<br><span class="hljs-keyword">SELECT</span> prod_name<br><span class="hljs-keyword">FROM</span> products<br>LIMIT <span class="hljs-number">5</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-number">3</span>；<br><br>#使用完全限定的表名<br><span class="hljs-keyword">SELECT</span> products.prod_name<br><span class="hljs-keyword">FROM</span> products；<br><br><br></code></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>常用的条件</p><p><code>&lt;</code></p><p><code>&gt;</code></p><p><code>&lt;&gt;</code> 不等于</p><p><code>AND</code></p><p><code>OR</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL">#案例<span class="hljs-number">2</span>：查询部门编号不是在<span class="hljs-number">90</span>到<span class="hljs-number">110</span>之间，或者工资高于<span class="hljs-number">15000</span>的员工信息<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span><br>employees<br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">NOT</span>(department_id<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span> <span class="hljs-keyword">AND</span>  department_id<span class="hljs-operator">&lt;=</span><span class="hljs-number">110</span>) <span class="hljs-keyword">OR</span> salary<span class="hljs-operator">&gt;</span><span class="hljs-number">15000</span>;<br></code></pre></td></tr></table></figure><p><code>LIKE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#   _ 代表占一个位    <span class="hljs-operator">%</span>代表多个 可以为<span class="hljs-number">0</span>个<br><span class="hljs-keyword">SELECT</span> <br><span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> <br>employees<br><span class="hljs-keyword">WHERE</span><br>last_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;__n_l%&#x27;</span><br></code></pre></td></tr></table></figure><p><code>BETWEEN  AND</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#注意大的在前，小的在后<br><span class="hljs-keyword">SELECT</span><br><span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> <br>employee<br><span class="hljs-keyword">WHERE</span><br>salary <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">120</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p><code>IS NULL</code> <code>IS NOT NULL</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span><br>last_name,<br>commission_pct<br><span class="hljs-keyword">FROM</span><br>employees<br><span class="hljs-keyword">WHERE</span><br>commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><p><code>IN</code>  <code>NOT IN</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Sql"><span class="hljs-keyword">SELECT</span> prod_name,prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">IN</span> (<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name<br><br><span class="hljs-keyword">SELECT</span> prod_name,prod_price<br><span class="hljs-keyword">FROM</span> products<br><span class="hljs-keyword">WHERE</span> vend_id <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>)<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> prod_name<br></code></pre></td></tr></table></figure><p>todo:in和select使用</p><p><code>通配符</code></p><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p><code>ORDER BY</code> <code>ASC</code> <code>DESC</code></p><p><code>ASC</code> 为升序，默认可以在使用<code>ORDER BY</code>的时候不使用</p><p><code>DESC</code>为降序 如果是字母的话则是z-a</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department_id<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> employee_id <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-keyword">SELECT</span> LENGTH(last_name),last_name <br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> LENGTH(last_name) <span class="hljs-keyword">DESC</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> salary <span class="hljs-keyword">DESC</span>,employee_id <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="常见函数"><a href="#常见函数" class="headerlink" title="常见函数"></a>常见函数</h5><p><code>LENGTH</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> LENGTH(<span class="hljs-string">&#x27;张三丰hahaha&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>CONCAT</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>CONCAT(last_name,<span class="hljs-string">&#x27;_&#x27;</span>,first_name) 姓名<br><span class="hljs-keyword">FROM</span><br>employee<br></code></pre></td></tr></table></figure><p><code>UPPER</code> <code>LOWER</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <br>CONCAT(<span class="hljs-built_in">UPPER</span>(last_name),<span class="hljs-built_in">LOWER</span>(first_name))  姓名 <br><span class="hljs-keyword">FROM</span> <br>employees;<br></code></pre></td></tr></table></figure><p><code>SUBSTR</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <br>CONCAT(<span class="hljs-built_in">UPPER</span>(SUBSTR(last_name,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)),<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-built_in">LOWER</span>(SUBSTR(last_name,<span class="hljs-number">2</span>)))  out_put<br><span class="hljs-keyword">FROM</span><br>employees;<br><br>#查询的结果类似：L_sd  L_xr<br></code></pre></td></tr></table></figure><p><code>trim</code>:去前后空格<br><code>lpad</code>：左填充<br><code>rpad</code>：右填充<br><code>instr</code>:获取子串第一次出现的索引</p><p><code>replace</code>：替换</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs sql">#二、数学函数<br><br>#round 四舍五入<br><span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">-1.55</span>);<br><span class="hljs-keyword">SELECT</span> ROUND(<span class="hljs-number">1.567</span>,<span class="hljs-number">2</span>);<br><br><br>#ceil 向上取整,返回<span class="hljs-operator">&gt;=</span>该参数的最小整数<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">CEIL</span>(<span class="hljs-number">-1.02</span>);<br><br>#floor 向下取整，返回<span class="hljs-operator">&lt;=</span>该参数的最大整数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">FLOOR</span>(<span class="hljs-number">-9.99</span>);<br><br>#<span class="hljs-keyword">truncate</span> 截断<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">TRUNCATE</span>(<span class="hljs-number">1.69999</span>,<span class="hljs-number">1</span>);<br><br>#mod取余<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">mod(a,b) ：  a-a/b*b</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">mod(-10,-3):-10- (-10)/(-3)*（-3）=-1</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MOD</span>(<span class="hljs-number">10</span>,<span class="hljs-number">-3</span>);<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">10</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>;<br><br><br>#三、日期函数<br><br>#now 返回当前系统日期<span class="hljs-operator">+</span>时间<br><span class="hljs-keyword">SELECT</span> NOW();<br><br>#curdate 返回当前系统日期，不包含时间<br><span class="hljs-keyword">SELECT</span> CURDATE();<br><br>#curtime 返回当前时间，不包含日期<br><span class="hljs-keyword">SELECT</span> CURTIME();<br><br><br>#可以获取指定的部分，年、月、日、小时、分钟、秒<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(NOW()) 年;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">YEAR</span>(<span class="hljs-string">&#x27;1998-1-1&#x27;</span>) 年;<br><br><span class="hljs-keyword">SELECT</span>  <span class="hljs-keyword">YEAR</span>(hiredate) 年 <span class="hljs-keyword">FROM</span> employees;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">MONTH</span>(NOW()) 月;<br><span class="hljs-keyword">SELECT</span> MONTHNAME(NOW()) 月;<br><br><br>#str_to_date 将字符通过指定的格式转换成日期<br><br><span class="hljs-keyword">SELECT</span> STR_TO_DATE(<span class="hljs-string">&#x27;1998-3-2&#x27;</span>,<span class="hljs-string">&#x27;%Y-%c-%d&#x27;</span>) <span class="hljs-keyword">AS</span> out_put;<br><br>#查询入职日期为<span class="hljs-number">1992</span><span class="hljs-comment">--4-3的员工信息</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> hiredate <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1992-4-3&#x27;</span>;<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees <span class="hljs-keyword">WHERE</span> hiredate <span class="hljs-operator">=</span> STR_TO_DATE(<span class="hljs-string">&#x27;4-3 1992&#x27;</span>,<span class="hljs-string">&#x27;%c-%d %Y&#x27;</span>);<br><br><br>#date_format 将日期转换成字符<br><br><span class="hljs-keyword">SELECT</span> DATE_FORMAT(NOW(),<span class="hljs-string">&#x27;%y年%m月%d日&#x27;</span>) <span class="hljs-keyword">AS</span> out_put;<br><br>#查询有奖金的员工名和入职日期(xx月<span class="hljs-operator">/</span>xx日 xx年)<br><span class="hljs-keyword">SELECT</span> last_name,DATE_FORMAT(hiredate,<span class="hljs-string">&#x27;%m月/%d日 %y年&#x27;</span>) 入职日期<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;<br><br><br>#四、其他函数<br><br><span class="hljs-keyword">SELECT</span> VERSION();<br><span class="hljs-keyword">SELECT</span> DATABASE();<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">USER</span>();<br></code></pre></td></tr></table></figure><h5 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h5><p><code>IF</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> <br>last_name,commission_pct,IF(commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>,<span class="hljs-string">&#x27;没奖金，呵呵&#x27;</span>,<span class="hljs-string">&#x27;有奖金，嘻嘻&#x27;</span>) 备注<br><span class="hljs-keyword">FROM</span> <br>employees;<br></code></pre></td></tr></table></figure><p><code>CASE</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SELECT</span> salary,<br><span class="hljs-keyword">CASE</span> <br><span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;</span><span class="hljs-number">20000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;A&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;</span><span class="hljs-number">15000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;B&#x27;</span><br><span class="hljs-keyword">WHEN</span> salary<span class="hljs-operator">&gt;</span><span class="hljs-number">10000</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;C&#x27;</span><br><span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;D&#x27;</span><br><span class="hljs-keyword">END</span> <span class="hljs-keyword">AS</span> 工资级别<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p><code>GROUP BY</code></p><h5 id="分组前查询"><a href="#分组前查询" class="headerlink" title="分组前查询"></a>分组前查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs SQL">#案例<span class="hljs-number">1</span>：查询邮箱中包含a字符的 每个部门的最高工资<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MAX</span>(salary),department_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a%&#x27;</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_id;<br><br><br>#案例<span class="hljs-number">2</span>：查询有奖金的每个领导手下员工的平均工资<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">AVG</span>(salary),manager_id<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> manager_id;<br></code></pre></td></tr></table></figure><h5 id="分组后查询"><a href="#分组后查询" class="headerlink" title="分组后查询"></a>分组后查询</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">MAX</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">MAX</span>(salary)<span class="hljs-operator">&gt;</span><span class="hljs-number">12000</span>;<br><br><span class="hljs-keyword">SELECT</span> job_id,<span class="hljs-built_in">MAX</span>(salary) m<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> commission_pct <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_id<br><span class="hljs-keyword">HAVING</span> m<span class="hljs-operator">&gt;</span><span class="hljs-number">6000</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> m ;                 <br></code></pre></td></tr></table></figure><h5 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h5><p><code>sum</code></p><p><code>avg</code></p><p><code>manx</code></p><p><code>min</code></p><p><code>count</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">#会忽略<span class="hljs-keyword">null</span>值<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(commision_pct) <span class="hljs-keyword">from</span> employees;<br></code></pre></td></tr></table></figure><p><code>分组函数+distinct</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> salary) <span class="hljs-keyword">from</span> employees;<br></code></pre></td></tr></table></figure><p><code>和分组函数一起查询的字段，会砍掉一部分</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> avg（salary），employee_id <span class="hljs-keyword">from</span> employees;<br>#结果只有一条数据<br></code></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><h5 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#案例<span class="hljs-number">2</span>：查询城市名中第二个字符为o的部门名和城市名<br><br><span class="hljs-keyword">SELECT</span> department_name,city<br><span class="hljs-keyword">FROM</span> departments d,locations l<br><span class="hljs-keyword">WHERE</span> d.`location_id` <span class="hljs-operator">=</span> l.`location_id`<br><span class="hljs-keyword">AND</span> city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;_o%&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span>#案例<span class="hljs-number">1</span>：查询每个城市的部门个数<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 个数,city<br><span class="hljs-keyword">FROM</span> departments d,locations l<br><span class="hljs-keyword">WHERE</span> d.`location_id`<span class="hljs-operator">=</span>l.`location_id`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序<br><span class="hljs-keyword">SELECT</span> job_title,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<br><span class="hljs-keyword">FROM</span> employees e,jobs j<br><span class="hljs-keyword">WHERE</span> e.`job_id`<span class="hljs-operator">=</span>j.`job_id`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> job_title<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#三表连接<br><span class="hljs-keyword">SELECT</span> last_name,department_name,city<br><span class="hljs-keyword">FROM</span> employees e,departments d,locations l<br><span class="hljs-keyword">WHERE</span> e.`department_id`<span class="hljs-operator">=</span>d.`department_id`<br><span class="hljs-keyword">AND</span> d.`location_id`<span class="hljs-operator">=</span>l.`location_id`<br><span class="hljs-keyword">AND</span> city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;s%&#x27;</span><br><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h5 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> last_name,department_name,city<br><span class="hljs-keyword">FROM</span> employees e,departments d,locations l<br><span class="hljs-keyword">WHERE</span> e.`department_id`<span class="hljs-operator">=</span>d.`department_id`<br><span class="hljs-keyword">AND</span> d.`location_id`<span class="hljs-operator">=</span>l.`location_id`<br><span class="hljs-keyword">AND</span> city <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;s%&#x27;</span><br><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> department_name <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h5 id="自连接（用的少）"><a href="#自连接（用的少）" class="headerlink" title="自连接（用的少）"></a>自连接（用的少）</h5><h5 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h5><p>和sql92的等值连接差不多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>#<span class="hljs-number">3.</span> 查询部门个数<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>的城市名和部门个数，（添加分组<span class="hljs-operator">+</span>筛选）<br><br>#①查询每个城市的部门个数<br>#②在①结果上筛选满足条件的<br><span class="hljs-keyword">SELECT</span> city,<span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 部门个数<br><span class="hljs-keyword">FROM</span> departments d<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> locations l<br><span class="hljs-keyword">ON</span> d.`location_id`<span class="hljs-operator">=</span>l.`location_id`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> city<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">#案例<span class="hljs-number">4.</span>查询哪个部门的员工个数<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span>的部门名和员工个数，并按个数降序（添加排序）<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) 个数,department_name<br><span class="hljs-keyword">FROM</span> employees e<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> departments d<br><span class="hljs-keyword">ON</span> e.`department_id`<span class="hljs-operator">=</span>d.`department_id`<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> department_name<br><span class="hljs-keyword">HAVING</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">3</span><br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h5 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h5><p>外连接相当于主表和从表的关系</p><p>主表的每一列都会存在，即使连接的从表为null</p><p>两个简单的例子，对比</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.<span class="hljs-operator">*</span>,e.employee_id<br><span class="hljs-keyword">FROM</span> departments d<br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">OUTER</span> <span class="hljs-keyword">JOIN</span> employees e<br><span class="hljs-keyword">ON</span> d.`department_id` <span class="hljs-operator">=</span> e.`department_id`;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/10/mysql%E5%9F%BA%E7%A1%80/image-20211112100600318.png" alt="image-20211112100600318"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> d.<span class="hljs-operator">*</span>,e.employee_id<br> <span class="hljs-keyword">FROM</span> departments d,employees e<br> <span class="hljs-keyword">WHERE</span> d.`department_id` <span class="hljs-operator">=</span> e.`department_id`;<br></code></pre></td></tr></table></figure><p><img src="/2021/11/10/mysql%E5%9F%BA%E7%A1%80/image-20211112100648057.png" alt="image-20211112100648057"></p><p>特点：<br>①查询的结果=主表中所有的行，如果从表和它匹配的将显示匹配行，如果从表没有匹配的则显示null<br>②left join 左边的就是主表，right join 右边的就是主表<br>  full join 两边都是主表<br>③一般用于查询除了交集部分的剩余的不匹配的行</p><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">#比<span class="hljs-string">&#x27;Abel&#x27;</span>工资高的<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary<span class="hljs-operator">&gt;</span>(<br><br><span class="hljs-keyword">SELECT</span> salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> last_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Abel&#x27;</span><br><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">#查询工资最低的人的信息<br><span class="hljs-keyword">SELECT</span> last_name,job_id,salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary<span class="hljs-operator">=</span>(<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">MIN</span>(salary)<br><span class="hljs-keyword">FROM</span> employees<br>);<br></code></pre></td></tr></table></figure><p>。。。</p><h4 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">#引入的案例：查询部门编号<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>或邮箱包含a的员工信息<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees  <span class="hljs-keyword">WHERE</span> email <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%a%&#x27;</span><br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> employees  <span class="hljs-keyword">WHERE</span> department_id<span class="hljs-operator">&gt;</span><span class="hljs-number">90</span>;<br></code></pre></td></tr></table></figure><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">语法：<br><span class="hljs-keyword">select</span> 查询列表    <br><span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> 别名       <br>连接类型 <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span>   <br><span class="hljs-keyword">on</span> 连接条件         <br><span class="hljs-keyword">where</span> 筛选          <br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组列表   <br><span class="hljs-keyword">having</span> 筛选        <br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span>排序列表    <br>limit 起始条目索引，条目数; <br></code></pre></td></tr></table></figure><h3 id="DML语句"><a href="#DML语句" class="headerlink" title="DML语句"></a>DML语句</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#支持多行插入<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty(id,NAME,sex,phone)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-number">15</span>,<span class="hljs-string">&#x27;娜扎&#x27;</span>,<span class="hljs-string">&#x27;女&#x27;</span>,<span class="hljs-string">&#x27;1388888888&#x27;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#不支持多行插入<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> beauty<br><span class="hljs-keyword">SET</span> id<span class="hljs-operator">=</span><span class="hljs-number">19</span>,NAME<span class="hljs-operator">=</span><span class="hljs-string">&#x27;刘涛&#x27;</span>,phone<span class="hljs-operator">=</span><span class="hljs-string">&#x27;999&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">UPDATE beauty <span class="hljs-keyword">SET</span> phone <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;13899888899&#x27;</span><br><span class="hljs-keyword">WHERE</span> NAME <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;唐%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> beauty <span class="hljs-keyword">WHERE</span> phone <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%9&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="DCL语句"><a href="#DCL语句" class="headerlink" title="DCL语句"></a>DCL语句</h3><h4 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs SQL">#案例：创建库Books<br><br><span class="hljs-keyword">CREATE</span> DATABASE IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> books ;<br><br><br>#<span class="hljs-number">2</span>、库的修改<br><br>RENAME DATABASE books <span class="hljs-keyword">TO</span> 新库名;<br><br>#更改库的字符集<br><br><span class="hljs-keyword">ALTER</span> DATABASE books <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> gbk;<br><br><br>#<span class="hljs-number">3</span>、库的删除<br><br><span class="hljs-keyword">DROP</span> DATABASE IF <span class="hljs-keyword">EXISTS</span> books;<br><br></code></pre></td></tr></table></figure><h4 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h4><h5 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs SQL">案例：创建表author<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> author(<br>id <span class="hljs-type">INT</span>,<br>au_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">20</span>),<br>nation <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">10</span>)<br><br>)<br><span class="hljs-keyword">DESC</span> author;<br></code></pre></td></tr></table></figure><h5 id="表的修改"><a href="#表的修改" class="headerlink" title="表的修改"></a>表的修改</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br>#①修改列名<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book CHANGE <span class="hljs-keyword">COLUMN</span> publishdate pubDate DATETIME;<br><br><br>#②修改列的类型或约束<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book MODIFY <span class="hljs-keyword">COLUMN</span> pubdate <span class="hljs-type">TIMESTAMP</span>;<br><br>#③添加新列<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> annual <span class="hljs-keyword">DOUBLE</span>; <br><br>#④删除列<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> book_author <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">COLUMN</span>  annual;<br>#⑤修改表名<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> author RENAME <span class="hljs-keyword">TO</span> book_author;<br></code></pre></td></tr></table></figure><h5 id="表的删除"><a href="#表的删除" class="headerlink" title="表的删除"></a>表的删除</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> book_author;<br></code></pre></td></tr></table></figure><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><p>NOT NULL：非空，该字段的值必填<br>UNIQUE：唯一，该字段的值不可重复<br>DEFAULT：默认，该字段的值不用手动插入有默认值<br>PRIMARY KEY：主键，该字段的值不可重复并且非空  unique+not null<br>FOREIGN KEY：外键，该字段的值引用了另外的表的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">一、创建表时设置自增长列<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表(<br>字段名 字段类型 约束 auto_increment<br>)<br><br><br>二、修改表时设置自增长列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表 modify <span class="hljs-keyword">column</span> 字段名 字段类型 约束 auto_increment<br><br><br>三、删除自增长列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表 modify <span class="hljs-keyword">column</span> 字段名 字段类型 约束 <br></code></pre></td></tr></table></figure><h2 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h2><h4 id="DESC-表名；-查询表的结构"><a href="#DESC-表名；-查询表的结构" class="headerlink" title="DESC 表名； 查询表的结构"></a><code>DESC 表名；</code> 查询表的结构</h4><h4 id="IFNULL-a-b-a不为空就取a，为空就取b"><a href="#IFNULL-a-b-a不为空就取a，为空就取b" class="headerlink" title="IFNULL(a,b) a不为空就取a，为空就取b"></a>IFNULL(a,b) a不为空就取a，为空就取b</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>,salary<span class="hljs-operator">*</span><span class="hljs-number">12</span><span class="hljs-operator">*</span>(<span class="hljs-number">1</span><span class="hljs-operator">+</span>IFNULL(commission_pct,<span class="hljs-number">0</span>)) 年薪<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 年薪 <span class="hljs-keyword">ASC</span>;<br></code></pre></td></tr></table></figure><h4 id="号的作用"><a href="#号的作用" class="headerlink" title="+号的作用"></a>+号的作用</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs axapta">java中的+号：<br>①运算符，两个操作数都为数值型<br>②连接符，只要有一个操作数为字符串<br><br>mysql中的+号：<br>仅仅只有一个功能：运算符<br><br><span class="hljs-keyword">select</span> <span class="hljs-number">100</span>+<span class="hljs-number">90</span>; 两个操作数都为数值型，则做加法运算<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;123&#x27;</span>+<span class="hljs-number">90</span>;只要其中一方为字符型，试图将字符型数值转换成数值型<br>如果转换成功，则继续做加法运算<br><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;john&#x27;</span>+<span class="hljs-number">90</span>;如果转换失败，则将字符型数值转换成<span class="hljs-number">0</span><br><br><span class="hljs-keyword">select</span> <span class="hljs-literal">null</span>+<span class="hljs-number">10</span>; 只要其中一方为<span class="hljs-literal">null</span>，则结果肯定为<span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span>[CDATA[ <span class="hljs-operator">&gt;=</span> ]]<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h4 id="日期格式化函数"><a href="#日期格式化函数" class="headerlink" title="日期格式化函数"></a>日期格式化函数</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">date_format(re.create_date,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql数据库面试</title>
    <link href="/2021/10/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="MyIsam与InnoDB区别"><a href="#MyIsam与InnoDB区别" class="headerlink" title="MyIsam与InnoDB区别"></a>MyIsam与InnoDB区别</h3><p><img src="/2021/10/27/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/image-20211027172241015.png" alt="image-20211027172241015"></p><h3 id="Mysql架构"><a href="#Mysql架构" class="headerlink" title="Mysql架构"></a>Mysql架构</h3><h3 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h3><p>索引是数据结构，BTree索引 和 哈希索引。</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据结构面试</title>
    <link href="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<p><strong><img src="/2021/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%9D%A2%E8%AF%95/image-20211026212920399.png" alt="image-20211026212920399"></strong></p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>解决：不知道下标查询数组，需要遍历所有</p><p>类似：电话簿</p><p>1、数组+链表</p><p>2、数组+二叉树</p><p>解决hash冲突，开放寻址，拉链法</p><p>哈希表的扩容：负载因子  增长一倍 重新Hash</p><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p><strong>队列</strong> 是 <strong>先进先出( FIFO，First In, First Out)</strong> 的线性表</p><h4 id="单队列"><a href="#单队列" class="headerlink" title="单队列"></a>单队列</h4><p><strong>顺序队列（数组实现）</strong> 和 <strong>链式队列（链表实现）</strong>。</p><p><strong>顺序队列存在“假溢出”的问题也就是明明有位置却不能添加的情况。</strong></p><p>循环队列可以解决顺序队列的假溢出和越界问题。</p><h4 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a>常见应用场景</h4><ul><li><p><strong>阻塞队列：</strong> 阻塞队列可以看成在队列基础上加了阻塞操作的队列。当队列为空的时候，出队操作阻塞，当队列满的时候，入队操作阻塞。使用阻塞队列我们可以很容易实现“生产者 - 消费者“模型。</p></li><li><p><strong>线程池中的请求/任务队列：</strong> 线程池中没有空闲线程时，新的任务请求线程资源时，线程池该如何处理呢？答案是将这些请求放在队列中，当有空闲线程的时候，会循环中反复从队列中获取任务来执行。队列分为无界队列(基于链表)和有界队列(基于数组)。无界队列的特点就是可以一直入列，除非系统资源耗尽，比如 ：<code>FixedThreadPool</code> 使用无界队列 <code>LinkedBlockingQueue</code>。但是有界队列就不一样了，当队列满的话后面再有任务/请求就会拒绝，在 Java 中的体现就是会抛出<code>java.util.concurrent.RejectedExecutionException</code> 异常。</p></li></ul><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>度：一个顶点有多少边</p><p>储存：邻接矩阵存储（二维数组）、邻接表存储</p><p>图的搜索：广度优先搜索(队列实现)、深度优先搜索（栈实现）</p><h3 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h3><p>最大堆、最小堆</p><p>存储:数组</p><p>操作：插入（对比父节点，大于则交换）</p><p>​        删除：                                                                                </p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis面试</title>
    <link href="/2021/10/26/Redis%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/26/Redis%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="缓存失效"><a href="#缓存失效" class="headerlink" title="缓存失效"></a>缓存失效</h3><h4 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h4><p>缓存穿透：查询了一定不存在的数据，由于缓存中没有，高并发同时查数据库</p><p>解决方法：</p><ul><li><p>空结果进行缓存，并加入过期时间  但是如果每次请求都是新的或者不存在，就失效了</p></li><li><p>布隆过滤 </p><p>使用布隆过滤器将可能查到的数据以hash的bit形式进行存储。但是布隆过滤器也有误差:</p><p>元素存在，布隆过滤器判断就是一定处在。</p><p>如果元素不存在，布隆过滤器可能判断存在。</p><p>但是也没有关系，比如10000个不存在的请求过来，和100个存在的请求过来，经过布隆过滤器就只剩下102个布隆过滤器判断存在的。</p></li><li><p>校验</p></li><li><p>如果是单个ip地址在每秒多次的访问，可以直接在nginx拉黑的</p></li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存雪崩：缓存中的数据同时过期</p><p>方法：再设置失效时间的时候，加一个随机值。 或者是一些热点数据过期时间超长，这样在集群的时候也可以解决掉缓存击穿的问题。</p><h4 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h4><p>缓存击穿：热点key</p><p>方法：集群，热点数据的过期时间随机</p><p>如何保存缓存和数据库一致性，双删</p><p>如何保证缓存都是热点数据</p><h3 id="Redis的五大数据类型"><a href="#Redis的五大数据类型" class="headerlink" title="Redis的五大数据类型"></a>Redis的五大数据类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>线程安全的，最多512M</p><p>数据结构：动态字符串，类似于ArrayList,预先分配了冗余空间减少内存的分配。当超过预先分配的空间是会扩容1M。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">set</span> k<span class="hljs-number">1</span> v<span class="hljs-number">1</span><br><span class="hljs-attribute">strlen</span> k<span class="hljs-number">1</span><br><span class="hljs-attribute">setnx</span> k<span class="hljs-number">1</span> v<span class="hljs-number">1</span> //k<span class="hljs-number">1</span>不会存在的时候<br><span class="hljs-attribute">incr</span> k<span class="hljs-number">1</span> 或者 decr k<span class="hljs-number">1</span> //加一 减一<br><span class="hljs-attribute">incrby</span> <span class="hljs-number">5</span> k<span class="hljs-number">1</span>   //加<span class="hljs-number">5</span> 必须是数字<br></code></pre></td></tr></table></figure><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><p>数据结构：双向链表+ziplist</p><p>数据较少的时候就是一个单个的ziplist，为一块连续的内存，当容量增大以后，变成了又ziplist组成的双向链表，满足了快速插入与删除，且不会造成大量的冗余空间。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tcl">lpush/rpush k v1 v2  <br>rpop/rpop k<br><span class="hljs-keyword">lrange</span> k <span class="hljs-number">0</span> <span class="hljs-number">-1</span> //<span class="hljs-number">-1</span>最右边<br><span class="hljs-keyword">lindex</span> k <span class="hljs-number">2</span><br>llen k<br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><p>存储不重复的数据，无序的。</p><p>数据结构：dict字典，value为null的hash表。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sadd</span> k<span class="hljs-number">1</span> v<span class="hljs-number">1</span> v<span class="hljs-number">2</span><br><span class="hljs-attribute">smembers</span><br><span class="hljs-attribute">sismember</span> k v<br><span class="hljs-attribute">scard</span> k<br><span class="hljs-attribute">srem</span> k v<span class="hljs-number">1</span> v<span class="hljs-number">2</span><br><span class="hljs-attribute">spop</span> k<br></code></pre></td></tr></table></figure><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>String类型的field和value的映射表,特别适合存储对象。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">hset</span> k field value<br><span class="hljs-attribute">hget</span> k field<br><span class="hljs-attribute">hmset</span> k filed<span class="hljs-number">1</span> value<span class="hljs-number">1</span> filed<span class="hljs-number">2</span> value<span class="hljs-number">2</span><br><span class="hljs-attribute">hexists</span> k filed<br><span class="hljs-attribute">hkeys</span> k   //集合中所有的filed<br><span class="hljs-attribute">hvals</span> k  //集合中所有的value<br><br><br></code></pre></td></tr></table></figure><p>数据结构：ziplist 或者是hash表</p><h4 id="Zset-（有序集合）"><a href="#Zset-（有序集合）" class="headerlink" title="Zset （有序集合）"></a>Zset （有序集合）</h4><p>有序集合，有评分</p><p>数据结构：hash表和跳跃表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">zadd</span> k score<span class="hljs-number">1</span> value<span class="hljs-number">1</span> score<span class="hljs-number">2</span> value<span class="hljs-number">2</span><br><span class="hljs-attribute">zrange</span> k minmax  //按得分从小到大<br><span class="hljs-attribute">zrange</span> k maxmin<br></code></pre></td></tr></table></figure><h4 id><a href="#" class="headerlink" title></a></h4>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spirng面试</title>
    <link href="/2021/10/25/spring%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/25/spring%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是-Spring-框架"><a href="#什么是-Spring-框架" class="headerlink" title="什么是 Spring 框架?"></a>什么是 Spring 框架?</h3><ul><li><p>Spring 是轻量级的开源的 JavaEE 框架</p></li><li><p>Spring 可以解决企业应用开发的复杂性</p></li></ul><p>两个核心的部分：</p><ol><li>IOC：控制反转，把创建对象过程交给 Spring 进行管理</li><li>Aop：面向切面，不修改源代码进行功能增强</li></ol><h3 id="列举⼀些重要的Spring模块？"><a href="#列举⼀些重要的Spring模块？" class="headerlink" title="列举⼀些重要的Spring模块？"></a>列举⼀些重要的Spring模块？</h3><ul><li>Spring Core： 基础,可以说 Spring 其他所有的功能都需要依赖于该类库。主要提供 IoC 依<br>赖注⼊功能。</li><li>Spring Aspects ： 该模块为与AspectJ的集成提供⽀持。</li><li>Spring AOP ：提供了⾯向切⾯的编程实现。</li><li>Spring JDBC : Java数据库连接。</li><li>Spring JMS ：Java消息服务。</li><li>Spring ORM : ⽤于⽀持Hibernate等ORM⼯具。</li><li>Spring Web : 为创建Web应⽤程序提供⽀持。</li><li>Spring Test : 提供了对 JUnit 和 TestNG 测试的⽀持。</li></ul><h3 id="什么是Spring-IOC容器"><a href="#什么是Spring-IOC容器" class="headerlink" title="什么是Spring IOC容器"></a>什么是Spring IOC容器</h3><p>作用：Spring IOC容器集中的创建对象管理对象（依赖注入，装配对象，配置对象）,所以当我们需要的时候直接通过自动注入，就可以得到配置好的对象。</p><p> 数据结构：IoC 容器实际上就是个Map</p><h3 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h3><p>AOP是面向切面编程</p><p>作用：把业务中共同的逻辑（事务管理，日志管理等）封装起来，降低耦合度。</p><p>原理：AOP是基于动态代理的，如果某个对象有接口皆可以使用<strong>JDK Proxy</strong>，如果没有就使用<strong>Cglib</strong>，也可以使用<strong>AspectJ</strong></p><h3 id="IOC原理"><a href="#IOC原理" class="headerlink" title="IOC原理"></a>IOC原理</h3><p>xml 解析、工厂模式、反射</p><h3 id="Spring-AOP-和-AspectJ-AOP-有什么区别？"><a href="#Spring-AOP-和-AspectJ-AOP-有什么区别？" class="headerlink" title="Spring AOP 和 AspectJ AOP 有什么区别？"></a><strong>Spring AOP</strong> <strong>和</strong> <strong>AspectJ AOP</strong> <strong>有什么区别？</strong></h3><p>Spring AOP 属于运⾏时增强，⽽ AspectJ 是编译时增强。</p><p>如果切面少，两者性能差不多，如果多选择效率更高的AspectJ AOP。</p><h3 id="事务操作"><a href="#事务操作" class="headerlink" title="事务操作"></a>事务操作</h3><p>可以通过注解，或声明式</p><h3 id="RestController-vs-Controller"><a href="#RestController-vs-Controller" class="headerlink" title="@RestController vs @Controller"></a>@RestController vs @Controller</h3><ul><li>@Controller 不加 @ResponseBody 的话⼀般使⽤在要返回⼀个视图的情况，这种情况</li></ul><p>属于⽐᫾传统的Spring MVC 的应⽤，对应于前后端不分离的情况。</p><ul><li><strong>@RestController</strong> <strong>返回****JSON</strong> <strong>或</strong> <strong>XML</strong> <strong>形式数据</strong></li></ul><h3 id="Spring-bean"><a href="#Spring-bean" class="headerlink" title="Spring bean"></a><strong>Spring bean</strong></h3><h4 id="Spring-中的-bean-的作⽤域有哪些"><a href="#Spring-中的-bean-的作⽤域有哪些" class="headerlink" title="Spring 中的 bean 的作⽤域有哪些?"></a>Spring 中的 bean 的作⽤域有哪些?</h4><ul><li>singleton : 唯⼀ bean 实例，Spring 中的 bean 默认都是单例的。</li><li>prototype : 每次请求都会创建⼀个新的 bean 实例。</li><li>request : 每⼀次HTTP请求都会产⽣⼀个新的bean，该bean仅在当前HTTP request内有效。</li><li>session : 每⼀次HTTP请求都会产⽣⼀个新的 bean，该bean仅在当前 HTTP session 内有效。</li></ul><h4 id="单例-bean-的线程安全问题"><a href="#单例-bean-的线程安全问题" class="headerlink" title="单例 bean 的线程安全问题"></a><strong>单例</strong> <strong>bean</strong> <strong>的线程安全问题</strong></h4><p>主要是多线程对一个对象的某个成员变量进行写操作的时候，可能会发生线程安全的问题。</p><p>可以通过ThreadLocal</p><h4 id="Component-和-Bean的区别是什么？"><a href="#Component-和-Bean的区别是什么？" class="headerlink" title="@Component 和 @Bean的区别是什么？"></a><strong>@Component</strong> <strong>和</strong> @Bean的区别是什么？</h4><ul><li>@Component 注解作⽤于类，⽽ @Bean 注解作⽤于⽅法一般都是和@Configuration使用</li><li>主要的区别就是，当我们需要第三方库中的类装配到Spirng容器中时，只能通过@Bean</li></ul><h4 id="将⼀个类声明为Spring的-bean-的注解有哪些"><a href="#将⼀个类声明为Spring的-bean-的注解有哪些" class="headerlink" title="将⼀个类声明为Spring的 bean 的注解有哪些?"></a>将⼀个类声明为Spring的 bean 的注解有哪些?</h4><ul><li><p>@Component ：通⽤的注解，可标注任意类为 Spring 组件。如果⼀个Bean不知道属于哪个层，可以使⽤ @Component 注解标注。</p></li><li><p>@Repository : 对应持久层即 Dao 层，主要⽤于数据库相关操作。</p></li><li><p>@Service : 对应服务层，主要涉及⼀些复杂的逻辑，需要⽤到 Dao层。</p></li><li><p>@Controller : 对应 Spring MVC 控制层，主要⽤户接受⽤户请求并调⽤ Service 层返回数据</p><p>给前端⻚⾯。</p></li></ul><h4 id="Spring-中的-bean-⽣命周期"><a href="#Spring-中的-bean-⽣命周期" class="headerlink" title="Spring 中的 bean ⽣命周期?"></a>Spring 中的 bean ⽣命周期?</h4><p>Spring会扫描<strong>指定包</strong>下面的Java类，然后将其变成beanDefinition对象，然后Spring会根据beanDefinition来创建bean。</p><p>具体源码不是很清楚。</p><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><h3 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h3><h4 id="对于-Spring-MVC的理解"><a href="#对于-Spring-MVC的理解" class="headerlink" title="对于 Spring MVC的理解"></a><strong>对于</strong> <strong>Spring MVC</strong>的理解</h4><p>在没有springmvc的时代，采用了jsp技术，前端和后端混杂，代码耦合度高复用性第，开发效率低。</p><p>MVC 是⼀种设计模式,Spring MVC 是⼀款很优秀的 MVC 框架。Spring MVC 可以帮助我们进⾏更简洁的Web层的开发，并且它天⽣与 Spring 框架集成。</p><p>Spring MVC 下我们⼀般把后端项⽬分</p><p>为 Service层（处理业务）、Dao层（数据库操作）、Entity层（实体类）、Controller层(控制</p><p>层，返回数据给前台⻚⾯)。</p><h3 id="SpringMVC-⼯作原理了解吗"><a href="#SpringMVC-⼯作原理了解吗" class="headerlink" title="SpringMVC ⼯作原理了解吗"></a><strong>SpringMVC</strong> <strong>⼯作原理了解吗</strong></h3><ol><li><p>用户请求到达前端控制器</p></li><li><p>前端控制器根据请求查询Handler到达处理器映射器</p></li><li><p>处理器映射器就将执行链返回给前端控制器</p></li><li><p>前端控制器再请求处理器适配器</p></li><li><p>处理器适配器找到处理器并执行最终返回了ModelAndView到处理器适配器</p></li><li><p>处理器适配器返回给前端控制器</p></li><li><p>再通过视图解析器解析视图并渲染</p></li><li><p>最终前端控制器再将ModelAndView响应给用户</p><p><img src="/2021/10/25/spring%E9%9D%A2%E8%AF%95/image-20211025232353734.png" alt="image-20211025232353734"></p></li></ol><h3 id="Spring-框架中⽤到了哪些设计模式？"><a href="#Spring-框架中⽤到了哪些设计模式？" class="headerlink" title="Spring 框架中⽤到了哪些设计模式？"></a><strong>Spring</strong> <strong>框架中⽤到了哪些设计模式？</strong></h3><ul><li><p><strong>⼯⼚设计模式</strong> : Spring使⽤⼯⼚模式通过 BeanFactory 、 ApplicationContext 创建 bean 对象。</p></li><li><p><strong>代理设计模式</strong> : Spring AOP 功能的实现。</p></li><li><p><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的</p></li><li><p><strong>包装器设计模式</strong> : 我们的项⽬需要连接多个数据库，⽽且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</p></li><li><p><strong>观察者模式</strong><strong>:</strong> Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</p></li><li><p><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、spring MVC 中也是⽤到了适配器模式适配 Controller 。</p></li></ul><h3 id="Spring-事务"><a href="#Spring-事务" class="headerlink" title="Spring 事务"></a>Spring 事务</h3><h4 id="Spring-管理事务的⽅式有⼏种？"><a href="#Spring-管理事务的⽅式有⼏种？" class="headerlink" title="Spring 管理事务的⽅式有⼏种？"></a><strong>Spring</strong> <strong>管理事务的⽅式有⼏种？</strong></h4><ol><li>编程式事务(不推荐使⽤)</li><li>声明式事务（推荐使⽤）</li></ol><p><strong>声明式事务⼜分为两种：</strong></p><ol><li>基于XML的声明式事务</li><li>基于注解的声明式事务</li></ol><h4 id="Spring-事务中的隔离级别有哪⼏种"><a href="#Spring-事务中的隔离级别有哪⼏种" class="headerlink" title="Spring 事务中的隔离级别有哪⼏种?"></a>Spring 事务中的隔离级别有哪⼏种?</h4><ul><li>DEFAULT，与后端数据库的隔离级别一致。Mysql是 REPEATABLE_READ。</li><li>UNCOMMITTED 会导致脏读、幻读或不可重复读</li><li> READ_COMMITTED  阻⽌脏读和不可重复读，但幻读仍有可能发⽣。</li><li><strong>REPEATABLE_READ</strong></li><li> <strong>SERIALIZABLE</strong></li></ul><table><thead><tr><th></th><th><strong>READ_UNCOMMITTED</strong></th><th><strong>READ_COMMITTED</strong></th><th><strong>REPEATABLE_READ</strong></th><th><strong>SERIALIZABLE</strong></th></tr></thead><tbody><tr><td>脏读</td><td>y</td><td>n</td><td>n</td><td>n</td></tr><tr><td>幻读</td><td>y</td><td>y</td><td>n</td><td>n</td></tr><tr><td>不可重复读</td><td>y</td><td>y</td><td>y</td><td>n</td></tr></tbody></table><p>脏读：对数据修改，但事务回滚，另一事务读到被修改的数据</p><p>幻读：读出n个数据，此时另外一个事务修改了数据的分数，再次度数据时，前后数据数量不一致</p><p>不可重复读：事务A两次读数据时，事务B修改了数据，两次读的数据不一样。</p><h4 id="Spring-事务中哪⼏种事务传播⾏为"><a href="#Spring-事务中哪⼏种事务传播⾏为" class="headerlink" title="Spring 事务中哪⼏种事务传播⾏为"></a>Spring 事务中哪⼏种事务传播⾏为</h4><ul><li><p>REQUIRED：当前没有事务，则创建⼀个新的事务</p></li><li><p><strong>SUPPORTS</strong>：果当前没有事务，则以⾮事务的⽅式继续运⾏。</p></li><li><p><strong>MANDATORY</strong>：当前存在事务，则加⼊该事务；如果当前没有事务，则抛出异常</p></li></ul><p><img src="/2021/10/25/spring%E9%9D%A2%E8%AF%95/image-20211025164502936.png" alt="image-20211025164502936"></p><h4 id="Transactional-rollbackFor-s"><a href="#Transactional-rollbackFor-s" class="headerlink" title="@Transactional(rollbackFor = s)"></a>@Transactional(rollbackFor = s)</h4><p>可以让事物在遇到⾮运⾏时异常时也回滚。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx面试</title>
    <link href="/2021/10/21/Nginx%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/21/Nginx%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是正向代理，反向代理？"><a href="#什么是正向代理，反向代理？" class="headerlink" title="什么是正向代理，反向代理？"></a>什么是正向代理，反向代理？</h3><p>正向代理相当于就是一个服务器，用户通过正向代理再请求数据！</p><p>作用：正向代理隐藏了用户，用户的请求被代理服务器接收代替，到了服务器，服务器并不知道用户是谁。</p><p>反向代理从目标服务器获取数据后，再返回给客户端</p><p>作用：隐藏了真实服务器 IP 地址。</p><h3 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h3><h3 id="什么是动静分离"><a href="#什么是动静分离" class="headerlink" title="什么是动静分离"></a>什么是动静分离</h3><p>静态资源部署在nginx,动态资源由服务器提供</p><p>可以大幅的提升效率</p><h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><ul><li><p><strong>第一部分：全局块</strong> </p><p>一个重要的配置：worker_processes 值越大，可以支持的并发处理量也越多，但是</p><p>会受到硬件、软件等设备的制约</p></li><li><p>第二部分：</p><p><strong>events 块</strong> </p></li><li><p>第三部分 htpp块</p><p>http块，location块</p></li></ul><h3 id="反向代理如何实现"><a href="#反向代理如何实现" class="headerlink" title="反向代理如何实现"></a>反向代理如何实现</h3>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM面试</title>
    <link href="/2021/10/20/JVM%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/20/JVM%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="java中会存在内存泄漏吗-请简单描述。"><a href="#java中会存在内存泄漏吗-请简单描述。" class="headerlink" title="java中会存在内存泄漏吗,请简单描述。"></a>java中会存在内存泄漏吗,请简单描述。</h3><blockquote><p>内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。</p></blockquote><p>长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露。</p><p>发生的场景</p><ul><li><p>全局集合</p><p>大型应用程序中存在各种各样的全局数据仓库是很普遍的，必须有某种机制从储存库中移除不再需要的数据。</p></li><li><p>缓存</p><p>如果缓存设置不正确而大量使用缓存的话则会出现内存溢出的后果，因此需要将所使用的内存容量与检索数据的速度加以平衡。</p></li><li><p>递归</p></li></ul><h3 id="64位M中-int的长度是多数"><a href="#64位M中-int的长度是多数" class="headerlink" title="64位M中,int的长度是多数?"></a>64位M中,int的长度是多数?</h3><p>无论是64位，还是32位，int的长度都是32位或64位</p><h3 id="Serial与-Paralllel-gc之间的不同之处"><a href="#Serial与-Paralllel-gc之间的不同之处" class="headerlink" title="Serial与 Paralllel gc之间的不同之处?"></a>Serial与 Paralllel gc之间的不同之处?</h3><p>Serial与 Paralle在GC执行的时候都会引起stop-the-wod。</p><p>它们之间主要不同 Serial收集器是默认的复制收集器,执行GC的时候只有一个线程,而<br>parallel收集器使用多个GC线程来执行。</p><h3 id="Java中-WeakReference与-SoftReference的区别"><a href="#Java中-WeakReference与-SoftReference的区别" class="headerlink" title="Java中 WeakReference与 SoftReference的区别?"></a>Java中 WeakReference与 SoftReference的区别?</h3><ul><li> WeakReference与 SoftReference都有利于提高GC和内存的效率,</li><li>但是 WeakReference,一旦失去最后一个强引用,就会被Gc回收,而软引用虽然不能阻止被回收,但是可以延迟到JVM内存不足的时候</li></ul><h3 id="XX-UseCompressedOops有什么作用"><a href="#XX-UseCompressedOops有什么作用" class="headerlink" title="-XX:+ UseCompressedOops有什么作用?"></a><code>-XX:+ UseCompressedOops</code>有什么作用?</h3><p>j当32位的JVM迁移到64位的JVM时,由于对象的指针从32位增加到了64位,因此堆内存会突然增加。这也会对减低CPU缓存。通过<code>-XX:+ UseCompressedOops</code>可以压缩内存。</p><h3 id="32位JVM和64位JVM的最大堆内存分别是多少"><a href="#32位JVM和64位JVM的最大堆内存分别是多少" class="headerlink" title="32位JVM和64位JVM的最大堆内存分别是多少?"></a>32位JVM和64位JVM的最大堆内存分别是多少?</h3><ul><li>32位，理论4GB，实际更小</li><li>64位，理论16GB，可以指定到100GB</li></ul><h3 id="JRE、JDK、JVM及JIT之间有什么不同"><a href="#JRE、JDK、JVM及JIT之间有什么不同" class="headerlink" title="JRE、JDK、JVM及JIT之间有什么不同?"></a>JRE、JDK、JVM及JIT之间有什么不同?</h3><p>JRE运行时环境，JDK运行时环境以及所需工具，JVM，java虚拟机用于将编译字节码文件。</p><p>JIT热点代码会转换为本地代码。</p><h3 id="介绍下-Java-内存区域"><a href="#介绍下-Java-内存区域" class="headerlink" title="介绍下 Java 内存区域"></a>介绍下 Java 内存区域</h3><p>程序计数器<br>虚拟机栈<br>本地⽅法栈<br>堆<br>⽅法区<br>直接内存 (⾮运⾏时数据区的⼀部分)</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>每个线程都有一个程序计数器，程序计数器的值决定执行那一条指令</p><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>虚拟机栈也是java的内存区域，作用：每当函数的调用都会以栈帧的形式进入虚拟机栈，每当有返回就出栈。栈帧都拥有：局部变量表，操作数栈，动态链接和方法出口信息。</p><h4 id="本地⽅法栈"><a href="#本地⽅法栈" class="headerlink" title="本地⽅法栈"></a><strong>本地⽅法栈</strong></h4><p>用于本地方法的栈和虚拟机栈差不多。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>作用：存放对象实例和数组</p><p>可以分为新时代和老年代，新生代又包含伊甸园 FromSurvivor ToSurvivor</p><h4 id="⽅法区（元空间）"><a href="#⽅法区（元空间）" class="headerlink" title="⽅法区（元空间）"></a><strong>⽅法区</strong>（元空间）</h4><p>用于保存虚拟机已经加载出来的类信息，静态变量等信息。</p><h3 id="Java-虚拟机栈会出现两种错误"><a href="#Java-虚拟机栈会出现两种错误" class="headerlink" title="Java 虚拟机栈会出现两种错误"></a><strong>Java</strong> <strong>虚拟机栈会出现两种错误</strong></h3><ul><li><p><strong>StackOverFlowError</strong> <strong>：</strong> 若 Java 虚拟机栈的内存⼤⼩不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最⼤深度的时候，就抛出 StackOverFlowError 错误。</p></li><li><p><strong>OutOfMemoryError</strong> <strong>：</strong> 若 Java 虚拟机堆中没有空闲内存，并且垃圾回收器也⽆法提供更多内存的话。就会抛出 OutOfMemoryError 错误。</p></li></ul><h3 id="如何进入老年区的"><a href="#如何进入老年区的" class="headerlink" title="如何进入老年区的"></a>如何进入老年区的</h3><p>当完成垃圾回收后，伊甸园区的对象进入s1或s2区，并且年龄加1,当年龄到达了指定的年龄阈值后，就进入了老年区。</p><h3 id="为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢？"><a href="#为什么要将永久代-PermGen-替换为元空间-MetaSpace-呢？" class="headerlink" title="为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢？"></a><strong>为什么要将永久代</strong> <strong>(PermGen)</strong> <strong>替换为元空间</strong> <strong>(MetaSpace)</strong> 呢？</h3><p>永久代的内存固定无法调整，元空间则是使用的直接内存，受本机内存的限制。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM笔记总结</title>
    <link href="/2021/10/18/JVM/"/>
    <url>/2021/10/18/JVM/</url>
    
    <content type="html"><![CDATA[<h2 id="一、什么是JVM"><a href="#一、什么是JVM" class="headerlink" title="一、什么是JVM"></a>一、什么是JVM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java Virtual Machine，JAVA程序的<strong>运行环境</strong>（JAVA二进制字节码的运行环境）</p><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收机制</li><li>数组下标越界检查（如果越界有可能覆盖其他）</li><li>多态（使用虚方法调用机制实现多态）</li></ul><h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>JVM JRE JDK的区别</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150422.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150422.png" alt="img"></a></p><h2 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h2><h3 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a><strong>整体架构</strong></h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150440.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150440.png" alt="img"></a></p><h3 id="1、程序计数器（寄存器）"><a href="#1、程序计数器（寄存器）" class="headerlink" title="1、程序计数器（寄存器）"></a>1、程序计数器（寄存器）</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>用于保存JVM中下一条所要执行的指令的地址</p><p>若当前线程正在执行的是一个本地方法，那么此时程序计数器为 Undefined 。 </p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>线程私有<ul><li>CPU会为每个线程分配时间片，当当前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码</li><li>程序计数器是<strong>每个线程</strong>所<strong>私有</strong>的，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过程序计数器可以知道应该执行哪一句指令</li></ul></li><li>不会存在内存溢出</li></ul><h3 id="2、虚拟机栈"><a href="#2、虚拟机栈" class="headerlink" title="2、虚拟机栈"></a>2、虚拟机栈</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>每个<strong>线程</strong>运行需要的内存空间，称为<strong>虚拟机栈</strong></li><li>每个栈由多个<strong>栈帧</strong>组成，对应着每次调用方法时所占用的内存</li><li>每个线程只能有<strong>一个活动栈帧</strong>，对应着<strong>当前正在执行的方法</strong></li></ul><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>method1();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span> </span>&#123;<br>method2(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">method2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">int</span> c = a + b;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150534.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150534.png" alt="img"></a></p><p>在控制台中可以看到，主类中的方法在进入虚拟机栈的时候，符合栈的特点</p><h4 id="问题辨析"><a href="#问题辨析" class="headerlink" title="问题辨析"></a>问题辨析</h4><ul><li>垃圾回收是否涉及栈内存？<ul><li><strong>不需要</strong>。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，对应的栈帧就会被弹出栈。所以无需通过垃圾回收机制去回收内存。</li></ul></li><li>栈内存的分配越大越好吗？<ul><li>不是。因为<strong>物理内存是一定的</strong>，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</li></ul></li><li>方法内的局部变量是否是线程安全的？<ul><li>如果方法内<strong>局部变量没有逃离方法的作用范围</strong>，则是<strong>线程安全</strong>的</li><li>如果如果<strong>局部变量引用了对象</strong>，并<strong>逃离了方法的作用范围</strong>，则需要考虑线程安全问题</li></ul></li></ul><h4 id="内存溢出"><a href="#内存溢出" class="headerlink" title="内存溢出"></a>内存溢出</h4><p><strong>Java.lang.stackOverflowError</strong> 栈内存溢出</p><p><strong>发生原因</strong></p><ul><li>虚拟机栈中，<strong>栈帧过多</strong>（无限递归）</li><li>每个栈帧<strong>所占用过大</strong></li></ul><h4 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h4><p>CPU占用过高</p><ul><li><p>Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程</p><ul><li><p><strong>top</strong>命令，查看是哪个<strong>进程</strong>占用CPU过高</p></li><li><p><strong>ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过top查到的进程号</strong> </p><p>通过ps命令进一步查看是哪个线程占用CPU过高</p></li><li><p><strong>jstack 进程id</strong> 通过查看进程中的线程的nid，刚才通过ps命令看到的tid来<strong>对比定位</strong>，注意jstack查找出的线程id是<strong>16进制的</strong>，<strong>需要转换</strong></p></li></ul></li></ul><h3 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h3><p>一些带有<strong>native关键字</strong>的方法就是需要JAVA去调用本地的C或者C++方法，因为JAVA有时候没法直接和操作系统底层交互，所以需要用到本地方法</p><blockquote><p>例如 object下的<code>clone（）</code>、<code>wait（）</code>方法</p></blockquote><h3 id="4、堆（上面3个都是线程私有的）"><a href="#4、堆（上面3个都是线程私有的）" class="headerlink" title="4、堆（上面3个都是线程私有的）"></a>4、堆（上面3个都是线程私有的）</h3><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><p>通过new关键字<strong>创建的对象</strong>都会被放在堆内存</p><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><ul><li><strong>所有线程共享</strong>，堆内存中的对象都需要<strong>考虑线程安全问题</strong></li><li>有垃圾回收机制</li></ul><h4 id="堆内存溢出"><a href="#堆内存溢出" class="headerlink" title="堆内存溢出"></a>堆内存溢出</h4><p><strong>java.lang.OutofMemoryError</strong> ：java heap space. 堆内存溢出</p><h4 id="堆内存诊断"><a href="#堆内存诊断" class="headerlink" title="堆内存诊断"></a>堆内存诊断</h4><p><strong>jps</strong></p><p><strong>jmap</strong></p><p><strong>jconsole</strong></p><p><strong>jvirsalvm</strong>（经常使用）</p><h3 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150547.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150547.png" alt="img"></a></p><h4 id="内存溢出-1"><a href="#内存溢出-1" class="headerlink" title="内存溢出"></a>内存溢出</h4><ul><li><p>1.8以前会导致<strong>永久代</strong>内存溢出</p></li><li><p>1.8以后会导致<strong>元空间</strong>内存溢出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 演示永久代内存溢出  java.lang.OutOfMemoryError: PermGen space</span><br><span class="hljs-comment"> * -XX:MaxPermSize=8m</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1_8</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ClassLoader</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Demo1_8 test = <span class="hljs-keyword">new</span> Demo1_8();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++, j++) &#123;<br>                ClassWriter cw = <span class="hljs-keyword">new</span> ClassWriter(<span class="hljs-number">0</span>);<br>                cw.visit(Opcodes.V1_6, Opcodes.ACC_PUBLIC, <span class="hljs-string">&quot;Class&quot;</span> + i, <span class="hljs-keyword">null</span>, <span class="hljs-string">&quot;java/lang/Object&quot;</span>, <span class="hljs-keyword">null</span>);<br>                <span class="hljs-keyword">byte</span>[] code = cw.toByteArray();<br>                test.defineClass(<span class="hljs-string">&quot;Class&quot;</span> + i, code, <span class="hljs-number">0</span>, code.length);<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(j);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h4><p>二进制字节码的组成：类的基本信息、常量池、类的方法定义（包含了虚拟机指令）</p><p><strong>通过反编译来查看类的信息</strong></p><ul><li><p>获得对应类的.class文件</p><ul><li><p>在JDK对应的bin目录下运行cmd，<strong>也可以在IDEA控制台输入</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150602.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150602.png" alt="img"></a></p></li><li><p>输入 <strong>javac 对应类的绝对路径</strong></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">F:<span class="hljs-symbol">\J</span>AVA<span class="hljs-symbol">\J</span>DK8.0<span class="hljs-symbol">\b</span>in&gt;javac F:<span class="hljs-symbol">\T</span>hread_study<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\c</span>om<span class="hljs-symbol">\n</span>yima<span class="hljs-symbol">\J</span>VM<span class="hljs-symbol">\d</span>ay01<span class="hljs-symbol">\M</span>ain.javaCopy<br></code></pre></td></tr></table></figure><p>输入完成后，对应的目录下就会出现类的.class文件</p></li></ul></li><li><p>在控制台输入 javap -v 类的绝对路径</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">javap -v F:<span class="hljs-symbol">\T</span>hread_study<span class="hljs-symbol">\s</span>rc<span class="hljs-symbol">\c</span>om<span class="hljs-symbol">\n</span>yima<span class="hljs-symbol">\J</span>VM<span class="hljs-symbol">\d</span>ay01<span class="hljs-symbol">\M</span>ain.classCopy<br></code></pre></td></tr></table></figure></li><li><p>然后能在控制台看到反编译以后类的信息了</p><ul><li><p>类的基本信息</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150618.png" alt="img"></a></p></li><li><p>常量池</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150630.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150641.png" alt="img"></a></p></li><li><p>虚拟机中执行编译的方法（框内的是真正编译执行的内容，**#号的内容需要在常量池中查找**）</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150653.png" alt="img"></a></p></li></ul></li></ul><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><ul><li>常量池<ul><li>就是一张表（如上图中的constant pool），虚常量表找到要执行的类名、方法名、参数类型、字面量信息</li></ul></li><li>运行时常量池<ul><li>常量池是*.class文件中的，当该<strong>类被加载以后</strong>，它的常量池信息就会<strong>放入运行时常量池</strong>，并把里面的<strong>符号地址变为真实地址</strong></li></ul></li></ul><h4 id="常量池与串池的关系"><a href="#常量池与串池的关系" class="headerlink" title="常量池与串池的关系"></a>常量池与串池的关系</h4><h5 id="串池StringTable"><a href="#串池StringTable" class="headerlink" title="串池StringTable"></a><strong>串池</strong>StringTable</h5><p><strong>特征</strong></p><ul><li>常量池中的字符串仅是符号，只有<strong>在被用到时才会转化为对象</strong></li><li>利用串池的机制，来避免重复创建字符串对象</li><li>字符串<strong>变量</strong>拼接的原理是<strong>StringBuilder</strong></li><li>字符串<strong>常量</strong>拼接的原理是<strong>编译器优化</strong></li><li>可以使用<strong>intern方法</strong>，主动将串池中还没有的字符串对象放入串池中</li><li><strong>注意</strong>：无论是串池还是堆里面的字符串，都是对象</li></ul><p>用来放字符串对象且里面的<strong>元素不重复</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTableStudy</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br><span class="hljs-built_in">String</span> a = <span class="hljs-string">&quot;a&quot;</span>; <br><span class="hljs-built_in">String</span> b = <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-built_in">String</span> ab = <span class="hljs-string">&quot;ab&quot;</span>;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>常量池中的信息，都会被加载到运行时常量池中，但这是a b ab 仅是常量池中的符号，<strong>还没有成为java字符串</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">0:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String a</span><br><span class="hljs-attr">2:</span> <span class="hljs-string">astore_1</span><br><span class="hljs-attr">3:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#3                  // String b</span><br><span class="hljs-attr">5:</span> <span class="hljs-string">astore_2</span><br><span class="hljs-attr">6:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#4                  // String ab</span><br><span class="hljs-attr">8:</span> <span class="hljs-string">astore_3</span><br><span class="hljs-attr">9:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><p>当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，<strong>并放入串池中</strong>（hashtable结构 不可扩容）</p><p>当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，并放入串池中</p><p>当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，并放入串池中</p><p>最终<strong>StringTable [“a”, “b”, “ab”]</strong></p><p><strong>注意</strong>：字符串对象的创建都是<strong>懒惰的</strong>，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。</p><p>使用拼接<strong>字符串变量对象</strong>创建字符串的过程</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTableStudy</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br><span class="hljs-built_in">String</span> a = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-built_in">String</span> b = <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-built_in">String</span> ab = <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//拼接字符串对象来创建新的字符串</span><br><span class="hljs-built_in">String</span> ab2 = a+b; <br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2,</span> <span class="hljs-string">locals=5,</span> <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String a</span><br>         <span class="hljs-attr">2:</span> <span class="hljs-string">astore_1</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#3                  // String b</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">astore_2</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#4                  // String ab</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">astore_3</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#5                  // class java/lang/StringBuilder</span><br>        <span class="hljs-attr">12:</span> <span class="hljs-string">dup</span><br>        <span class="hljs-attr">13:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-attr">16:</span> <span class="hljs-string">aload_1</span><br>        <span class="hljs-attr">17:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="hljs-string">;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-attr">20:</span> <span class="hljs-string">aload_2</span><br>        <span class="hljs-attr">21:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="hljs-string">;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-attr">24:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span><br><span class="hljs-string">ing;</span><br>        <span class="hljs-attr">27:</span> <span class="hljs-string">astore</span>        <span class="hljs-number">4</span><br>        <span class="hljs-attr">29:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><p>通过拼接的方式来创建字符串的<strong>过程</strong>是：StringBuilder().append(“a”).append(“b”).toString()</p><p>最后的toString方法的返回值是一个<strong>新的字符串</strong>，但字符串的<strong>值</strong>和拼接的字符串一致，但是两个不同的字符串，<strong>一个存在于串池之中，一个存在于堆内存之中</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nix">String <span class="hljs-attr">ab</span> = <span class="hljs-string">&quot;ab&quot;</span>;<br>String <span class="hljs-attr">ab2</span> = a+b;<br>//结果为<span class="hljs-literal">false</span>,因为ab是存在于串池之中，ab2是由StringBuffer的<span class="hljs-built_in">toString</span>方法所返回的一个对象，存在于堆内存之中<br>System.out.println(<span class="hljs-attr">ab</span> == ab2);Copy<br></code></pre></td></tr></table></figure><p>使用<strong>拼接字符串常量对象</strong>的方法创建字符串</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StringTableStudy</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br><span class="hljs-built_in">String</span> a = <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-built_in">String</span> b = <span class="hljs-string">&quot;b&quot;</span>;<br><span class="hljs-built_in">String</span> ab = <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-built_in">String</span> ab2 = a+b;<br><span class="hljs-comment">//使用拼接字符串的方法创建字符串</span><br><span class="hljs-built_in">String</span> ab3 = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>反编译后的结果</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml">   <span class="hljs-attr">Code:</span><br>      <span class="hljs-string">stack=2,</span> <span class="hljs-string">locals=6,</span> <span class="hljs-string">args_size=1</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String a</span><br>         <span class="hljs-attr">2:</span> <span class="hljs-string">astore_1</span><br>         <span class="hljs-attr">3:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#3                  // String b</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">astore_2</span><br>         <span class="hljs-attr">6:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#4                  // String ab</span><br>         <span class="hljs-attr">8:</span> <span class="hljs-string">astore_3</span><br>         <span class="hljs-attr">9:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#5                  // class java/lang/StringBuilder</span><br>        <span class="hljs-attr">12:</span> <span class="hljs-string">dup</span><br>        <span class="hljs-attr">13:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#6                  // Method java/lang/StringBuilder.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-attr">16:</span> <span class="hljs-string">aload_1</span><br>        <span class="hljs-attr">17:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="hljs-string">;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-attr">20:</span> <span class="hljs-string">aload_2</span><br>        <span class="hljs-attr">21:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String</span><br><span class="hljs-string">;)Ljava/lang/StringBuilder;</span><br>        <span class="hljs-attr">24:</span> <span class="hljs-string">invokevirtual</span> <span class="hljs-comment">#8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/Str</span><br><span class="hljs-string">ing;</span><br>        <span class="hljs-attr">27:</span> <span class="hljs-string">astore</span>        <span class="hljs-number">4</span><br>        <span class="hljs-string">//ab3初始化时直接从串池中获取字符串</span><br>        <span class="hljs-attr">29:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#4                  // String ab</span><br>        <span class="hljs-attr">31:</span> <span class="hljs-string">astore</span>        <span class="hljs-number">5</span><br>        <span class="hljs-attr">33:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><ul><li>使用<strong>拼接字符串常量</strong>的方法来创建新的字符串时，因为<strong>内容是常量，javac在编译期会进行优化，结果已在编译期确定为ab</strong>，而创建ab的时候已经在串池中放入了“ab”，所以ab3直接从串池中获取值，所以进行的操作和 ab = “ab” 一致。</li><li>使用<strong>拼接字符串变量</strong>的方法来创建新的字符串时，因为内容是变量，只能<strong>在运行期确定它的值，所以需要使用StringBuilder来创建</strong></li></ul><h5 id="intern方法-1-8-【盘"><a href="#intern方法-1-8-【盘" class="headerlink" title="intern方法 1.8 【盘"></a>intern方法 1.8 【盘</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，则放入成功</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时如果调用intern方法成功，堆内存与串池中的字符串对象是同一个对象；如果失败，则不是同一个对象</p><p><strong>例1</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class Main &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br><span class="hljs-comment">//&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;a&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-comment">//调用str的intern方法，这时串池中没有&quot;ab&quot;，则会将该字符串对象放入到串池中，此时堆内存与串池中的&quot;ab&quot;是同一个对象</span><br><span class="hljs-keyword">String</span> st2 = <span class="hljs-built_in">str</span>.intern();<br><span class="hljs-comment">//给str3赋值，因为此时串池中已有&quot;ab&quot;，则直接将串池中的内容返回</span><br><span class="hljs-keyword">String</span> str3 = <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-comment">//因为堆内存与串池中的&quot;ab&quot;是同一个对象，所以以下两条语句打印的都为true</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span> == st2);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span> == str3);<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><strong>例2</strong></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class Main &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>        <span class="hljs-comment">//此处创建字符串对象&quot;ab&quot;，因为串池中还没有&quot;ab&quot;，所以将其放入串池中</span><br><span class="hljs-keyword">String</span> str3 = <span class="hljs-string">&quot;ab&quot;</span>;<br>        <span class="hljs-comment">//&quot;a&quot; &quot;b&quot; 被放入串池中，str则存在于堆内存之中</span><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;a&quot;</span>) + <span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(<span class="hljs-string">&quot;b&quot;</span>);<br>        <span class="hljs-comment">//此时因为在创建str3时，&quot;ab&quot;已存在与串池中，所以放入失败，但是会返回串池中的&quot;ab&quot;</span><br><span class="hljs-keyword">String</span> str2 = <span class="hljs-built_in">str</span>.intern();<br>        <span class="hljs-comment">//false</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span> == str2);<br>        <span class="hljs-comment">//false</span><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span> == str3);<br>        <span class="hljs-comment">//true</span><br>System.out.<span class="hljs-built_in">println</span>(str2 == str3);<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h5 id="intern方法-1-6"><a href="#intern方法-1-6" class="headerlink" title="intern方法 1.6"></a>intern方法 1.6</h5><p>调用字符串对象的intern方法，会将该字符串对象尝试放入到串池中</p><ul><li>如果串池中没有该字符串对象，会将该字符串对象复制一份，再放入到串池中</li><li>如果有该字符串对象，则放入失败</li></ul><p>无论放入是否成功，都会返回<strong>串池中</strong>的字符串对象</p><p><strong>注意</strong>：此时无论调用intern方法成功与否，串池中的字符串对象和堆内存中的字符串对象<strong>都不是同一个对象</strong></p><h4 id="StringTable-垃圾回收"><a href="#StringTable-垃圾回收" class="headerlink" title="StringTable 垃圾回收"></a>StringTable 垃圾回收</h4><p>StringTable在内存紧张时，会发生垃圾回收</p><h4 id="StringTable调优"><a href="#StringTable调优" class="headerlink" title="StringTable调优"></a>StringTable调优</h4><ul><li><p>因为StringTable是由HashTable实现的，所以可以<strong>适当增加HashTable桶的个数</strong>，来减少字符串放入串池所需要的时间</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-XX:<span class="hljs-attribute">StringTableSize</span>=xxxxCopy<br></code></pre></td></tr></table></figure></li><li><p>考虑是否需要将字符串对象入池</p><p>可以通过<strong>intern方法减少重复入池</strong></p></li></ul><h3 id="6、直接内存"><a href="#6、直接内存" class="headerlink" title="6、直接内存"></a>6、直接内存</h3><ul><li>属于操作系统，常见于NIO操作时，<strong>用于数据缓冲区</strong></li><li>分配回收成本较高，但读写性能高</li><li>不受JVM内存回收管理</li></ul><h4 id="文件读写流程"><a href="#文件读写流程" class="headerlink" title="文件读写流程"></a>文件读写流程</h4><ul><li><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150715.png" alt="img"></a></p></li><li><p>使用了<strong>DirectBuffer</strong></p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150736.png" alt="img"></a></p><p>直接内存是操作系统和Java代码<strong>都可以访问的一块区域</strong>，无需将代码从系统内存复制到Java堆内存，从而提高了效率</p><h4 id="释放原理"><a href="#释放原理" class="headerlink" title="释放原理"></a>释放原理</h4><p>直接内存的回收不是通过JVM的垃圾回收来释放的，而是通过<strong>unsafe.freeMemory</strong>来手动释放</p><p>通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过ByteBuffer申请1M的直接内存</span><br>ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);Copy<br></code></pre></td></tr></table></figure><p>申请直接内存，但JVM并不能回收直接内存中的内容，它是如何实现回收的呢？</p><p><strong>allocateDirect的实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteBuffer <span class="hljs-title">allocateDirect</span><span class="hljs-params">(<span class="hljs-keyword">int</span> capacity)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DirectByteBuffer(capacity);<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="DirectByteBuffer源码"><a href="#DirectByteBuffer源码" class="headerlink" title="DirectByteBuffer源码"></a>DirectByteBuffer源码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java">DirectByteBuffer(<span class="hljs-keyword">int</span> cap) &#123;   <span class="hljs-comment">// package-private</span><br>   <br>    <span class="hljs-keyword">super</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, cap, cap);<br>    <span class="hljs-keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();<br>    <span class="hljs-keyword">int</span> ps = Bits.pageSize();<br>    <span class="hljs-keyword">long</span> size = Math.max(<span class="hljs-number">1L</span>, (<span class="hljs-keyword">long</span>)cap + (pa ? ps : <span class="hljs-number">0</span>));<br>    Bits.reserveMemory(size, cap);<br><br>    <span class="hljs-keyword">long</span> base = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        base = unsafe.allocateMemory(size); <span class="hljs-comment">//申请内存</span><br>    &#125; <span class="hljs-keyword">catch</span> (OutOfMemoryError x) &#123;<br>        Bits.unreserveMemory(size, cap);<br>        <span class="hljs-keyword">throw</span> x;<br>    &#125;<br>    unsafe.setMemory(base, size, (<span class="hljs-keyword">byte</span>) <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (pa &amp;&amp; (base % ps != <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-comment">// Round up to page boundary</span><br>        address = base + ps - (base &amp; (ps - <span class="hljs-number">1</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        address = base;<br>    &#125;<br>    cleaner = Cleaner.create(<span class="hljs-keyword">this</span>, <span class="hljs-keyword">new</span> Deallocator(base, size, cap)); <span class="hljs-comment">//通过虚引用，来实现直接内存的释放，this为虚引用的实际对象</span><br>    att = <span class="hljs-keyword">null</span>;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>这里调用了一个Cleaner的create方法，且后台线程还会对虚引用的对象监测，如果虚引用的实际对象（这里是DirectByteBuffer）被回收以后，就会调用Cleaner的clean方法，来清除直接内存中占用的内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clean</span><span class="hljs-params">()</span> </span>&#123;<br>       <span class="hljs-keyword">if</span> (remove(<span class="hljs-keyword">this</span>)) &#123;<br>           <span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-keyword">this</span>.thunk.run(); <span class="hljs-comment">//调用run方法</span><br>           &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-keyword">final</span> Throwable var2) &#123;<br>               AccessController.doPrivileged(<span class="hljs-keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;<br>                   <span class="hljs-function"><span class="hljs-keyword">public</span> Void <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>                       <span class="hljs-keyword">if</span> (System.err != <span class="hljs-keyword">null</span>) &#123;<br>                           (<span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Cleaner terminated abnormally&quot;</span>, var2)).printStackTrace();<br>                       &#125;<br><br>                       System.exit(<span class="hljs-number">1</span>);<br>                       <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>                   &#125;<br>               &#125;);<br>           &#125;Copy<br></code></pre></td></tr></table></figure><p>对应对象的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (address == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// Paranoia</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    unsafe.freeMemory(address); <span class="hljs-comment">//释放直接内存中占用的内存</span><br>    address = <span class="hljs-number">0</span>;<br>    Bits.unreserveMemory(size, capacity);<br>&#125;Copy<br></code></pre></td></tr></table></figure><h5 id="直接内存的回收机制总结"><a href="#直接内存的回收机制总结" class="headerlink" title="直接内存的回收机制总结"></a>直接内存的回收机制总结</h5><ul><li>使用了Unsafe类来完成直接内存的分配回收，回收需要主动调用freeMemory方法</li><li>ByteBuffer的实现内部使用了Cleaner（虚引用）来检测ByteBuffer。一旦ByteBuffer被垃圾回收，那么会由ReferenceHandler来调用Cleaner的clean方法调用freeMemory来释放内存</li></ul><h2 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h2><h3 id="1、如何判断对象可以回收"><a href="#1、如何判断对象可以回收" class="headerlink" title="1、如何判断对象可以回收"></a>1、如何判断对象可以回收</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150750.png" alt="img"></a></p><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><ul><li>JVM中的垃圾回收器通过<strong>可达性分析</strong>来探索所有存活的对象</li><li>扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果<strong>找不到，则表示可以回收</strong></li><li>可以作为GC Root的对象<ul><li>Java 虚拟机栈（栈帧中的本地变量表）中引用的对象</li><li>本地方法栈中引用的对象</li><li>方法区中常量引用的对象</li><li>方法区中类静态属性引用的对象</li></ul></li></ul><h4 id="五种引用"><a href="#五种引用" class="headerlink" title="五种引用"></a>五种引用</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150800.png" alt="img"></a></p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><p>只有GC Root<strong>都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象</p><ul><li>如上图B、C对象都不引用A1对象时，A1对象才会被回收</li></ul><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>当GC Root指向软引用对象时，在<strong>内存不足时</strong>，会<strong>回收软引用所引用的对象</strong></p><ul><li>如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收</li></ul><h6 id="软引用的使用"><a href="#软引用的使用" class="headerlink" title="软引用的使用"></a>软引用的使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> _4M = <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> SoftReference&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[_4M]);<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，<strong>软引用本身不会被清理</strong></p><p>如果想要<strong>清理软引用</strong>，需要使<strong>用引用队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> _4M = <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用引用队列，用于移除引用为空的软引用对象</span><br>ReferenceQueue&lt;<span class="hljs-keyword">byte</span>[]&gt; queue = <span class="hljs-keyword">new</span> ReferenceQueue&lt;&gt;();<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> SoftReference&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[_4M]);<br><br><span class="hljs-comment">//遍历引用队列，如果有元素，则移除</span><br>Reference&lt;? extends <span class="hljs-keyword">byte</span>[]&gt; poll = queue.poll();<br><span class="hljs-keyword">while</span>(poll != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">//引用队列不为空，则从集合中移除该元素</span><br>list.remove(poll);<br><span class="hljs-comment">//移动到引用队列中的下一个元素</span><br>poll = queue.poll();<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><strong>大概思路为：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>只有弱引用引用该对象时，在垃圾回收时，<strong>无论内存是否充足</strong>，都会回收弱引用所引用的对象</p><ul><li>如上图如果B对象不再引用A3对象，则A3对象会被回收</li></ul><p><strong>弱引用的使用和软引用类似</strong>，只是将 <strong>SoftReference 换为了 WeakReference</strong></p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><strong>虚引用</strong></h5><p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法</p><ul><li>虚引用的一个体现是<strong>释放直接内存所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</li></ul><h5 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h5><p>所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了</li></ul><h5 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h5><ul><li>软引用和弱引用<strong>可以配合</strong>引用队列<ul><li>在<strong>弱引用</strong>和<strong>虚引用</strong>所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软/弱引用对象</li></ul></li><li>虚引用和终结器引用<strong>必须配合</strong>引用队列<ul><li>虚引用和终结器引用在使用时会关联一个引用队列</li></ul></li></ul><h3 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a>2、垃圾回收算法</h3><h4 id="标记-清除"><a href="#标记-清除" class="headerlink" title="标记-清除"></a>标记-清除</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150813.png" alt="img"></a></p><p><strong>定义</strong>：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间</p><ul><li>这里的腾出内存空间并不是将内存空间的字节清0，而是记录下这段内存的起始结束地址，下次分配内存的时候，会直接<strong>覆盖</strong>这段内存</li></ul><p><strong>缺点</strong>：<strong>容易产生大量的内存碎片</strong>，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致jvm启动gc，一旦启动gc，我们的应用程序就会暂停，这就导致应用的响应速度变慢</p><h4 id="标记-整理"><a href="#标记-整理" class="headerlink" title="标记-整理"></a>标记-整理</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150827.png" alt="img"></a></p><p>标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题。</p><p>缺点：但是因为整体需要消耗一定的时间，所以效率较低</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150842.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150856.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150856.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150907.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150919.png" alt="img"></a></p><p>将内存分为等大小的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。这样也可以避免内存碎片的问题，但是会占用双倍的内存空间。</p><h3 id="3、分代回收"><a href="#3、分代回收" class="headerlink" title="3、分代回收"></a>3、分代回收</h3><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150931.png" alt="img"></a></p><h4 id="回收流程"><a href="#回收流程" class="headerlink" title="回收流程"></a>回收流程</h4><p>新创建的对象都被放在了<strong>新生代的伊甸园</strong>中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150939.png" alt="img"></a></p><p>当伊甸园中的内存不足时，就会进行一次垃圾回收，这时的回收叫做 <strong>Minor GC</strong></p><p>Minor GC 会将<strong>伊甸园和幸存区FROM</strong>存活的对象<strong>先</strong>复制到 <strong>幸存区 TO</strong>中， 并让其<strong>寿命加1</strong>，再<strong>交换两个幸存区</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150946.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608150955.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151002.png" alt="img"></a></p><p>再次创建对象，若新生代的伊甸园又满了，则会<strong>再次触发 Minor GC</strong>（会触发 <strong>stop the world</strong>， 暂停其他用户线程，只让垃圾回收线程工作），这时不仅会回收伊甸园中的垃圾，<strong>还会回收幸存区中的垃圾</strong>，再将活跃对象复制到幸存区TO中。回收以后会交换两个幸存区，并让幸存区中的对象<strong>寿命加1</strong></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151010.png" alt="img"></a></p><p>如果幸存区中的对象的<strong>寿命超过某个阈值</strong>（最大为15，4bit），就会被<strong>放入老年代</strong>中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151018.png" alt="img"></a></p><p>如果新生代老年代中的内存都满了，就会先触发Minor GC，再触发<strong>Full GC</strong>，扫描<strong>新生代和老年代中</strong>所有不再使用的对象并回收</p><p>总结：</p><ul><li>对象首先分配在伊甸园区域</li><li>新生代空间不足时，触发 minor gc，伊甸园和 from 存活的对象使用 copy 复制到 to 中，存活的对象年龄加 1并且交换 from tominor gc 会引发 stop the world，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行</li><li>当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（4bit）</li><li>当老年代空间不足，会先尝试触发 minor gc，如果之后空间仍不足，那么触发 full gc，STW的时<br>间更长</li></ul><h4 id="GC-分析"><a href="#GC-分析" class="headerlink" title="GC 分析"></a>GC 分析</h4><h5 id="VM相关参数"><a href="#VM相关参数" class="headerlink" title="VM相关参数"></a>VM相关参数</h5><p><img src="/2021/10/18/JVM/image-20211019110615786.png" alt="image-20211019110615786"></p><h5 id="大对象处理策略"><a href="#大对象处理策略" class="headerlink" title="大对象处理策略"></a>大对象处理策略</h5><p>当遇到一个<strong>较大的对象</strong>时，就算新生代的<strong>伊甸园</strong>为空，也<strong>无法容纳该对象</strong>时，会将该对象<strong>直接晋升为老年代</strong></p><h5 id="线程内存溢出"><a href="#线程内存溢出" class="headerlink" title="线程内存溢出"></a>线程内存溢出</h5><p>某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行</p><p>这是因为当一个线程<strong>抛出OOM异常后</strong>，<strong>它所占据的内存资源会全部被释放掉</strong>，从而不会影响其他线程的运行，<strong>进程依然正常</strong></p><h3 id="4、垃圾回收器"><a href="#4、垃圾回收器" class="headerlink" title="4、垃圾回收器"></a>4、垃圾回收器</h3><h4 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h4><p><strong>并行收集</strong>：指多条垃圾收集线程并行工作，但此时<strong>用户线程仍处于等待状态</strong>。</p><p><strong>并发收集</strong>：指用户线程与垃圾收集线程<strong>同时工作</strong>（不一定是并行的可能会交替执行）。<strong>用户程序在继续运行</strong>，而垃圾收集程序运行在另一个CPU上</p><p><strong>吞吐量</strong>：即CPU用于<strong>运行用户代码的时间</strong>与CPU<strong>总消耗时间</strong>的比值（吞吐量 = 运行用户代码时间 / ( 运行用户代码时间 + 垃圾收集时间 )），也就是。例如：虚拟机共运行100分钟，垃圾收集器花掉1分钟，那么吞吐量就是99%</p><h4 id="串行"><a href="#串行" class="headerlink" title="串行"></a>串行</h4><ul><li>单线程</li><li>内存较小，个人电脑（CPU核数较少）</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151027.png" alt="img"></a></p><p><strong>安全点</strong>：让其他线程都在这个点停下来，以免垃圾回收时移动对象地址，使得其他线程找不到被移动的对象</p><p>因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入<strong>阻塞</strong>状态</p><h5 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h5><p>Serial收集器是最基本的、发展历史最悠久的收集器</p><p><strong>特点：</strong>单线程、简单高效（与其他收集器的单线程相比），采用<strong>复制算法</strong>。对于限定单个CPU的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程手机效率。收集器进行垃圾回收时，必须暂停其他所有的工作线程，直到它结束（Stop The World）</p><h5 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h5><p>ParNew收集器其实就是Serial收集器的多线程版本</p><p><strong>特点</strong>：多线程、ParNew收集器默认开启的收集线程数与CPU的数量相同，在CPU非常多的环境中，可以使用-XX:ParallelGCThreads参数来限制垃圾收集的线程数。和Serial收集器一样存在Stop The World问题</p><h5 id="Serial-Old-收集器"><a href="#Serial-Old-收集器" class="headerlink" title="Serial Old 收集器"></a>Serial Old 收集器</h5><p>Serial Old是Serial收集器的老年代版本</p><p><strong>特点</strong>：同样是单线程收集器，采用<strong>标记-整理算法</strong></p><h4 id="吞吐量优先"><a href="#吞吐量优先" class="headerlink" title="吞吐量优先"></a>吞吐量优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>单位时间内，STW（stop the world，停掉其他所有工作线程）时间最短</li><li><strong>JDK1.8默认使用</strong>的垃圾回收器</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151039.png" alt="img"></a></p><h5 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h5><p>与吞吐量关系密切，故也称为吞吐量优先收集器</p><p><strong>特点</strong>：属于新生代收集器也是采用<strong>复制算法</strong>的收集器（用到了新生代的幸存区），又是并行的多线程收集器（与ParNew收集器类似）</p><p>该收集器的目标是达到一个可控制的吞吐量。还有一个值得关注的点是：<strong>GC自适应调节策略</strong>（与ParNew收集器最重要的一个区别）</p><p><strong>GC自适应调节策略</strong>：Parallel Scavenge收集器可设置-XX:+UseAdptiveSizePolicy参数。当开关打开时<strong>不需要</strong>手动指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等，虚拟机会根据系统的运行状况收集性能监控信息，动态设置这些参数以提供最优的停顿时间和最高的吞吐量，这种调节方式称为GC的自适应调节策略。</p><p>Parallel Scavenge收集器使用两个参数控制吞吐量：</p><ul><li>XX:MaxGCPauseMillis 控制最大的垃圾收集停顿时间</li><li>XX:GCRatio 直接设置吞吐量的大小</li></ul><h5 id="Parallel-Old-收集器"><a href="#Parallel-Old-收集器" class="headerlink" title="Parallel Old 收集器"></a><strong>Parallel Old 收集器</strong></h5><p>是Parallel Scavenge收集器的老年代版本</p><p><strong>特点</strong>：多线程，采用<strong>标记-整理算法</strong>（老年代没有幸存区）</p><h4 id="响应时间优先"><a href="#响应时间优先" class="headerlink" title="响应时间优先"></a>响应时间优先</h4><ul><li>多线程</li><li>堆内存较大，多核CPU</li><li>尽可能让<strong>单次</strong>STW时间变短（尽量不影响其他线程运行）</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151052.png" alt="img"></a></p><h5 id="CMS-收集器"><a href="#CMS-收集器" class="headerlink" title="CMS 收集器"></a>CMS 收集器</h5><p>Concurrent Mark Sweep，一种以获取<strong>最短回收停顿时间</strong>为目标的<strong>老年代</strong>收集器</p><p><strong>特点</strong>：基于<strong>标记-清除算法</strong>实现。并发收集、低停顿，但是会产生内存碎片</p><p><strong>应用场景</strong>：适用于注重服务的响应速度，希望系统停顿时间最短，给用户带来更好的体验等场景下。如web程序、b/s服务</p><p><strong>CMS收集器的运行过程分为下列4步：</strong></p><p><strong>初始标记</strong>：标记GC Roots能直接到的对象。速度很快但是<strong>仍存在Stop The World问题</strong></p><p><strong>并发标记</strong>：进行GC Roots Tracing 的过程，找出存活对象且用户线程可并发执行</p><p><strong>重新标记</strong>：为了<strong>修正并发标记期间</strong>因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录。仍然存在Stop The World问题</p><p><strong>并发清除</strong>：对标记的对象进行清除回收</p><p>CMS收集器的内存回收过程是与用户线程一起<strong>并发执行</strong>的</p><h4 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a><strong>定义</strong>：</h5><p>Garbage First</p><p>JDK 9以后默认使用，而且替代了CMS 收集器</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200909201212.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200909201212.png" alt="img"></a></p><h5 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h5><ul><li>同时注重吞吐量和低延迟（响应时间）</li><li>超大堆内存（内存大的），会将堆内存划分为多个<strong>大小相等</strong>的区域</li><li>整体上是<strong>标记-整理</strong>算法，两个区域之间是<strong>复制</strong>算法</li></ul><p><strong>相关参数</strong>：JDK8 并不是默认开启的，所需要参数开启</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151100.png" alt="img"></a></p><h5 id="G1垃圾回收阶段"><a href="#G1垃圾回收阶段" class="headerlink" title="G1垃圾回收阶段"></a>G1垃圾回收阶段</h5><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151109.png" alt="img"></a></p><p>新生代伊甸园垃圾回收—–&gt;内存不足，新生代回收+并发标记—–&gt;回收新生代伊甸园、幸存区、老年代内存——&gt;新生代伊甸园垃圾回收(重新开始)</p><h5 id="Young-Collection"><a href="#Young-Collection" class="headerlink" title="Young Collection"></a>Young Collection</h5><p><strong>分区算法region</strong></p><p>分代是按对象的生命周期划分，分区则是将堆空间划分连续几个不同小区间，每一个小区间独立回收，可以控制一次回收多少个小区间，方便控制 GC 产生的停顿时间</p><p>E：伊甸园 S：幸存区 O：老年代</p><ul><li>会STW</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151119.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151129.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151140.png" alt="img"></a></p><h5 id="Young-Collection-CM"><a href="#Young-Collection-CM" class="headerlink" title="Young Collection + CM"></a>Young Collection + CM</h5><p>CM：并发标记</p><ul><li>在 Young GC 时会<strong>对 GC Root 进行初始标记</strong></li><li>在老年代<strong>占用堆内存的比例</strong>达到阈值时，对进行并发标记（不会STW），阈值可以根据用户来进行设定</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151150.png" alt="img"></a></p><h5 id="Mixed-Collection"><a href="#Mixed-Collection" class="headerlink" title="Mixed Collection"></a>Mixed Collection</h5><p>会对E S O 进行<strong>全面的回收</strong></p><ul><li>最终标记</li><li><strong>拷贝</strong>存活</li></ul><p>-XX:MaxGCPauseMills:xxx 用于指定最长的停顿时间</p><p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p><p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<strong>回收最有价值的老年代</strong>（回收后，能够得到更多内存）</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151201.png" alt="img"></a></p><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>G1在老年代内存不足时（老年代所占内存超过阈值）</p><ul><li>如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理</li><li>如果垃圾产生速度快于垃圾回收速度，便会触发Full GC</li></ul><h5 id="Young-Collection-跨代引用"><a href="#Young-Collection-跨代引用" class="headerlink" title="Young Collection 跨代引用"></a>Young Collection 跨代引用</h5><ul><li>新生代回收的跨代引用（老年代引用新生代）问题</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151211.png" alt="img"></a></p><ul><li>卡表与Remembered Set<ul><li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul><li>脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li></ul></li></ul></li><li>在引用变更时通过post-write barried + dirty card queue</li><li>concurrent refinement threads 更新 Remembered Set</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151222.png" alt="img"></a></p><h5 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a>Remark</h5><p>重新标记阶段</p><p>在垃圾回收时，收集器处理对象的过程中</p><p>黑色：已被处理，需要保留的 灰色：正在处理中的 白色：还未处理的</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151229.png" alt="img"></a></p><p>但是在<strong>并发标记过程中</strong>，有可能A被处理了以后未引用C，但该处理过程还未结束，在处理过程结束之前A引用了C，这时就会用到remark</p><p>过程如下</p><ul><li>之前C未被引用，这时A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，将C放入一个队列当中，并将C变为 处理中 状态</li><li>在<strong>并发标记</strong>阶段结束以后，重新标记阶段会STW，然后将放在该队列中的对象重新处理，发现有强引用引用它，就会处理它</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151239.png" alt="img"></a></p><h5 id="JDK-8u20-字符串去重"><a href="#JDK-8u20-字符串去重" class="headerlink" title="JDK 8u20 字符串去重"></a>JDK 8u20 字符串去重</h5><p>过程</p><ul><li>将所有新分配的字符串（底层是char[]）放入一个队列</li><li>当新生代回收时，G1并发检查是否有重复的字符串</li><li>如果字符串的值一样，就让他们<strong>引用同一个字符串对象</strong></li><li>注意，其与String.intern的区别<ul><li>intern关注的是字符串对象</li><li>字符串去重关注的是char[]</li><li>在JVM内部，使用了不同的字符串标</li></ul></li></ul><p>优点与缺点</p><ul><li>节省了大量内存</li><li>新生代回收时间略微增加，导致略微多占用CPU</li></ul><h5 id="JDK-8u40-并发标记类卸载"><a href="#JDK-8u40-并发标记类卸载" class="headerlink" title="JDK 8u40 并发标记类卸载"></a>JDK 8u40 并发标记类卸载</h5><p>在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类</p><h5 id="JDK-8u60-回收巨型对象"><a href="#JDK-8u60-回收巨型对象" class="headerlink" title="JDK 8u60 回收巨型对象"></a>JDK 8u60 回收巨型对象</h5><ul><li>一个对象大于region的一半时，就称为巨型对象</li><li>G1不会对巨型对象进行拷贝</li><li>回收时被优先考虑</li><li>G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在新生代垃圾回收时处理掉</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151249.png" alt="img"></a></p><h3 id="5、GC-调优"><a href="#5、GC-调优" class="headerlink" title="5、GC 调优"></a>5、GC 调优</h3><p>查看虚拟机参数命令</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&quot;F:\JAVA\JDK8.0\bin\java&quot; -XX:+PrintFlagsFinal -<span class="hljs-keyword">version</span> | findstr &quot;GC&quot;<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>可以根据参数去查询具体的信息</p><h4 id="调优领域"><a href="#调优领域" class="headerlink" title="调优领域"></a>调优领域</h4><ul><li>内存</li><li>锁竞争</li><li>CPU占用</li><li>IO</li><li>GC</li></ul><h4 id="确定目标"><a href="#确定目标" class="headerlink" title="确定目标"></a>确定目标</h4><p>低延迟/高吞吐量？ 选择合适的GC</p><ul><li>CMS G1 ZGC</li><li>ParallelGC</li><li>Zing</li></ul><h4 id="最快的GC是不发生GC"><a href="#最快的GC是不发生GC" class="headerlink" title="最快的GC是不发生GC"></a>最快的GC是不发生GC</h4><p>首先排除减少因为自身编写的代码而引发的内存问题</p><ul><li>查看Full GC前后的内存占用，考虑以下几个问题<ul><li>数据是不是太多？</li><li>数据表示是否太臃肿<ul><li>对象图</li><li>对象大小</li></ul></li><li>是否存在内存泄漏</li></ul></li></ul><h4 id="新生代调优"><a href="#新生代调优" class="headerlink" title="新生代调优"></a>新生代调优</h4><ul><li>新生代的特点<ul><li>所有的new操作分配内存都是非常廉价的<ul><li>TLAB</li></ul></li><li>死亡对象回收零代价</li><li>大部分对象用过即死（朝生夕死）</li><li>MInor GC 所用时间远小于Full GC</li></ul></li><li>新生代内存越大越好么？<ul><li>不是<ul><li>新生代内存太小：频繁触发Minor GC，会STW，会使得吞吐量下降</li><li>新生代内存太大：老年代内存占比有所降低，会更频繁地触发Full GC。而且触发Minor GC时，清理新生代所花费的时间会更长</li></ul></li><li>新生代内存设置为内容纳[并发量*(请求-响应)]的数据为宜</li></ul></li></ul><h4 id="幸存区调优"><a href="#幸存区调优" class="headerlink" title="幸存区调优"></a>幸存区调优</h4><ul><li>幸存区需要能够保存 <strong>当前活跃对象</strong>+<strong>需要晋升的对象</strong></li><li>晋升阈值配置得当，让长时间存活的对象尽快晋升</li></ul><h4 id="老年代调优"><a href="#老年代调优" class="headerlink" title="老年代调优"></a>老年代调优</h4><ul><li>以 CMS 为例</li><li>CMS 的老年代内存越大越好</li><li>先尝试不做调优，如果没有 Full GC 那么已经…，否则先尝试调优新生代观察发生 Full GC 时老年代内存占用，将老年代内存预设调大 1/4 ~ 1/3</li><li>-XX:CMSInitiatingOccupancyFraction=percent</li></ul><h2 id="四、类加载与字节码技术"><a href="#四、类加载与字节码技术" class="headerlink" title="四、类加载与字节码技术"></a>四、类加载与字节码技术</h2><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151300.png" alt="img"></a></p><h3 id="1、类文件结构"><a href="#1、类文件结构" class="headerlink" title="1、类文件结构"></a>1、类文件结构</h3><p>首先获得.class字节码文件</p><p>方法：</p><ul><li>在文本文档里写入java代码（文件名与类名一致），将文件类型改为.java</li><li>java终端中，执行javac X:…\XXX.java</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200910155135.png" alt="img"></a></p><p>以下是字节码文件</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0000000</span> ca fe ba be <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">34</span> <span class="hljs-number">00</span> <span class="hljs-number">23</span> <span class="hljs-number">0</span>a <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">15</span> <span class="hljs-number">09</span> <br><span class="hljs-attribute">0000020</span> <span class="hljs-number">00</span> <span class="hljs-number">16</span> <span class="hljs-number">00</span> <span class="hljs-number">17</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">18</span> <span class="hljs-number">0</span>a <span class="hljs-number">00</span> <span class="hljs-number">19</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>a <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>b <span class="hljs-number">07</span> <br><span class="hljs-attribute">0000040</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>c <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">3</span>c <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">3</span>e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">28</span> <span class="hljs-number">29</span> <br><span class="hljs-attribute">0000060</span> <span class="hljs-number">56</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">43</span> <span class="hljs-number">6</span>f <span class="hljs-number">64</span> <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>f <span class="hljs-number">4</span>c <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">65</span> <span class="hljs-number">4</span>e <br><span class="hljs-attribute">0000100</span> <span class="hljs-number">75</span> <span class="hljs-number">6</span>d <span class="hljs-number">62</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-number">6</span>c <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> <span class="hljs-number">4</span>c <span class="hljs-number">6</span>f <span class="hljs-number">63</span> <br><span class="hljs-attribute">0000120</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span>c <span class="hljs-number">56</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-number">6</span>c <span class="hljs-number">65</span> <span class="hljs-number">54</span> <span class="hljs-number">61</span> <span class="hljs-number">62</span> <span class="hljs-number">6</span>c <span class="hljs-number">65</span> <span class="hljs-number">01</span> <br><span class="hljs-attribute">0000140</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">69</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>d <span class="hljs-number">4</span>c <span class="hljs-number">63</span> <span class="hljs-number">6</span>e <span class="hljs-number">2</span>f <span class="hljs-number">69</span> <span class="hljs-number">74</span> <span class="hljs-number">63</span> <br><span class="hljs-attribute">0000160</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>a <span class="hljs-number">76</span> <span class="hljs-number">6</span>d <span class="hljs-number">2</span>f <span class="hljs-number">74</span> <span class="hljs-number">35</span> <span class="hljs-number">2</span>f <span class="hljs-number">48</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>c <span class="hljs-number">6</span>f <br><span class="hljs-attribute">0000200</span> <span class="hljs-number">57</span> <span class="hljs-number">6</span>f <span class="hljs-number">72</span> <span class="hljs-number">6</span>c <span class="hljs-number">64</span> <span class="hljs-number">3</span>b <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">6</span>d <span class="hljs-number">61</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">16</span> <br><span class="hljs-attribute">0000220</span> <span class="hljs-number">28</span> <span class="hljs-number">5</span>b <span class="hljs-number">4</span>c <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>c <span class="hljs-number">61</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">2</span>f <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <br><span class="hljs-attribute">0000240</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">3</span>b <span class="hljs-number">29</span> <span class="hljs-number">56</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">67</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">13</span> <br><span class="hljs-attribute">0000260</span> <span class="hljs-number">5</span>b <span class="hljs-number">4</span>c <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>c <span class="hljs-number">61</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">2</span>f <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <br><span class="hljs-attribute">0000300</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">3</span>b <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">4</span>d <span class="hljs-number">65</span> <span class="hljs-number">74</span> <span class="hljs-number">68</span> <span class="hljs-number">6</span>f <span class="hljs-number">64</span> <span class="hljs-number">50</span> <span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">61</span> <br><span class="hljs-attribute">0000320</span> <span class="hljs-number">6</span>d <span class="hljs-number">65</span> <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">72</span> <span class="hljs-number">73</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>a <span class="hljs-number">53</span> <span class="hljs-number">6</span>f <span class="hljs-number">75</span> <span class="hljs-number">72</span> <span class="hljs-number">63</span> <span class="hljs-number">65</span> <span class="hljs-number">46</span> <br><span class="hljs-attribute">0000340</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>c <span class="hljs-number">65</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>f <span class="hljs-number">48</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>c <span class="hljs-number">6</span>f <span class="hljs-number">57</span> <span class="hljs-number">6</span>f <span class="hljs-number">72</span> <span class="hljs-number">6</span>c <span class="hljs-number">64</span><br><span class="hljs-attribute">0000360</span> <span class="hljs-number">2</span>e <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>d <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">1</span>e <br><span class="hljs-attribute">0000400</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>f <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>b <span class="hljs-number">68</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>c <span class="hljs-number">6</span>f <span class="hljs-number">20</span> <span class="hljs-number">77</span> <span class="hljs-number">6</span>f <span class="hljs-number">72</span> <span class="hljs-number">6</span>c <span class="hljs-number">64</span> <br><span class="hljs-attribute">0000420</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">20</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">21</span> <span class="hljs-number">00</span> <span class="hljs-number">22</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">1</span>b <span class="hljs-number">63</span> <span class="hljs-number">6</span>e <span class="hljs-number">2</span>f <span class="hljs-number">69</span> <span class="hljs-number">74</span> <br><span class="hljs-attribute">0000440</span> <span class="hljs-number">63</span> <span class="hljs-number">61</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>a <span class="hljs-number">76</span> <span class="hljs-number">6</span>d <span class="hljs-number">2</span>f <span class="hljs-number">74</span> <span class="hljs-number">35</span> <span class="hljs-number">2</span>f <span class="hljs-number">48</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>c <br><span class="hljs-attribute">0000460</span> <span class="hljs-number">6</span>f <span class="hljs-number">57</span> <span class="hljs-number">6</span>f <span class="hljs-number">72</span> <span class="hljs-number">6</span>c <span class="hljs-number">64</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>c <span class="hljs-number">61</span> <br><span class="hljs-attribute">0000500</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">2</span>f <span class="hljs-number">4</span>f <span class="hljs-number">62</span> <span class="hljs-number">6</span>a <span class="hljs-number">65</span> <span class="hljs-number">63</span> <span class="hljs-number">74</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <br><span class="hljs-attribute">0000520</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>c <span class="hljs-number">61</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">2</span>f <span class="hljs-number">53</span> <span class="hljs-number">79</span> <span class="hljs-number">73</span> <span class="hljs-number">74</span> <span class="hljs-number">65</span> <span class="hljs-number">6</span>d <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">03</span> <span class="hljs-number">6</span>f <br><span class="hljs-attribute">0000540</span> <span class="hljs-number">75</span> <span class="hljs-number">74</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">15</span> <span class="hljs-number">4</span>c <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">69</span> <span class="hljs-number">6</span>f <span class="hljs-number">2</span>f <span class="hljs-number">50</span> <span class="hljs-number">72</span> <br><span class="hljs-attribute">0000560</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">74</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">65</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span>d <span class="hljs-number">3</span>b <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">13</span> <span class="hljs-number">6</span>a <span class="hljs-number">61</span> <span class="hljs-number">76</span> <br><span class="hljs-attribute">0000600</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">69</span> <span class="hljs-number">6</span>f <span class="hljs-number">2</span>f <span class="hljs-number">50</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">74</span> <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">65</span> <span class="hljs-number">61</span> <span class="hljs-number">6</span>d <br><span class="hljs-attribute">0000620</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">70</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">74</span> <span class="hljs-number">6</span>c <span class="hljs-number">6</span>e <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">15</span> <span class="hljs-number">28</span> <span class="hljs-number">4</span>c <span class="hljs-number">6</span>a <br><span class="hljs-attribute">0000640</span> <span class="hljs-number">61</span> <span class="hljs-number">76</span> <span class="hljs-number">61</span> <span class="hljs-number">2</span>f <span class="hljs-number">6</span>c <span class="hljs-number">61</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">2</span>f <span class="hljs-number">53</span> <span class="hljs-number">74</span> <span class="hljs-number">72</span> <span class="hljs-number">69</span> <span class="hljs-number">6</span>e <span class="hljs-number">67</span> <span class="hljs-number">3</span>b <br><span class="hljs-attribute">0000660</span> <span class="hljs-number">29</span> <span class="hljs-number">56</span> <span class="hljs-number">00</span> <span class="hljs-number">21</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <br><span class="hljs-attribute">0000700</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">2</span>f <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <br><span class="hljs-attribute">0000720</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">2</span>a b<span class="hljs-number">7</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> b<span class="hljs-number">1</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>a <span class="hljs-number">00</span> <br><span class="hljs-attribute">0000740</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>b <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <br><span class="hljs-attribute">0000760</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">0</span>d <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>e <span class="hljs-number">00</span> <br><span class="hljs-attribute">0001000</span> <span class="hljs-number">0</span>f <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">37</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">0001020</span> <span class="hljs-number">09</span> b<span class="hljs-number">2</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">12</span> <span class="hljs-number">03</span> b<span class="hljs-number">6</span> <span class="hljs-number">00</span> <span class="hljs-number">04</span> b<span class="hljs-number">1</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>a <br><span class="hljs-attribute">0001040</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>a <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">08</span> <span class="hljs-number">00</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>b <br><span class="hljs-attribute">0001060</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">0</span>c <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">09</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span> <span class="hljs-number">11</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">0001100</span> <span class="hljs-number">00</span> <span class="hljs-number">12</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">05</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">10</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">13</span> <span class="hljs-number">00</span> <br><span class="hljs-attribute">0001120</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">14</span>Copy<br></code></pre></td></tr></table></figure><p>根据 JVM 规范，<strong>类文件结构</strong>如下</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs abnf">u4  magic<br>u2             minor_version<span class="hljs-comment">;    </span><br>u2             major_version<span class="hljs-comment">;    </span><br>u2             constant_pool_count<span class="hljs-comment">;    </span><br>cp_info        constant_pool[constant_pool_count-<span class="hljs-number">1</span>]<span class="hljs-comment">;    </span><br>u2             access_flags<span class="hljs-comment">;    </span><br>u2             this_class<span class="hljs-comment">;    </span><br>u2             super_class<span class="hljs-comment">;   </span><br>u2             interfaces_count<span class="hljs-comment">;    </span><br>u2             interfaces[interfaces_count]<span class="hljs-comment">;   </span><br>u2             fields_count<span class="hljs-comment">;    </span><br>field_info     fields[fields_count]<span class="hljs-comment">;   </span><br>u2             methods_count<span class="hljs-comment">;    </span><br>method_info    methods[methods_count]<span class="hljs-comment">;    </span><br>u2             attributes_count<span class="hljs-comment">;    </span><br>attribute_info attributes[attributes_count]<span class="hljs-comment">;Copy</span><br></code></pre></td></tr></table></figure><h4 id="魔数"><a href="#魔数" class="headerlink" title="魔数"></a>魔数</h4><p>u4 magic</p><p>对应字节码文件的0~3个字节</p><p>0000000 <strong>ca fe ba be</strong> 00 00 00 34 00 23 0a 00 06 00 15 09</p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><p>u2 minor_version;</p><p>u2 major_version;</p><p>0000000 ca fe ba be <strong>00 00 00 34</strong> 00 23 0a 00 06 00 15 09</p><p>34H = 52，代表JDK8</p><h4 id="常量池-1"><a href="#常量池-1" class="headerlink" title="常量池"></a>常量池</h4><p>见资料文件</p><p>…略</p><h3 id="2、字节码指令"><a href="#2、字节码指令" class="headerlink" title="2、字节码指令"></a>2、字节码指令</h3><p>可参考</p><p><a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-6.html#jvms-6.5</a></p><h4 id="javap工具"><a href="#javap工具" class="headerlink" title="javap工具"></a>javap工具</h4><p>Oracle 提供了 <strong>javap</strong> 工具来反编译 class 文件</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs lasso">javap <span class="hljs-params">-v</span> F:\Thread_study\src\com\nyima\JVM\day01\Main.classCopy<br>F:\Thread_study&gt;javap <span class="hljs-params">-v</span> F:\Thread_study\src\com\nyima\JVM\day5\Demo1.class<br>Classfile /F:/Thread_study/src/com/nyima/JVM/day5/Demo1.class<br>  Last modified <span class="hljs-number">2020</span><span class="hljs-number">-6</span><span class="hljs-number">-6</span>; size <span class="hljs-number">434</span> <span class="hljs-built_in">bytes</span><br>  MD5 checksum df1dce65bf6fb0b4c1de318051f4a67e<br>  Compiled from <span class="hljs-string">&quot;Demo1.java&quot;</span><br><span class="hljs-keyword">public</span> class com.nyima.JVM.day5.Demo1<br>  minor version: <span class="hljs-number">0</span><br>  major version: <span class="hljs-number">52</span><br>  flags: ACC_PUBLIC, ACC_SUPER<br>Constant pool:<br>   #1 = Methodref          #6.#15         <span class="hljs-comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>   #2 = Fieldref           #16.#17        <span class="hljs-comment">// java/lang/System.out:Ljava/io/PrintStream;</span><br>   #3 = <span class="hljs-built_in">String</span>             #18            <span class="hljs-comment">// hello world</span><br>   #4 = Methodref          #19.#20        <span class="hljs-comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span><br>   #5 = Class              #21            <span class="hljs-comment">// com/nyima/JVM/day5/Demo1</span><br>   #6 = Class              #22            <span class="hljs-comment">// java/lang/Object</span><br>   #7 = Utf8               &lt;init&gt;<br>   #8 = Utf8               ()V<br>   #9 = Utf8               Code<br>  #10 = Utf8               LineNumberTable<br>  #11 = Utf8               main<br>  #12 = Utf8               (<span class="hljs-meta">[</span>Ljava/lang/<span class="hljs-built_in">String</span>;)V<br>  #13 = Utf8               SourceFile<br>  #14 = Utf8               Demo1.java<br>  #15 = NameAndType        #7:#8          <span class="hljs-comment">// &quot;&lt;init&gt;&quot;:()V</span><br>  #16 = Class              #23            <span class="hljs-comment">// java/lang/System</span><br>  #17 = NameAndType        #24:#25        <span class="hljs-comment">// out:Ljava/io/PrintStream;</span><br>  #18 = Utf8               hello world<br>  #19 = Class              #26            <span class="hljs-comment">// java/io/PrintStream</span><br>  #20 = NameAndType        #27:#28        <span class="hljs-comment">// println:(Ljava/lang/String;)V</span><br>  #21 = Utf8               com/nyima/JVM/day5/Demo1<br>  #22 = Utf8               java/lang/Object<br>  #23 = Utf8               java/lang/System<br>  #24 = Utf8               out<br>  #25 = Utf8               Ljava/io/PrintStream;<br>  #26 = Utf8               java/io/PrintStream<br>  #27 = Utf8               println<br>  #28 = Utf8               (Ljava/lang/<span class="hljs-built_in">String</span>;)V<br>&#123;<br>  <span class="hljs-keyword">public</span> com.nyima.JVM.day5.Demo1();<br>    descriptor: ()V<br>    flags: ACC_PUBLIC<br>    Code:<br>      <span class="hljs-built_in">stack</span>=<span class="hljs-number">1</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: aload_0<br>         <span class="hljs-number">1</span>: invokespecial #1                  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>         <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">7</span>: <span class="hljs-number">0</span><br><br>  <span class="hljs-keyword">public</span> static <span class="hljs-literal">void</span> main(java.lang.<span class="hljs-built_in">String</span><span class="hljs-meta">[</span><span class="hljs-meta">]</span>);<br>    descriptor: (<span class="hljs-meta">[</span>Ljava/lang/<span class="hljs-built_in">String</span>;)V<br>    flags: ACC_PUBLIC, ACC_STATIC<br>    Code:<br>      <span class="hljs-built_in">stack</span>=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-number">0</span>: getstatic     #2                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>         <span class="hljs-number">3</span>: ldc           #3                  <span class="hljs-comment">// String hello world</span><br>         <span class="hljs-number">5</span>: invokevirtual #4                  <span class="hljs-comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><br>         <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span><br>      LineNumberTable:<br>        line <span class="hljs-number">9</span>: <span class="hljs-number">0</span><br>        line <span class="hljs-number">10</span>: <span class="hljs-number">8</span><br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="图解方法执行流程"><a href="#图解方法执行流程" class="headerlink" title="图解方法执行流程"></a>图解方法执行流程</h4><p>代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3_1</span> &#123;</span>    <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;        <br><span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;        <br><span class="hljs-keyword">int</span> b = Short.MAX_VALUE + <span class="hljs-number">1</span>;        <br><span class="hljs-keyword">int</span> c = a + b;        <br>System.out.<span class="hljs-built_in">println</span>(c);   <br>    &#125; <br>&#125;Copy<br></code></pre></td></tr></table></figure><p><strong>常量池载入运行时常量池</strong></p><p>常量池也属于方法区，只不过这里单独提出来了</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151317.png" alt="img"></a></p><p><strong>方法字节码载入方法区</strong></p><p>（stack=2，locals=4） 对应操作数栈有2个空间（每个空间4个字节），局部变量表中有4个槽位</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151325.png" alt="img"></a></p><p><strong>执行引擎开始执行字节码</strong></p><p><strong>bipush 10</strong></p><ul><li><p>将一个 byte 压入操作数栈</p><p>（其长度会补齐 4 个字节），类似的指令还有</p><ul><li>sipush 将一个 short 压入操作数栈（其长度会补齐 4 个字节）</li><li>ldc 将一个 int 压入操作数栈</li><li>ldc2_w 将一个 long 压入操作数栈（<strong>分两次压入</strong>，因为 long 是 8 个字节）</li><li>这里小的数字都是和字节码指令存在一起，<strong>超过 short 范围的数字存入了常量池</strong></li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151336.png" alt="img"></a></p><p><strong>istore 1</strong></p><p>将操作数栈栈顶元素弹出，放入局部变量表的slot 1中</p><p>对应代码中的</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">10</span>Copy<br></code></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151346.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151412.png" alt="img"></a></p><p><strong>ldc #3</strong></p><p>读取运行时常量池中#3，即32768(超过short最大值范围的数会被放到运行时常量池中)，将其加载到操作数栈中</p><p>注意 Short.MAX_VALUE 是 32767，所以 32768 = Short.MAX_VALUE + 1 实际是在编译期间计算好的</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151421.png" alt="img"></a></p><p><strong>istore 2</strong></p><p>将操作数栈中的元素弹出，放到局部变量表的2号位置</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151432.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151441.png" alt="img"></a></p><p><strong>iload1 iload2</strong></p><p>将局部变量表中1号位置和2号位置的元素放入操作数栈中</p><ul><li>因为只能在操作数栈中执行运算操作</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151450.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151459.png" alt="img"></a></p><p><strong>iadd</strong></p><p>将操作数栈中的两个元素<strong>弹出栈</strong>并相加，结果在压入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151508.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151523.png" alt="img"></a></p><p><strong>istore 3</strong></p><p>将操作数栈中的元素弹出，放入局部变量表的3号位置</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151547.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151555.png" alt="img"></a></p><p><strong>getstatic #4</strong></p><p>在运行时常量池中找到#4，发现是一个对象</p><p>在堆内存中找到该对象，并将其<strong>引用</strong>放入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151605.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151613.png" alt="img"></a></p><p><strong>iload 3</strong></p><p>将局部变量表中3号位置的元素压入操作数栈中</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151624.png" alt="img"></a></p><p><strong>invokevirtual 5</strong></p><p>找到常量池 #5 项，定位到方法区 java/io/PrintStream.println:(I)V 方法</p><p>生成新的栈帧（分配 locals、stack等）</p><p>传递参数，执行新栈帧中的字节码</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151632.png" alt="img"></a></p><p>执行完毕，弹出栈帧</p><p>清除 main 操作数栈内容</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200608151640.png" alt="img"></a></p><p><strong>return</strong><br>完成 main 方法调用，弹出 main 栈帧，程序结束</p><h4 id="通过字节码指令来分析问题"><a href="#通过字节码指令来分析问题" class="headerlink" title="通过字节码指令来分析问题"></a>通过字节码指令来分析问题</h4><p>代码</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">10</span>) &#123;<br>x = x++;<br>i++;<br>&#125;<br>System.out.<span class="hljs-built_in">println</span>(x); <span class="hljs-comment">//接过为0</span><br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>为什么最终的x结果为0呢？ 通过分析字节码指令即可知晓</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Code</span>:<br>     <span class="hljs-attribute">stack</span>=<span class="hljs-number">2</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span>//操作数栈分配<span class="hljs-number">2</span>个空间，局部变量表分配<span class="hljs-number">3</span>个空间<br>        <span class="hljs-attribute">0</span>: iconst_<span class="hljs-number">0</span>//准备一个常数<span class="hljs-number">0</span><br>        <span class="hljs-attribute">1</span>: istore_<span class="hljs-number">1</span>//将常数<span class="hljs-number">0</span>放入局部变量表的<span class="hljs-number">1</span>号槽位 i=<span class="hljs-number">0</span><br>        <span class="hljs-attribute">2</span>: iconst_<span class="hljs-number">0</span>//准备一个常数<span class="hljs-number">0</span><br>        <span class="hljs-attribute">3</span>: istore_<span class="hljs-number">2</span>//将常数<span class="hljs-number">0</span>放入局部变量的<span class="hljs-number">2</span>号槽位 x=<span class="hljs-number">0</span><br>        <span class="hljs-attribute">4</span>: iload_<span class="hljs-number">1</span>//将局部变量表<span class="hljs-number">1</span>号槽位的数放入操作数栈中<br>        <span class="hljs-attribute">5</span>: bipush        <span class="hljs-number">10</span>//将数字<span class="hljs-number">10</span>放入操作数栈中，此时操作数栈中有<span class="hljs-number">2</span>个数<br>        <span class="hljs-attribute">7</span>: if_icmpge     <span class="hljs-number">21</span>//比较操作数栈中的两个数，如果下面的数大于上面的数，就跳转到<span class="hljs-number">21</span>。这里的比较是将两个数做减法。因为涉及运算操作，所以会将两个数弹出操作数栈来进行运算。运算结束后操作数栈为空<br>       <span class="hljs-attribute">10</span>: iload_<span class="hljs-number">2</span>//将局部变量<span class="hljs-number">2</span>号槽位的数放入操作数栈中，放入的值是<span class="hljs-number">0</span><br>       <span class="hljs-attribute">11</span>: iinc          <span class="hljs-number">2</span>, <span class="hljs-number">1</span>//将局部变量<span class="hljs-number">2</span>号槽位的数加<span class="hljs-number">1</span>，自增后，槽位中的值为<span class="hljs-number">1</span><br>       <span class="hljs-attribute">14</span>: istore_<span class="hljs-number">2</span>//将操作数栈中的数放入到局部变量表的<span class="hljs-number">2</span>号槽位，<span class="hljs-number">2</span>号槽位的值又变为了<span class="hljs-number">0</span><br>       <span class="hljs-attribute">15</span>: iinc          <span class="hljs-number">1</span>, <span class="hljs-number">1</span> //<span class="hljs-number">1</span>号槽位的值自增<span class="hljs-number">1</span><br>       <span class="hljs-attribute">18</span>: goto          <span class="hljs-number">4</span> //跳转到第<span class="hljs-number">4</span>条指令<br>       <span class="hljs-attribute">21</span>: getstatic     #<span class="hljs-number">2</span>                  // Field java/lang/System.out:Ljava/io/PrintStream;<br>       <span class="hljs-attribute">24</span>: iload_<span class="hljs-number">2</span><br>       <span class="hljs-attribute">25</span>: invokevirtual #<span class="hljs-number">3</span>                  // Method java/io/PrintStream.println:(I)V<br>       <span class="hljs-attribute">28</span>: returnCopy<br></code></pre></td></tr></table></figure><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="cinit-V"><a href="#cinit-V" class="headerlink" title="cinit()V"></a>cinit()V</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3</span> &#123;</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-keyword">static</span> &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(i); <span class="hljs-comment">//结果为30</span><br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 static 静态代码块和静态成员赋值的代码，<strong>合并</strong>为一个特殊的方法 cinit()V ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">stack=1,</span> <span class="hljs-string">locals=0,</span> <span class="hljs-string">args_size=0</span><br>         <span class="hljs-attr">0:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">10</span><br>         <span class="hljs-attr">2:</span> <span class="hljs-string">putstatic</span>     <span class="hljs-comment">#3                  // Field i:I</span><br>         <span class="hljs-attr">5:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">20</span><br>         <span class="hljs-attr">7:</span> <span class="hljs-string">putstatic</span>     <span class="hljs-comment">#3                  // Field i:I</span><br>        <span class="hljs-attr">10:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">30</span><br>        <span class="hljs-attr">12:</span> <span class="hljs-string">putstatic</span>     <span class="hljs-comment">#3                  // Field i:I</span><br>        <span class="hljs-attr">15:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><h5 id="init-V"><a href="#init-V" class="headerlink" title="init()V"></a>init()V</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4</span> &#123;</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> a = <span class="hljs-string">&quot;s1&quot;</span>;<br><br>&#123;<br>b = <span class="hljs-number">20</span>;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> b = <span class="hljs-number">10</span>;<br><br>&#123;<br>a = <span class="hljs-string">&quot;s2&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Demo4</span><span class="hljs-params">(<span class="hljs-keyword">String</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">this</span>.a = a;<br><span class="hljs-keyword">this</span>.b = b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>Demo4 d = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Demo4</span>(<span class="hljs-string">&quot;s3&quot;</span>, <span class="hljs-number">30</span>);<br>System.out.<span class="hljs-built_in">println</span>(d.a);<br>System.out.<span class="hljs-built_in">println</span>(d.b);<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>编译器会按<strong>从上至下</strong>的顺序，收集所有 {} 代码块和成员变量赋值的代码，<strong>形成新的构造方法</strong>，但<strong>原始构造方法</strong>内的代码<strong>总是在后</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Code:</span><br>     <span class="hljs-string">stack=2,</span> <span class="hljs-string">locals=3,</span> <span class="hljs-string">args_size=3</span><br>        <span class="hljs-attr">0:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">1:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>        <span class="hljs-attr">4:</span> <span class="hljs-string">aload_0</span><br>        <span class="hljs-attr">5:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#2                  // String s1</span><br>        <span class="hljs-attr">7:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#3                  // Field a:Ljava/lang/String;</span><br>       <span class="hljs-attr">10:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">11:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">20</span><br>       <span class="hljs-attr">13:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#4                  // Field b:I</span><br>       <span class="hljs-attr">16:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">17:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">10</span><br>       <span class="hljs-attr">19:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#4                  // Field b:I</span><br>       <span class="hljs-attr">22:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">23:</span> <span class="hljs-string">ldc</span>           <span class="hljs-comment">#5                  // String s2</span><br>       <span class="hljs-attr">25:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#3                  // Field a:Ljava/lang/String;</span><br>       <span class="hljs-string">//原始构造方法在最后执行</span><br>       <span class="hljs-attr">28:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">29:</span> <span class="hljs-string">aload_1</span><br>       <span class="hljs-attr">30:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#3                  // Field a:Ljava/lang/String;</span><br>       <span class="hljs-attr">33:</span> <span class="hljs-string">aload_0</span><br>       <span class="hljs-attr">34:</span> <span class="hljs-string">iload_2</span><br>       <span class="hljs-attr">35:</span> <span class="hljs-string">putfield</span>      <span class="hljs-comment">#4                  // Field b:I</span><br>       <span class="hljs-attr">38:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><h4 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo5</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">Demo5</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test1</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> final <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test2</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test3</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">test4</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>Demo5 demo5 = <span class="hljs-keyword">new</span> Demo5();<br>demo5.test1();<br>demo5.test2();<br>demo5.test3();<br>Demo5.test4();<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>不同方法在调用时，对应的虚拟机指令有所区别</p><ul><li>私有、构造、被final修饰的方法，在调用时都使用<strong>invokespecial</strong>指令</li><li>普通成员方法在调用时，使用invokespecial指令。因为编译期间无法确定该方法的内容，只有在运行期间才能确定</li><li>静态方法在调用时使用invokestatic指令</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Code</span>:<br>      <span class="hljs-attribute">stack</span>=<span class="hljs-number">2</span>, locals=<span class="hljs-number">2</span>, args_size=<span class="hljs-number">1</span><br>         <span class="hljs-attribute">0</span>: new           #<span class="hljs-number">2</span>                  // class com/nyima/JVM/day<span class="hljs-number">5</span>/Demo<span class="hljs-number">5</span> <br>         <span class="hljs-attribute">3</span>: dup<br>         <span class="hljs-attribute">4</span>: invokespecial #<span class="hljs-number">3</span>                  // Method <span class="hljs-string">&quot;&lt;init&gt;&quot;</span>:()V<br>         <span class="hljs-attribute">7</span>: astore_<span class="hljs-number">1</span><br>         <span class="hljs-attribute">8</span>: aload_<span class="hljs-number">1</span><br>         <span class="hljs-attribute">9</span>: invokespecial #<span class="hljs-number">4</span>                  // Method test<span class="hljs-number">1</span>:()V<br>        <span class="hljs-attribute">12</span>: aload_<span class="hljs-number">1</span><br>        <span class="hljs-attribute">13</span>: invokespecial #<span class="hljs-number">5</span>                  // Method test<span class="hljs-number">2</span>:()V<br>        <span class="hljs-attribute">16</span>: aload_<span class="hljs-number">1</span><br>        <span class="hljs-attribute">17</span>: invokevirtual #<span class="hljs-number">6</span>                  // Method test<span class="hljs-number">3</span>:()V<br>        <span class="hljs-attribute">20</span>: invokestatic  #<span class="hljs-number">7</span>                  // Method test<span class="hljs-number">4</span>:()V<br>        <span class="hljs-attribute">23</span>: returnCopy<br></code></pre></td></tr></table></figure><ul><li>new 是创建【对象】，给对象分配堆内存，执行成功会将【<strong>对象引用</strong>】压入操作数栈</li><li>dup 是赋值操作数栈栈顶的内容，本例即为【<strong>对象引用</strong>】，为什么需要两份引用呢，一个是要配合 invokespecial 调用该对象的构造方法 “init”:()V （会消耗掉栈顶一个引用），另一个要 配合 astore_1 赋值给局部变量</li><li>终方法（ﬁnal），私有方法（private），构造方法都是由 invokespecial 指令来调用，属于静态绑定</li><li>普通成员方法是由 invokevirtual 调用，属于<strong>动态绑定</strong>，即支持多态 成员方法与静态方法调用的另一个区别是，执行方法前是否需要【对象引用】</li></ul><h4 id="多态原理"><a href="#多态原理" class="headerlink" title="多态原理"></a>多态原理</h4><p>因为想       普通成员方法需要在运行时才能确定具体的内容，所以虚拟机需要调用<strong>invokevirtual</strong>指令</p><p>在执行invo功夫kevirtual指令时，经历了以下几个步骤</p><ul><li>先通过栈帧中对象的引用找到对象</li><li>分析对象头，找到对象实际的Class</li><li>Class结构中有<strong>vtable</strong></li><li>查询vtable找到方法的具体地址</li><li>执行方法的字节码</li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><h5 id="try-catch"><a href="#try-catch" class="headerlink" title="try-catch"></a>try-catch</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (Exception e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>对应字节码指令</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Code</span>:<span class="hljs-string"></span><br>     <span class="hljs-attr">stack</span>=<span class="hljs-string">1, locals=3, args_size=1</span><br>        <span class="hljs-attr">0</span>: <span class="hljs-string">iconst_0</span><br>        <span class="hljs-attr">1</span>: <span class="hljs-string">istore_1</span><br>        <span class="hljs-attr">2</span>: <span class="hljs-string">bipush        10</span><br>        <span class="hljs-attr">4</span>: <span class="hljs-string">istore_1</span><br>        <span class="hljs-attr">5</span>: <span class="hljs-string">goto          12</span><br>        <span class="hljs-attr">8</span>: <span class="hljs-string">astore_2</span><br>        <span class="hljs-attr">9</span>: <span class="hljs-string">bipush        20</span><br>       <span class="hljs-attr">11</span>: <span class="hljs-string">istore_1</span><br>       <span class="hljs-attr">12</span>: <span class="hljs-string">return</span><br>     <span class="hljs-attr">//多出来一个异常表</span><br>     <span class="hljs-attr">Exception</span> <span class="hljs-string">table:</span><br>        <span class="hljs-attr">from</span>    <span class="hljs-string">to  target type</span><br>            <span class="hljs-attr">2</span>     <span class="hljs-string">5     8   Class java/lang/ExceptionCopy</span><br></code></pre></td></tr></table></figure><ul><li>可以看到多出来一个 Exception table 的结构，[from, to) 是<strong>前闭后开</strong>（也就是检测2~4行）的检测范围，一旦这个范围内的字节码执行出现异常，则通过 type 匹配异常类型，如果一致，进入 target 所指示行号</li><li>8行的字节码指令 astore_2 是将异常对象引用存入局部变量表的2号位置（为e）</li></ul><h5 id="多个single-catch"><a href="#多个single-catch" class="headerlink" title="多个single-catch"></a>多个single-catch</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (ArithmeticException e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span> (Exception e) &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>对应的字节码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Code</span>:<br>     <span class="hljs-attribute">stack</span>=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-attribute">0</span>: iconst_<span class="hljs-number">0</span><br>        <span class="hljs-attribute">1</span>: istore_<span class="hljs-number">1</span><br>        <span class="hljs-attribute">2</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-attribute">4</span>: istore_<span class="hljs-number">1</span><br>        <span class="hljs-attribute">5</span>: goto          <span class="hljs-number">19</span><br>        <span class="hljs-attribute">8</span>: astore_<span class="hljs-number">2</span><br>        <span class="hljs-attribute">9</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-attribute">11</span>: istore_<span class="hljs-number">1</span><br>       <span class="hljs-attribute">12</span>: goto          <span class="hljs-number">19</span><br>       <span class="hljs-attribute">15</span>: astore_<span class="hljs-number">2</span><br>       <span class="hljs-attribute">16</span>: bipush        <span class="hljs-number">30</span><br>       <span class="hljs-attribute">18</span>: istore_<span class="hljs-number">1</span><br>       <span class="hljs-attribute">19</span>: return<br>     <span class="hljs-attribute">Exception</span> table:<br>        <span class="hljs-attribute">from</span>    to  target type<br>            <span class="hljs-attribute">2</span>     <span class="hljs-number">5</span>     <span class="hljs-number">8</span>   Class java/lang/ArithmeticException<br>            <span class="hljs-attribute">2</span>     <span class="hljs-number">5</span>    <span class="hljs-number">15</span>   Class java/lang/ExceptionCopy<br></code></pre></td></tr></table></figure><ul><li>因为异常出现时，<strong>只能进入</strong> Exception table 中<strong>一个分支</strong>，所以局部变量表 slot 2 位置<strong>被共用</strong></li></ul><h5 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>i = <span class="hljs-number">30</span>;<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Code</span>:<span class="hljs-string"></span><br>     <span class="hljs-attr">stack</span>=<span class="hljs-string">1, locals=4, args_size=1</span><br>        <span class="hljs-attr">0</span>: <span class="hljs-string">iconst_0</span><br>        <span class="hljs-attr">1</span>: <span class="hljs-string">istore_1</span><br>        <span class="hljs-attr">//try块</span><br>        <span class="hljs-attr">2</span>: <span class="hljs-string">bipush        10</span><br>        <span class="hljs-attr">4</span>: <span class="hljs-string">istore_1</span><br>        <span class="hljs-meta">//try块执行完后，会执行finally</span>    <span class="hljs-string"></span><br>        <span class="hljs-attr">5</span>: <span class="hljs-string">bipush        30</span><br>        <span class="hljs-attr">7</span>: <span class="hljs-string">istore_1</span><br>        <span class="hljs-attr">8</span>: <span class="hljs-string">goto          27</span><br>       <span class="hljs-meta">//catch块</span>     <span class="hljs-string"></span><br>       <span class="hljs-attr">11</span>: <span class="hljs-string">astore_2 //异常信息放入局部变量表的2号槽位</span><br>       <span class="hljs-attr">12</span>: <span class="hljs-string">bipush        20</span><br>       <span class="hljs-attr">14</span>: <span class="hljs-string">istore_1</span><br>       <span class="hljs-meta">//catch块执行完后，会执行finally</span>        <span class="hljs-string"></span><br>       <span class="hljs-attr">15</span>: <span class="hljs-string">bipush        30</span><br>       <span class="hljs-attr">17</span>: <span class="hljs-string">istore_1</span><br>       <span class="hljs-attr">18</span>: <span class="hljs-string">goto          27</span><br>       <span class="hljs-meta">//出现异常，但未被Exception捕获，会抛出其他异常，这时也需要执行finally块中的代码</span>   <span class="hljs-string"></span><br>       <span class="hljs-attr">21</span>: <span class="hljs-string">astore_3</span><br>       <span class="hljs-attr">22</span>: <span class="hljs-string">bipush        30</span><br>       <span class="hljs-attr">24</span>: <span class="hljs-string">istore_1</span><br>       <span class="hljs-attr">25</span>: <span class="hljs-string">aload_3</span><br>       <span class="hljs-attr">26</span>: <span class="hljs-string">athrow  //抛出异常</span><br>       <span class="hljs-attr">27</span>: <span class="hljs-string">return</span><br>     <span class="hljs-attr">Exception</span> <span class="hljs-string">table:</span><br>        <span class="hljs-attr">from</span>    <span class="hljs-string">to  target type</span><br>            <span class="hljs-attr">2</span>     <span class="hljs-string">5    11   Class java/lang/Exception</span><br>            <span class="hljs-attr">2</span>     <span class="hljs-string">5    21   any</span><br>           <span class="hljs-attr">11</span>    <span class="hljs-string">15    21   anyCopy</span><br></code></pre></td></tr></table></figure><p>可以看到 ﬁnally 中的代码被<strong>复制了 3 份</strong>，分别放入 try 流程，catch 流程以及 catch剩余的异常类型流程</p><p><strong>注意</strong>：虽然从字节码指令看来，每个块中都有finally块，但是finally块中的代码<strong>只会被执行一次</strong></p><h5 id="finally中的return"><a href="#finally中的return" class="headerlink" title="finally中的return"></a>finally中的return</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = Demo3.<span class="hljs-built_in">test</span>();<br>        <span class="hljs-comment">//结果为20</span><br>System.out.<span class="hljs-built_in">println</span>(i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> i;<br><span class="hljs-keyword">try</span> &#123;<br>i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">return</span> i;<br>&#125; finally &#123;<br>i = <span class="hljs-number">20</span>;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">Code</span>:<span class="hljs-string"></span><br>     <span class="hljs-attr">stack</span>=<span class="hljs-string">1, locals=3, args_size=0</span><br>        <span class="hljs-attr">0</span>: <span class="hljs-string">bipush        10</span><br>        <span class="hljs-attr">2</span>: <span class="hljs-string">istore_0</span><br>        <span class="hljs-attr">3</span>: <span class="hljs-string">iload_0</span><br>        <span class="hljs-attr">4</span>: <span class="hljs-string">istore_1  //暂存返回值</span><br>        <span class="hljs-attr">5</span>: <span class="hljs-string">bipush        20</span><br>        <span class="hljs-attr">7</span>: <span class="hljs-string">istore_0</span><br>        <span class="hljs-attr">8</span>: <span class="hljs-string">iload_0</span><br>        <span class="hljs-attr">9</span>: <span class="hljs-string">ireturn//ireturn会返回操作数栈顶的整型值20</span><br>       <span class="hljs-attr">//如果出现异常，还是会执行finally块中的内容，没有抛出异常</span><br>       <span class="hljs-attr">10</span>: <span class="hljs-string">astore_2</span><br>       <span class="hljs-attr">11</span>: <span class="hljs-string">bipush        20</span><br>       <span class="hljs-attr">13</span>: <span class="hljs-string">istore_0</span><br>       <span class="hljs-attr">14</span>: <span class="hljs-string">iload_0</span><br>       <span class="hljs-attr">15</span>: <span class="hljs-string">ireturn//这里没有athrow了，也就是如果在finally块中如果有返回操作的话，且try块中出现异常，会吞掉异常！</span><br>     <span class="hljs-attr">Exception</span> <span class="hljs-string">table:</span><br>        <span class="hljs-attr">from</span>    <span class="hljs-string">to  target type</span><br>            <span class="hljs-attr">0</span>     <span class="hljs-string">5    10   anyCopy</span><br></code></pre></td></tr></table></figure><ul><li>由于 ﬁnally 中的 <strong>ireturn</strong> 被插入了所有可能的流程，因此返回结果肯定以ﬁnally的为准</li><li>至于字节码中第 2 行，似乎没啥用，且留个伏笔，看下个例子</li><li>跟上例中的 ﬁnally 相比，发现<strong>没有 athrow 了</strong>，这告诉我们：如果在 ﬁnally 中出现了 return，会<strong>吞掉异常</strong></li><li>所以<strong>不要在finally中进行返回操作</strong></li></ul><h5 id="被吞掉的异常"><a href="#被吞掉的异常" class="headerlink" title="被吞掉的异常"></a>被吞掉的异常</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo3</span> &#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> i = Demo3.<span class="hljs-built_in">test</span>();<br>      <span class="hljs-comment">//最终结果为20</span><br>      System.out.<span class="hljs-built_in">println</span>(i);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> i;<br>      <span class="hljs-keyword">try</span> &#123;<br>         i = <span class="hljs-number">10</span>;<br>         <span class="hljs-comment">//这里应该会抛出异常</span><br>         i = i/<span class="hljs-number">0</span>;<br>         <span class="hljs-keyword">return</span> i;<br>      &#125; finally &#123;<br>         i = <span class="hljs-number">20</span>;<br>         <span class="hljs-keyword">return</span> i;<br>      &#125;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>会发现打印结果为20，并未抛出异常</p><h5 id="finally不带return"><a href="#finally不带return" class="headerlink" title="finally不带return"></a>finally不带return</h5><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = Demo4.<span class="hljs-built_in">test</span>();<br>System.out.<span class="hljs-built_in">println</span>(i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125; finally &#123;<br>i = <span class="hljs-number">20</span>;<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Code</span>:<br>     <span class="hljs-attribute">stack</span>=<span class="hljs-number">1</span>, locals=<span class="hljs-number">3</span>, args_size=<span class="hljs-number">0</span><br>        <span class="hljs-attribute">0</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-attribute">2</span>: istore_<span class="hljs-number">0</span> //赋值给i <span class="hljs-number">10</span><br>        <span class="hljs-attribute">3</span>: iload_<span class="hljs-number">0</span>//加载到操作数栈顶<br>        <span class="hljs-attribute">4</span>: istore_<span class="hljs-number">1</span> //加载到局部变量表的<span class="hljs-number">1</span>号位置<br>        <span class="hljs-attribute">5</span>: bipush        <span class="hljs-number">20</span><br>        <span class="hljs-attribute">7</span>: istore_<span class="hljs-number">0</span> //赋值给i <span class="hljs-number">20</span><br>        <span class="hljs-attribute">8</span>: iload_<span class="hljs-number">1</span> //加载局部变量表<span class="hljs-number">1</span>号位置的数<span class="hljs-number">10</span>到操作数栈<br>        <span class="hljs-attribute">9</span>: ireturn //返回操作数栈顶元素 <span class="hljs-number">10</span><br>       <span class="hljs-attribute">10</span>: astore_<span class="hljs-number">2</span><br>       <span class="hljs-attribute">11</span>: bipush        <span class="hljs-number">20</span><br>       <span class="hljs-attribute">13</span>: istore_<span class="hljs-number">0</span><br>       <span class="hljs-attribute">14</span>: aload_<span class="hljs-number">2</span> //加载异常<br>       <span class="hljs-attribute">15</span>: athrow //抛出异常<br>     <span class="hljs-attribute">Exception</span> table:<br>        <span class="hljs-attribute">from</span>    to  target type<br>            <span class="hljs-attribute">3</span>     <span class="hljs-number">5</span>    <span class="hljs-number">10</span>   anyCopy<br></code></pre></td></tr></table></figure><h4 id="Synchronized"><a href="#Synchronized" class="headerlink" title="Synchronized"></a>Synchronized</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Demo5 &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br><span class="hljs-type">int</span> i = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">Lock</span> <span class="hljs-keyword">lock</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">Lock</span>();<br>synchronized (<span class="hljs-keyword">lock</span>) &#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">Lock</span>&#123;&#125;<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">Code:<br>     stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">5</span>, args_size=<span class="hljs-number">1</span><br>        <span class="hljs-number">0</span>: bipush        <span class="hljs-number">10</span><br>        <span class="hljs-number">2</span>: istore_1<br>        <span class="hljs-number">3</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class com/nyima/JVM/day06/Lock</span><br>        <span class="hljs-number">6</span>: dup <span class="hljs-comment">//复制一份，放到操作数栈顶，用于构造函数消耗</span><br>        <span class="hljs-number">7</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method com/nyima/JVM/day06/Lock.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">10</span>: astore_2 <span class="hljs-comment">//剩下的一份放到局部变量表的2号位置</span><br>       <span class="hljs-number">11</span>: aload_2 <span class="hljs-comment">//加载到操作数栈</span><br>       <span class="hljs-number">12</span>: dup <span class="hljs-comment">//复制一份，放到操作数栈，用于加锁时消耗</span><br>       <span class="hljs-number">13</span>: astore_3 <span class="hljs-comment">//将操作数栈顶元素弹出，暂存到局部变量表的三号槽位。这时操作数栈中有一份对象的引用</span><br>       <span class="hljs-number">14</span>: monitorenter <span class="hljs-comment">//加锁</span><br>       <span class="hljs-comment">//锁住后代码块中的操作    </span><br>       <span class="hljs-number">15</span>: getstatic     #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>       <span class="hljs-number">18</span>: iload_1<br>       <span class="hljs-number">19</span>: invokevirtual #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>       <span class="hljs-comment">//加载局部变量表中三号槽位对象的引用，用于解锁    </span><br>       <span class="hljs-number">22</span>: aload_3    <br>       <span class="hljs-number">23</span>: monitorexit <span class="hljs-comment">//解锁</span><br>       <span class="hljs-number">24</span>: goto          <span class="hljs-number">34</span><br>       <span class="hljs-comment">//异常操作    </span><br>       <span class="hljs-number">27</span>: astore        <span class="hljs-number">4</span><br>       <span class="hljs-number">29</span>: aload_3<br>       <span class="hljs-number">30</span>: monitorexit <span class="hljs-comment">//解锁</span><br>       <span class="hljs-number">31</span>: aload         <span class="hljs-number">4</span><br>       <span class="hljs-number">33</span>: athrow<br>       <span class="hljs-number">34</span>: <span class="hljs-keyword">return</span><br>     <span class="hljs-comment">//可以看出，无论何时出现异常，都会跳转到27行，将异常放入局部变量中，并进行解锁操作，然后加载异常并抛出异常。      </span><br>     Exception table:<br>        from    to  target type<br>           <span class="hljs-number">15</span>    <span class="hljs-number">24</span>    <span class="hljs-number">27</span>   any<br>           <span class="hljs-number">27</span>    <span class="hljs-number">31</span>    <span class="hljs-number">27</span>   any<br></code></pre></td></tr></table></figure><h3 id="3、编译期处理"><a href="#3、编译期处理" class="headerlink" title="3、编译期处理"></a>3、编译期处理</h3><p>所谓的 <strong>语法糖</strong> ，其实就是指 java 编译器把 *.java 源码编译为 *.class 字节码的过程中，<strong>自动生成</strong>和<strong>转换</strong>的一些代码，主要是为了减轻程序员的负担，算是 java 编译器给我们的一个额外福利</p><p><strong>注意</strong>，以下代码的分析，借助了 javap 工具，idea 的反编译功能，idea 插件 jclasslib 等工具。另外， 编译器转换的<strong>结果直接就是 class 字节码</strong>，只是为了便于阅读，给出了 几乎等价 的 java 源码方式，并不是编译器还会转换出中间的 java 源码，切记。</p><h4 id="默认构造函数"><a href="#默认构造函数" class="headerlink" title="默认构造函数"></a>默认构造函数</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">Candy1</span> &#123;<br><br>&#125;Copy<br></code></pre></td></tr></table></figure><p>经过编译期优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Candy1</span> </span>&#123;<br>   <span class="hljs-comment">//这个无参构造器是java编译器帮我们加上的</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Candy1</span><span class="hljs-params">()</span> </span>&#123;<br>      <span class="hljs-comment">//即调用父类 Object 的无参构造方法，即调用 java/lang/Object.&quot; &lt;init&gt;&quot;:()V</span><br>      <span class="hljs-keyword">super</span>();<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="自动拆装箱"><a href="#自动拆装箱" class="headerlink" title="自动拆装箱"></a>自动拆装箱</h4><p>基本类型和其包装类型的相互转换过程，称为拆装箱</p><p>在JDK 5以后，它们的转换可以在编译期自动完成</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> &#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>      Integer x = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">int</span> y = x;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>转换过程如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo2</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>      <span class="hljs-comment">//基本类型赋值给包装类型，称为装箱</span><br>      <span class="hljs-keyword">Integer</span> x = <span class="hljs-keyword">Integer</span>.valueOf(<span class="hljs-number">1</span>);<br>      <span class="hljs-comment">//包装类型赋值给基本类型，称谓拆箱</span><br>      <span class="hljs-keyword">int</span> y = x.intValue();<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="泛型集合取值"><a href="#泛型集合取值" class="headerlink" title="泛型集合取值"></a>泛型集合取值</h4><p>泛型也是在 JDK 5 开始加入的特性，但 java 在<strong>编译泛型代码后</strong>会执行 <strong>泛型擦除</strong> 的动作，即泛型信息在编译为字节码之后就<strong>丢失</strong>了，实际的类型都当做了 <strong>Object</strong> 类型来处理：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Demo3 &#123;<br>   <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>      List&lt;<span class="hljs-type">Integer</span>&gt; list = <span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>      list.<span class="hljs-keyword">add</span>(<span class="hljs-number">10</span>);<br>      <span class="hljs-type">Integer</span> x = list.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);<br>   &#125;<br>&#125;<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>对应字节码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Code:</span><br>    <span class="hljs-string">stack=2,</span> <span class="hljs-string">locals=3,</span> <span class="hljs-string">args_size=1</span><br>       <span class="hljs-attr">0:</span> <span class="hljs-string">new</span>           <span class="hljs-comment">#2                  // class java/util/ArrayList</span><br>       <span class="hljs-attr">3:</span> <span class="hljs-string">dup</span><br>       <span class="hljs-attr">4:</span> <span class="hljs-string">invokespecial</span> <span class="hljs-comment">#3                  // Method java/util/ArrayList.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-attr">7:</span> <span class="hljs-string">astore_1</span><br>       <span class="hljs-attr">8:</span> <span class="hljs-string">aload_1</span><br>       <span class="hljs-attr">9:</span> <span class="hljs-string">bipush</span>        <span class="hljs-number">10</span><br>      <span class="hljs-attr">11:</span> <span class="hljs-string">invokestatic</span>  <span class="hljs-comment">#4                  // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br>      <span class="hljs-string">//这里进行了泛型擦除，实际调用的是add(Objcet</span> <span class="hljs-string">o)</span><br>      <span class="hljs-attr">14:</span> <span class="hljs-string">invokeinterface</span> <span class="hljs-comment">#5,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br><br>      <span class="hljs-attr">19:</span> <span class="hljs-string">pop</span><br>      <span class="hljs-attr">20:</span> <span class="hljs-string">aload_1</span><br>      <span class="hljs-attr">21:</span> <span class="hljs-string">iconst_0</span><br>      <span class="hljs-string">//这里也进行了泛型擦除，实际调用的是get(Object</span> <span class="hljs-string">o)</span>   <br>      <span class="hljs-attr">22:</span> <span class="hljs-string">invokeinterface</span> <span class="hljs-comment">#6,  2            // InterfaceMethod java/util/List.get:(I)Ljava/lang/Object;</span><br><span class="hljs-string">//这里进行了类型转换，将Object转换成了Integer</span><br>      <span class="hljs-attr">27:</span> <span class="hljs-string">checkcast</span>     <span class="hljs-comment">#7                  // class java/lang/Integer</span><br>      <span class="hljs-attr">30:</span> <span class="hljs-string">astore_2</span><br>      <span class="hljs-attr">31:</span> <span class="hljs-string">returnCopy</span><br></code></pre></td></tr></table></figure><p>所以调用get函数取值时，有一个类型转换的操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Integer</span> x = (<span class="hljs-type">Integer</span>) list.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>);<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>如果要将返回结果赋值给一个int类型的变量，则还有<strong>自动拆箱</strong>的操作</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> x = (<span class="hljs-type">Integer</span>) list.<span class="hljs-keyword">get</span>(<span class="hljs-number">0</span>).intValue();<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>... args</span>)</span> &#123;<br>      <span class="hljs-comment">//将args赋值给arr，可以看出String...实际就是String[] </span><br>      <span class="hljs-built_in">String</span>[] arr = args;<br>      System.out.println(arr.length);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>      foo(<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>);<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>可变参数 <strong>String…</strong> args 其实是一个 <strong>String[]</strong> args ，从代码中的赋值语句中就可以看出来。 同 样 java 编译器会在编译期间将上述代码变换为：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo4</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> Demo4 &#123;&#125;<br><br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">foo</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>      <span class="hljs-built_in">String</span>[] arr = args;<br>      System.out.println(arr.length);<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>      foo(<span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>[]&#123;<span class="hljs-string">&quot;hello&quot;</span>, <span class="hljs-string">&quot;world&quot;</span>&#125;);<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>注意，如果调用的是foo()，即未传递参数时，等价代码为foo(new String[]{})，<strong>创建了一个空数组</strong>，而不是直接传递的null</p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo5</span> &#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//数组赋初值的简化写法也是一种语法糖。</span><br><span class="hljs-keyword">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x : arr) &#123;<br>System.out.<span class="hljs-built_in">println</span>(x);<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>编译器会帮我们转换为</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo5</span> &#123;</span><br>    <span class="hljs-keyword">public</span> Demo5 &#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><span class="hljs-keyword">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; ++i) &#123;<br><span class="hljs-keyword">int</span> x = arr[i];<br>System.out.<span class="hljs-built_in">println</span>(x);<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><strong>如果是集合使用foreach</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Demo5 &#123;<br>   <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args) &#123;<br>      List&lt;<span class="hljs-type">Integer</span>&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">Integer</span> x : list) &#123;<br>         <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(x);<br>      &#125;<br>   &#125;<br>&#125;<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><p>集合要使用foreach，需要该集合类实现了<strong>Iterable接口</strong>，因为集合的遍历需要用到<strong>迭代器Iterator</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo5</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> Demo5 &#123;&#125;<br>    <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>      <span class="hljs-keyword">List</span>&lt;<span class="hljs-keyword">Integer</span>&gt; <span class="hljs-keyword">list</span> = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>);<br>      <span class="hljs-comment">//获得该集合的迭代器</span><br>      <span class="hljs-built_in">Iterator</span>&lt;<span class="hljs-keyword">Integer</span>&gt; <span class="hljs-built_in">iterator</span> = <span class="hljs-keyword">list</span>.<span class="hljs-built_in">iterator</span>();<br>      <span class="hljs-keyword">while</span>(<span class="hljs-built_in">iterator</span>.hasNext()) &#123;<br>         <span class="hljs-keyword">Integer</span> x = <span class="hljs-built_in">iterator</span>.next();<br>         System.out.println(x);<br>      &#125;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="switch字符串"><a href="#switch字符串" class="headerlink" title="switch字符串"></a>switch字符串</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo6</span> &#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>      <span class="hljs-keyword">String</span> str = <span class="hljs-string">&quot;hello&quot;</span>;<br>      <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (str) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;hello&quot;</span> :<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;h&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;world&quot;</span> :<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;w&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>在编译器中执行的操作</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> class Demo6 &#123;<br>   <span class="hljs-keyword">public</span> Demo6() &#123;<br>      <br>   &#125;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) &#123;<br>      <span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>      <span class="hljs-built_in">int</span> x = <span class="hljs-number">-1</span>;<br>      <span class="hljs-comment">//通过字符串的hashCode+value来判断是否匹配</span><br>      <span class="hljs-keyword">switch</span> (<span class="hljs-built_in">str</span>.hashCode()) &#123;<br>         <span class="hljs-comment">//hello的hashCode</span><br>         <span class="hljs-keyword">case</span> <span class="hljs-number">99162322</span> :<br>            <span class="hljs-comment">//再次比较，因为字符串的hashCode有可能相等</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span>.equals(<span class="hljs-string">&quot;hello&quot;</span>)) &#123;<br>               x = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-comment">//world的hashCode</span><br>         <span class="hljs-keyword">case</span> <span class="hljs-number">11331880</span> :<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span>.equals(<span class="hljs-string">&quot;world&quot;</span>)) &#123;<br>               x = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//用第二个switch在进行输出判断</span><br>      <span class="hljs-keyword">switch</span> (x) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;h&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;w&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>过程说明：</p><ul><li>在编译期间，单个的switch被分为了两个<ul><li>第一个用来匹配字符串，并给x赋值<ul><li>字符串的匹配用到了字符串的hashCode，还用到了equals方法</li><li>使用hashCode是为了提高比较效率，使用equals是防止有hashCode冲突（如BM和C.）</li></ul></li><li>第二个用来根据x的值来决定输出语句</li></ul></li></ul><h4 id="switch枚举"><a href="#switch枚举" class="headerlink" title="switch枚举"></a>switch枚举</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo7</span> &#123;</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>      SEX sex = SEX.MALE;<br>      <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (sex) &#123;<br>         <span class="hljs-keyword">case</span> MALE:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;man&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> FEMALE:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;woman&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SEX</span> &#123;</span><br>   MALE, FEMALE;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>编译器中执行的代码如下</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo7</span> &#123;</span><br>   <span class="hljs-comment">/**     </span><br><span class="hljs-comment">    * 定义一个合成类（仅 jvm 使用，对我们不可见）     </span><br><span class="hljs-comment">    * 用来映射枚举的 ordinal 与数组元素的关系     </span><br><span class="hljs-comment">    * 枚举的 ordinal 表示枚举对象的序号，从 0 开始     </span><br><span class="hljs-comment">    * 即 MALE 的 ordinal()=0，FEMALE 的 ordinal()=1     </span><br><span class="hljs-comment">    */</span> <br>   <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> $<span class="hljs-title">MAP</span> &#123;</span><br>      <span class="hljs-comment">//数组大小即为枚举元素个数，里面存放了case用于比较的数字</span><br>      <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span>[] map = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">static</span> &#123;<br>         <span class="hljs-comment">//ordinal即枚举元素对应所在的位置，MALE为0，FEMALE为1</span><br>         map[SEX.MALE.<span class="hljs-built_in">ordinal</span>()] = <span class="hljs-number">1</span>;<br>         map[SEX.FEMALE.<span class="hljs-built_in">ordinal</span>()] = <span class="hljs-number">2</span>;<br>      &#125;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br>      SEX sex = SEX.MALE;<br>      <span class="hljs-comment">//将对应位置枚举元素的值赋给x，用于case操作</span><br>      <span class="hljs-keyword">int</span> x = $MAP.map[sex.<span class="hljs-built_in">ordinal</span>()];<br>      <span class="hljs-built_in"><span class="hljs-keyword">switch</span></span> (x) &#123;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;man&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;woman&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>         <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SEX</span> &#123;</span><br>   MALE, FEMALE;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h4><figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs capnproto"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">SEX</span> </span>&#123;<br>   MALE, FEMALE;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sex</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Enum</span>&lt;<span class="hljs-title">Sex</span>&gt; </span>&#123;   <br>   <span class="hljs-comment">//对应枚举类中的元素</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">final</span> Sex MALE;    <br>   <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">final</span> Sex FEMALE;    <br>   <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-keyword">final</span> Sex[] <span class="hljs-variable">$VALUES</span>;<br>   <br>    <span class="hljs-built_in">static</span> &#123;       <br>    <span class="hljs-comment">//调用构造函数，传入枚举元素的值及ordinal</span><br>    MALE = <span class="hljs-keyword">new</span> Sex(<span class="hljs-string">&quot;MALE&quot;</span>, <span class="hljs-number">0</span>);    <br>        FEMALE = <span class="hljs-keyword">new</span> Sex(<span class="hljs-string">&quot;FEMALE&quot;</span>, <span class="hljs-number">1</span>);   <br>        <span class="hljs-variable">$VALUES</span> = <span class="hljs-keyword">new</span> Sex[]&#123;MALE, FEMALE&#125;; <br>   &#125;<br> <br>   <span class="hljs-comment">//调用父类中的方法</span><br>    <span class="hljs-keyword">private</span> Sex(<span class="hljs-keyword">String</span> name, <span class="hljs-keyword">int</span> ordinal) &#123;     <br>        super(name, ordinal);    <br>    &#125;<br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> Sex[] values() &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$VALUES</span>.<span class="hljs-keyword">clone</span>();  <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> Sex valueOf(<span class="hljs-keyword">String</span> name) &#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">Enum</span>.valueOf(Sex.<span class="hljs-keyword">class</span>, name);  <br>    &#125; <br>   <br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>      Runnable runnable = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>转换后的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-comment">//用额外创建的类来创建匿名内部类对象</span><br>      Runnable runnable = <span class="hljs-keyword">new</span> Demo8$<span class="hljs-number">1</span>();<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">//创建了一个额外的类，实现了Runnable接口</span><br><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span>$1 <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> Demo8$<span class="hljs-number">1</span>() &#123;&#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;running...&quot;</span>);<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>如果匿名内部类中引用了<strong>局部变量</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span> </span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span> &#123;<br>      int x = <span class="hljs-number">1</span>;<br>      Runnable runnable = <span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Runnable</span>(<span class="hljs-params"></span>)</span> &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span> &#123;<br>            System.out.println(x);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>转化后代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span> </span>&#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>      <span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>;<br>      Runnable runnable = <span class="hljs-keyword">new</span> Runnable() &#123;<br>         <span class="hljs-meta">@Override</span><br>         <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            System.out.println(x);<br>         &#125;<br>      &#125;;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo8</span>$1 <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span> </span>&#123;<br>   <span class="hljs-comment">//多创建了一个变量</span><br>   <span class="hljs-keyword">int</span> val$x;<br>   <span class="hljs-comment">//变为了有参构造器</span><br>   <span class="hljs-keyword">public</span> Demo8$<span class="hljs-number">1</span>(<span class="hljs-keyword">int</span> x) &#123;<br>      <span class="hljs-keyword">this</span>.val$x = x;<br>   &#125;<br><br>   <span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>      System.out.println(val$x);<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h3 id="4、类加载阶段"><a href="#4、类加载阶段" class="headerlink" title="4、类加载阶段"></a>4、类加载阶段</h3><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ul><li><p>将类的字节码载入</p><p>方法区</p><p>（1.8后为元空间，在本地内存中）中，内部采用 C++ 的 instanceKlass 描述 java 类，它的重要 ﬁeld 有：</p><ul><li>_java_mirror 即 java 的类镜像，例如对 String 来说，它的镜像类就是 String.class，作用是把 klass 暴露给 java 使用</li><li>_super 即父类</li><li>_ﬁelds 即成员变量</li><li>_methods 即方法</li><li>_constants 即常量池</li><li>_class_loader 即类加载器</li><li>_vtable 虚方法表</li><li>_itable 接口方法</li></ul></li><li><p>如果这个类还有父类没有加载，<strong>先加载父类</strong></p></li><li><p>加载和链接可能是<strong>交替运行</strong>的</p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611205050.png" alt="img"></a></p><ul><li>instanceKlass保存在<strong>方法区</strong>。JDK 8以后，方法区位于元空间中，而元空间又位于本地内存中</li><li>_java_mirror则是保存在<strong>堆内存</strong>中</li><li>InstanceKlass和*.class(JAVA镜像类)互相保存了对方的地址</li><li>类的对象在对象头中保存了*.class的地址。让对象可以通过其找到方法区中的instanceKlass，从而获取类的各种信息</li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>验证类是否符合 JVM规范，安全性检查</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>为 static 变量分配空间，设置默认值</p><ul><li>static变量在JDK 7以前是存储与instanceKlass末尾。但在JDK 7以后就存储在_java_mirror末尾了</li><li>static变量在分配空间和赋值是在两个阶段完成的。分配空间在准备阶段完成，赋值在初始化阶段完成</li><li>如果 static 变量是 ﬁnal 的<strong>基本类型</strong>，以及<strong>字符串常量</strong>，那么编译阶段值就确定了，<strong>赋值在准备阶段完成</strong></li><li>如果 static 变量是 ﬁnal 的，但属于<strong>引用类型</strong>，那么赋值也会在<strong>初始化阶段完成</strong></li></ul><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p><strong>HSDB的使用</strong></p><ul><li>先获得要查看的进程ID</li></ul><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">jpsCopy</span><br></code></pre></td></tr></table></figure><ul><li>打开HSDB</li></ul><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">java -cp F:<span class="hljs-symbol">\J</span>AVA<span class="hljs-symbol">\J</span>DK8.0<span class="hljs-symbol">\l</span>ib<span class="hljs-symbol">\s</span>a-jdi.jar sun.jvm.hotspot.HSDBCopy<br></code></pre></td></tr></table></figure><ul><li>运行时可能会报错，是因为<strong>缺少一个.dll的文件</strong>，我们在JDK的安装目录中找到该文件，复制到缺失的文件下即可</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221703.png" alt="img"></a></p><ul><li>定位需要的进程</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221857.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611221857.png" alt="img"></a></p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611222029.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611222029.png" alt="img"></a></p><p><strong>解析的含义</strong></p><p>将常量池中的符号引用解析为直接引用</p><ul><li>未解析时，常量池中的看到的对象仅是符号，未真正的存在于内存中</li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> Demo1 &#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>      ClassLoader loader = Demo1.<span class="hljs-keyword">class</span>.getClassLoader();<br>      <span class="hljs-comment">//只加载不解析</span><br>      <span class="hljs-keyword">Class</span>&lt;?&gt; c = loader.loadClass(<span class="hljs-string">&quot;com.nyima.JVM.day8.C&quot;</span>);<br>      <span class="hljs-comment">//用于阻塞主线程</span><br>      System.in.<span class="hljs-keyword">read</span>();<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> C &#123;<br>   D d = <span class="hljs-keyword">new</span> D();<br>&#125;<br><br><span class="hljs-keyword">class</span> D &#123;<br><br>&#125;<span class="hljs-keyword">Copy</span><br></code></pre></td></tr></table></figure><ul><li>打开HSDB<ul><li>可以看到此时只加载了类C</li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223153.png" alt="img"></a></p><p>查看类C的常量池，可以看到类D<strong>未被解析</strong>，只是存在于常量池中的符号</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611230658.png" alt="img"></a></p><ul><li><p>解析以后，会将常量池中的符号引用解析为直接引用</p><ul><li>可以看到，此时已加载并解析了类C和类D</li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200611223441.png" alt="img"></a></p></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200613104723.png" alt="img"></a></p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>初始化阶段就是<strong>执行类构造器clinit()方法的过程</strong>，虚拟机会保证这个类的『构造方法』的线程安全</p><ul><li>clinit()方法是由编译器自动收集类中的所有类变量的<strong>赋值动作和静态语句块</strong>（static{}块）中的语句合并产生的</li></ul><p><strong>注意</strong></p><p>编译器收集的顺序是由语句在源文件中<strong>出现的顺序决定</strong>的，静态语句块中只能访问到定义在静态语句块之前的变量，定义在它<strong>之后</strong>的变量，在前面的静态语句块<strong>可以赋值，但是不能访问</strong>，如</p><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20201118204542.png" alt="img"></a></p><h5 id="发生时机"><a href="#发生时机" class="headerlink" title="发生时机"></a>发生时机</h5><p><strong>类的初始化的懒惰的</strong>，以下情况会初始化</p><ul><li>main 方法所在的类，总会被首先初始化</li><li>首次访问这个类的静态变量或静态方法时</li><li>子类初始化，如果父类还没初始化，会引发</li><li>子类访问父类的静态变量，只会触发父类的初始化</li><li>Class.forName</li><li>new 会导致初始化</li></ul><p>以下情况不会初始化</p><ul><li>访问类的 static ﬁnal 静态常量（基本类型和字符串）</li><li>类对象.class 不会触发初始化</li><li>创建该类对象的数组</li><li>类加载器的.loadClass方法</li><li>Class.forNamed的参数2为false时</li></ul><p><strong>验证类是否被初始化，可以看改类的静态代码块是否被执行</strong></p><h3 id="5、类加载器"><a href="#5、类加载器" class="headerlink" title="5、类加载器"></a>5、类加载器</h3><p>Java虚拟机设计团队有意把类加载阶段中的<strong>“通过一个类的全限定名来获取描述该类的二进制字节流”</strong>这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需的类。实现这个动作的代码被称为<strong>“类加载器”</strong>（ClassLoader）</p><h4 id="类与类加载器"><a href="#类与类加载器" class="headerlink" title="类与类加载器"></a>类与类加载器</h4><p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远超类加载阶段</p><p>对于任意一个类，都必须由加载它的<strong>类加载器</strong>和这个<strong>类本身</strong>一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。这句话可以表达得更通俗一些：<strong>比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义</strong>，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等</p><p>以JDK 8为例</p><table><thead><tr><th>名称</th><th>加载的类</th><th>说明</th></tr></thead><tbody><tr><td>Bootstrap ClassLoader（启动类加载器）</td><td>JAVA_HOME/jre/lib</td><td>无法直接访问</td></tr><tr><td>Extension ClassLoader(拓展类加载器)</td><td>JAVA_HOME/jre/lib/ext</td><td>上级为Bootstrap，<strong>显示为null</strong></td></tr><tr><td>Application ClassLoader(应用程序类加载器)</td><td>classpath</td><td>上级为Extension</td></tr><tr><td>自定义类加载器</td><td>自定义</td><td>上级为Application</td></tr></tbody></table><h4 id="启动类加载器"><a href="#启动类加载器" class="headerlink" title="启动类加载器"></a>启动类加载器</h4><p>可通过在控制台输入指令，使得类被启动类加器加载</p><h4 id="拓展类加载器"><a href="#拓展类加载器" class="headerlink" title="拓展类加载器"></a>拓展类加载器</h4><p>如果classpath和JAVA_HOME/jre/lib/ext 下有同名类，加载时会使用<strong>拓展类加载器</strong>加载。当应用程序类加载器发现拓展类加载器已将该同名类加载过了，则不会再次加载</p><h4 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h4><p>双亲委派模式，即调用类加载器ClassLoader 的 loadClass 方法时，查找类的规则</p><p>loadClass源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">protected Class&lt;?&gt; load<span class="hljs-constructor">Class(String <span class="hljs-params">name</span>, <span class="hljs-params">boolean</span> <span class="hljs-params">resolve</span>)</span><br>    throws ClassNotFoundException<br>&#123;<br>    synchronized (get<span class="hljs-constructor">ClassLoadingLock(<span class="hljs-params">name</span>)</span>) &#123;<br>        <span class="hljs-comment">// 首先查找该类是否已经被该类加载器加载过了</span><br>        Class&lt;?&gt; c = find<span class="hljs-constructor">LoadedClass(<span class="hljs-params">name</span>)</span>;<br>        <span class="hljs-comment">//如果没有被加载过</span><br>        <span class="hljs-keyword">if</span> (c<span class="hljs-operator"> == </span>null) &#123;<br>            long t0 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">//看是否被它的上级加载器加载过了 Extension的上级是Bootstarp，但它显示为null</span><br>                <span class="hljs-keyword">if</span> (parent != null) &#123;<br>                    c = parent.load<span class="hljs-constructor">Class(<span class="hljs-params">name</span>, <span class="hljs-params">false</span>)</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//看是否被启动类加载器加载过</span><br>                    c = find<span class="hljs-constructor">BootstrapClassOrNull(<span class="hljs-params">name</span>)</span>;<br>                &#125;<br>            &#125; catch (ClassNotFoundException e) &#123;<br>                <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>                <span class="hljs-comment">// from the non-null parent class loader</span><br>                <span class="hljs-comment">//捕获异常，但不做任何处理</span><br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (c<span class="hljs-operator"> == </span>null) &#123;<br>                <span class="hljs-comment">//如果还是没有找到，先让拓展类加载器调用findClass方法去找到该类，如果还是没找到，就抛出异常</span><br>                <span class="hljs-comment">//然后让应用类加载器去找classpath下找该类</span><br>                long t1 = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>nano<span class="hljs-constructor">Time()</span>;<br>                c = find<span class="hljs-constructor">Class(<span class="hljs-params">name</span>)</span>;<br><br>                <span class="hljs-comment">// 记录时间</span><br>                sun.misc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PerfCounter</span>.</span></span>get<span class="hljs-constructor">ParentDelegationTime()</span>.add<span class="hljs-constructor">Time(<span class="hljs-params">t1</span> - <span class="hljs-params">t0</span>)</span>;<br>                sun.misc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PerfCounter</span>.</span></span>get<span class="hljs-constructor">FindClassTime()</span>.add<span class="hljs-constructor">ElapsedTimeFrom(<span class="hljs-params">t1</span>)</span>;<br>                sun.misc.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PerfCounter</span>.</span></span>get<span class="hljs-constructor">FindClasses()</span>.increment<span class="hljs-literal">()</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (resolve) &#123;<br>            resolve<span class="hljs-constructor">Class(<span class="hljs-params">c</span>)</span>;<br>        &#125;<br>        return c;<br>    &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li>想加载非 classpath 随意路径中的类文件</li><li>通过接口来使用实现，希望解耦时，常用在框架设计</li><li>这些类希望予以隔离，不同应用的同名类都可以加载，不冲突，常见于 tomcat 容器</li></ul><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ul><li>继承ClassLoader父类</li><li>要遵从双亲委派机制，重写 ﬁndClass 方法<ul><li>不是重写loadClass方法，否则不会走双亲委派机制</li></ul></li><li>读取类文件的字节码</li><li>调用父类的 deﬁneClass 方法来加载类</li><li>使用者调用该类加载器的 loadClass 方法</li></ul><h4 id="破坏双亲委派模式"><a href="#破坏双亲委派模式" class="headerlink" title="破坏双亲委派模式"></a>破坏双亲委派模式</h4><ul><li>双亲委派模型的第一次“被破坏”其实发生在双亲委派模型出现之前——即JDK1.2面世以前的“远古”时代<ul><li>建议用户重写findClass()方法，在类加载器中的loadClass()方法中也会调用该方法</li></ul></li><li>双亲委派模型的第二次“被破坏”是由这个模型自身的缺陷导致的<ul><li>如果有基础类型又要调用回用户的代码，此时也会破坏双亲委派模式</li></ul></li><li>双亲委派模型的第三次“被破坏”是由于用户对程序动态性的追求而导致的<ul><li>这里所说的“动态性”指的是一些非常“热”门的名词：代码热替换（Hot Swap）、模块热部署（Hot Deployment）等</li></ul></li></ul><h3 id="6、运行期优化"><a href="#6、运行期优化" class="headerlink" title="6、运行期优化"></a>6、运行期优化</h3><h4 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h4><p>JVM 将执行状态分成了 5 个层次：</p><ul><li>0层：解释执行，用解释器将字节码翻译为机器码</li><li>1层：使用 C1 <strong>即时编译器</strong>编译执行（不带 proﬁling）</li><li>2层：使用 C1 即时编译器编译执行（带基本的profiling）</li><li>3层：使用 C1 即时编译器编译执行（带完全的profiling）</li><li>4层：使用 C2 即时编译器编译执行</li></ul><p>proﬁling 是指在运行过程中收集一些程序执行状态的数据，例如【方法的调用次数】，【循环的 回边次数】等</p><h5 id="即时编译器（JIT）与解释器的区别"><a href="#即时编译器（JIT）与解释器的区别" class="headerlink" title="即时编译器（JIT）与解释器的区别"></a>即时编译器（JIT）与解释器的区别</h5><ul><li>解释器<ul><li>将字节码<strong>解释</strong>为机器码，下次即使遇到相同的字节码，仍会执行重复的解释</li><li>是将字节码解释为针对所有平台都通用的机器码</li></ul></li><li>即时编译器<ul><li>将一些字节码<strong>编译</strong>为机器码，<strong>并存入 Code Cache</strong>，下次遇到相同的代码，直接执行，无需再编译</li><li>根据平台类型，生成平台特定的机器码</li></ul></li></ul><p>对于大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。 执行效率上简单比较一下 Interpreter &lt; C1 &lt; C2，总的目标是发现热点代码（hotspot名称的由 来），并优化这些热点代码</p><h5 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h5><p>逃逸分析（Escape Analysis）简单来讲就是，Java Hotspot 虚拟机可以分析新创建对象的使用范围，并决定是否在 Java 堆上分配内存的一项技术</p><p>逃逸分析的 JVM 参数如下：</p><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li></ul><p>逃逸分析技术在 Java SE 6u23+ 开始支持，并默认设置为启用状态，可以不用额外加这个参数</p><p><strong>对象逃逸状态</strong></p><p><strong>全局逃逸（GlobalEscape）</strong></p><ul><li>即一个对象的作用范围逃出了当前方法或者当前线程，有以下几种场景：<ul><li>对象是一个静态变量</li><li>对象是一个已经发生逃逸的对象</li><li>对象作为当前方法的返回值</li></ul></li></ul><p><strong>参数逃逸（ArgEscape）</strong></p><ul><li>即一个对象被作为方法参数传递或者被参数引用，但在调用过程中不会发生全局逃逸，这个状态是通过被调方法的字节码确定的</li></ul><p><strong>没有逃逸</strong></p><ul><li>即方法中的对象没有发生逃逸</li></ul><p><strong>逃逸分析优化</strong></p><p>针对上面第三点，当一个对象<strong>没有逃逸</strong>时，可以得到以下几个虚拟机的优化</p><p><strong>锁消除</strong></p><p>我们知道线程同步锁是非常牺牲性能的，当编译器确定当前对象只有当前线程使用，那么就会移除该对象的同步锁</p><p>例如，StringBuffer 和 Vector 都是用 synchronized 修饰线程安全的，但大部分情况下，它们都只是在当前线程中用到，这样编译器就会优化移除掉这些锁操作</p><p>锁消除的 JVM 参数如下：</p><ul><li>开启锁消除：-XX:+EliminateLocks</li><li>关闭锁消除：-XX:-EliminateLocks</li></ul><p>锁消除在 JDK8 中都是默认开启的，并且锁消除都要建立在逃逸分析的基础上</p><p><strong>标量替换</strong></p><p>首先要明白标量和聚合量，<strong>基础类型</strong>和<strong>对象的引用</strong>可以理解为<strong>标量</strong>，它们不能被进一步分解。而能被进一步分解的量就是聚合量，比如：对象</p><p>对象是聚合量，它又可以被进一步分解成标量，将其成员变量分解为分散的变量，这就叫做<strong>标量替换</strong>。</p><p>这样，如果一个对象没有发生逃逸，那压根就不用创建它，只会在栈或者寄存器上创建它用到的成员标量，节省了内存空间，也提升了应用程序性能</p><p>标量替换的 JVM 参数如下：</p><ul><li>开启标量替换：-XX:+EliminateAllocations</li><li>关闭标量替换：-XX:-EliminateAllocations</li><li>显示标量替换详情：-XX:+PrintEliminateAllocations</li></ul><p>标量替换同样在 JDK8 中都是默认开启的，并且都要建立在逃逸分析的基础上</p><p><strong>栈上分配</strong></p><p>当对象没有发生逃逸时，该<strong>对象</strong>就可以通过标量替换分解成成员标量分配在<strong>栈内存</strong>中，和方法的生命周期一致，随着栈帧出栈时销毁，减少了 GC 压力，提高了应用程序性能</p><h4 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h4><h5 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a><strong>内联函数</strong></h5><p>内联函数就是在程序编译时，编译器将程序中出现的内联函数的调用表达式用内联函数的函数体来直接进行替换</p><h5 id="JVM内联函数"><a href="#JVM内联函数" class="headerlink" title="JVM内联函数"></a><strong>JVM内联函数</strong></h5><p>C++是否为内联函数由自己决定，Java由<strong>编译器决定</strong>。Java不支持直接声明为内联函数的，如果想让他内联，你只能够向编译器提出请求: 关键字<strong>final修饰</strong> 用来指明那个函数是希望被JVM内联的，如</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSomething</span><span class="hljs-params">()</span> </span>&#123;  <br>        <span class="hljs-comment">// to do something  </span><br>&#125;Copy<br></code></pre></td></tr></table></figure><p>总的来说，一般的函数都不会被当做内联函数，只有声明了final后，编译器才会考虑是不是要把你的函数变成内联函数</p><p>JVM内建有许多运行时优化。首先<strong>短方法</strong>更利于JVM推断。流程更明显，作用域更短，副作用也更明显。如果是长方法JVM可能直接就跪了。</p><p>第二个原因则更重要：<strong>方法内联</strong></p><p>如果JVM监测到一些<strong>小方法被频繁的执行</strong>，它会把方法的调用替换成方法体本身，如：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">private</span> int <span class="hljs-keyword">add</span><span class="hljs-number">4</span>(int <span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">4</span>) &#123; <br>//这里调用了<span class="hljs-keyword">add</span><span class="hljs-number">2</span>方法<br>        return <span class="hljs-keyword">add</span><span class="hljs-number">2</span>(<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">2</span>) + <span class="hljs-keyword">add</span><span class="hljs-number">2</span>(<span class="hljs-keyword">x</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span><span class="hljs-number">4</span>)<span class="hljs-comment">;  </span><br>    &#125;  <br><br>    <span class="hljs-keyword">private</span> int <span class="hljs-keyword">add</span><span class="hljs-number">2</span>(int <span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">2</span>) &#123;  <br>        return <span class="hljs-keyword">x</span><span class="hljs-number">1</span> + <span class="hljs-keyword">x</span><span class="hljs-number">2</span><span class="hljs-comment">;  </span><br>    &#125;Copy<br></code></pre></td></tr></table></figure><p>方法调用被替换后</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">private</span> int <span class="hljs-keyword">add</span><span class="hljs-number">4</span>(int <span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span> int <span class="hljs-keyword">x</span><span class="hljs-number">4</span>) &#123;  <br>    //被替换为了方法本身<br>        return <span class="hljs-keyword">x</span><span class="hljs-number">1</span> + <span class="hljs-keyword">x</span><span class="hljs-number">2</span> + <span class="hljs-keyword">x</span><span class="hljs-number">3</span> + <span class="hljs-keyword">x</span><span class="hljs-number">4</span><span class="hljs-comment">;  </span><br>    &#125;Copy<br></code></pre></td></tr></table></figure><h4 id="反射优化"><a href="#反射优化" class="headerlink" title="反射优化"></a>反射优化</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Reflect1</span> &#123;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>)</span> &#123;<br>      System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;foo...&quot;</span>);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] args</span>) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException</span> &#123;<br>      Method foo = Demo3.<span class="hljs-keyword">class</span>.getMethod(<span class="hljs-string">&quot;foo&quot;</span>);<br>      <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i&lt;=<span class="hljs-number">16</span>; i++) &#123;<br>         foo.invoke(<span class="hljs-literal">null</span>);<br>      &#125;<br>   &#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>foo.invoke 前面 0 ~ 15 次调用使用的是 MethodAccessor 的 NativeMethodAccessorImpl 实现</p><p>invoke方法源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@CallerSensitive<br>public Object invoke(Object obj, Object... args)<br>    throws IllegalAccessException, IllegalArgumentException,<br>       InvocationTargetException<br>&#123;<br>    <span class="hljs-keyword">if</span> (!override) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflection</span>.</span></span>quick<span class="hljs-constructor">CheckMemberAccess(<span class="hljs-params">clazz</span>, <span class="hljs-params">modifiers</span>)</span>) &#123;<br>            Class&lt;?&gt; caller = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Reflection</span>.</span></span>get<span class="hljs-constructor">CallerClass()</span>;<br>            check<span class="hljs-constructor">Access(<span class="hljs-params">caller</span>, <span class="hljs-params">clazz</span>, <span class="hljs-params">obj</span>, <span class="hljs-params">modifiers</span>)</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//MethodAccessor是一个接口，有3个实现类，其中有一个是抽象类</span><br>    MethodAccessor ma = methodAccessor;             <span class="hljs-comment">// read volatile</span><br>    <span class="hljs-keyword">if</span> (ma<span class="hljs-operator"> == </span>null) &#123;<br>        ma = acquire<span class="hljs-constructor">MethodAccessor()</span>;<br>    &#125;<br>    return ma.invoke(obj, args);<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614133554.png" alt="img"></a></p><p>会由DelegatingMehodAccessorImpl去调用NativeMethodAccessorImpl</p><p>NativeMethodAccessorImpl源码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> NativeMethodAccessorImpl extends MethodAccessorImpl &#123;<br>    <span class="hljs-keyword">private</span> final Method <span class="hljs-keyword">method</span>;<br>    <span class="hljs-keyword">private</span> DelegatingMethodAccessorImpl parent;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">int</span> numInvocations;<br><br>    <span class="hljs-constructor">NativeMethodAccessorImpl(Method <span class="hljs-params">var1</span>)</span> &#123;<br>        this.<span class="hljs-keyword">method</span> = var1;<br>    &#125;<br><br><span class="hljs-comment">//每次进行反射调用，会让numInvocation与ReflectionFactory.inflationThreshold的值（15）进行比较，并使使得numInvocation的值加一</span><br><span class="hljs-comment">//如果numInvocation&gt;ReflectionFactory.inflationThreshold，则会调用本地方法invoke0方法</span><br>    public Object invoke(Object var1, Object<span class="hljs-literal">[]</span> var2) throws IllegalArgumentException, InvocationTargetException &#123;<br>        <span class="hljs-keyword">if</span> (++this.numInvocations &gt; <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectionFactory</span>.</span></span>inflation<span class="hljs-constructor">Threshold()</span><span class="hljs-operator"> &amp;&amp; </span>!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ReflectUtil</span>.</span></span>is<span class="hljs-constructor">VMAnonymousClass(<span class="hljs-params">this</span>.<span class="hljs-params">method</span>.<span class="hljs-params">getDeclaringClass</span>()</span>)) &#123;<br>            MethodAccessorImpl var3 = (MethodAccessorImpl)(<span class="hljs-keyword">new</span> <span class="hljs-constructor">MethodAccessorGenerator()</span>).generate<span class="hljs-constructor">Method(<span class="hljs-params">this</span>.<span class="hljs-params">method</span>.<span class="hljs-params">getDeclaringClass</span>()</span>, this.<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Name()</span>, this.<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">ParameterTypes()</span>, this.<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">ReturnType()</span>, this.<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">ExceptionTypes()</span>, this.<span class="hljs-keyword">method</span>.get<span class="hljs-constructor">Modifiers()</span>);<br>            this.parent.set<span class="hljs-constructor">Delegate(<span class="hljs-params">var3</span>)</span>;<br>        &#125;<br><br>        return invoke0(this.<span class="hljs-keyword">method</span>, var1, var2);<br>    &#125;<br><br>    void set<span class="hljs-constructor">Parent(DelegatingMethodAccessorImpl <span class="hljs-params">var1</span>)</span> &#123;<br>        this.parent = var1;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> static native Object invoke0(Method var0, Object var1, Object<span class="hljs-literal">[]</span> var2);<br>&#125;Copy<br><span class="hljs-comment">//ReflectionFactory.inflationThreshold()方法的返回值</span><br><span class="hljs-keyword">private</span> static <span class="hljs-built_in">int</span> inflationThreshold = <span class="hljs-number">15</span>;Copy<br></code></pre></td></tr></table></figure><ul><li>一开始if条件不满足，就会调用本地方法invoke0</li><li>随着numInvocation的增大，当它大于ReflectionFactory.inflationThreshold的值16时，就会本地方法访问器替换为一个运行时动态生成的访问器，来提高效率<ul><li>这时会从反射调用变为<strong>正常调用</strong>，即直接调用 Reflect1.foo()</li></ul></li></ul><p><a href="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614135011.png"><img src="https://nyimapicture.oss-cn-beijing.aliyuncs.com/img/20200614135011.png" alt="img"></a></p><h2 id="五、内存模型"><a href="#五、内存模型" class="headerlink" title="五、内存模型"></a>五、内存模型</h2><p>内存模型内容详见 <a href="https://nyimac.gitee.io/2020/06/08/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/#%E5%9B%9B%E3%80%81%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E5%86%85%E5%AD%98">JAVA并发 第四章</a></p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>成为很厉害很厉害的人</title>
    <link href="/2021/10/18/%E8%A6%81%E6%80%8E%E6%A0%B7%E5%8A%AA%E5%8A%9B%E6%89%8D%E8%83%BD%E6%88%90%E4%B8%BA%E5%BE%88%E5%8E%89%E5%AE%B3%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA/"/>
    <url>/2021/10/18/%E8%A6%81%E6%80%8E%E6%A0%B7%E5%8A%AA%E5%8A%9B%E6%89%8D%E8%83%BD%E6%88%90%E4%B8%BA%E5%BE%88%E5%8E%89%E5%AE%B3%E5%BE%88%E5%8E%89%E5%AE%B3%E7%9A%84%E4%BA%BA/</url>
    
    <content type="html"><![CDATA[<p>我以前啊，和你一样，很想成为一个很厉害很厉害的人。</p><p>喜欢看热血的东西，幻想自己是屠龙的勇士，登塔的先锋，我左手有剑，右手有光，没头没脑的燃烧自己，敌人的骑军来了，我说你们何人堪与之战，我的女人在等我。</p><p>后来我现实了一点，我觉得我要成为那种说走就走，说日就日的男人，我梳大背头，流浪在欧洲或者新几内亚，我拍孩子，拍野兽，拍流浪的雏妓，与罗伯特德尼罗握手，说嘿，我给你写了愤怒的公牛2。</p><p>再后来，我觉得我人生梦想，是在城市中心买上一间顶层公寓，把一整面墙都改造成钢化玻璃，在灯火通明的夜晚，我就要端着酒站在巨大的窗前，看整个城市在呼吸，然后我的朋友们扣门，他带来了一打嫩模，我们就玩一些成年人的游戏。</p><p>现在，我发现龙并不存在，我不会骑马，不会用单发，家住2楼，我能做的，就是把眼前的事儿做好，赚到足够多的钱，这样我可以给我的姑娘一个地球仪，然后用飞镖扎它，扎到哪儿，就去哪儿玩。</p><p>这样看来，虽然我的想法随着生殖器的发育，始终在变，但很厉害很厉害的人，一直离我很远，甚至越来越远。</p><p>我心中执剑的少年，刺客也混迹市井之间。</p><p>血似乎都凉了。</p><p>我也不是没有彷徨过，是不是我的一生，都不能左后持剑，右手握着罗伯特德尼罗，说这里的嫩模随便你玩，但是你他妈的别从窗户上掉下去。</p><p>这样一看，我逊的不行，我的朋友的都是一些凡人，比我还逊，业余生活就是推塔、中单、跪。</p><p>我心想，我是不是这辈子都要做一个逊逼，直到我的坟墓上写好墓志铭，我甚至都想好了：</p><p>我来，我见，我挂了。</p><p>最后我给了自己一个否定的答复，我不要。</p><p>我喜欢我的朋友们，喜欢现在的生活，首先我希望你明白，没有厉害与逊逼之分，只有血的凉与热，有的人觉得生活就这样吧，我算了，现在没什么不好。</p><p>这种只要剧情稍微热血一点就会热泪盈眶的傻逼，已经不多了，一刻也不要停留。</p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux</title>
    <link href="/2021/10/14/Linux/"/>
    <url>/2021/10/14/Linux/</url>
    
    <content type="html"><![CDATA[<h3 id="uname-r"><a href="#uname-r" class="headerlink" title="uname -r"></a>uname -r</h3><p> 显示操作系统的发行版号</p><h3 id="uname-a"><a href="#uname-a" class="headerlink" title="uname -a"></a>uname -a</h3><p>显示系统名、节点名称、操作系统的发行版号、内核版本等等。</p><h3 id="cat-etc-os-release"><a href="#cat-etc-os-release" class="headerlink" title="cat /etc/os-release"></a>cat /etc/os-release</h3><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@iZ1608aqb7ntn9Z /]<span class="hljs-comment"># uname -r</span><br>4.18.0-193.14.2.el8_2.x86_64<br>[root@iZ1608aqb7ntn9Z /]<span class="hljs-comment"># cat /etc/os-release</span><br>NAME=<span class="hljs-string">&quot;CentOS Linux&quot;</span><br>VERSION=<span class="hljs-string">&quot;8 (Core)&quot;</span><br>ID=<span class="hljs-string">&quot;centos&quot;</span><br>ID_LIKE=<span class="hljs-string">&quot;rhel fedora&quot;</span><br>VERSION_ID=<span class="hljs-string">&quot;8&quot;</span><br>PLATFORM_ID=<span class="hljs-string">&quot;platform:el8&quot;</span><br>PRETTY_NAME=<span class="hljs-string">&quot;CentOS Linux 8 (Core)&quot;</span><br>ANSI_COLOR=<span class="hljs-string">&quot;0;31&quot;</span><br>CPE_NAME=<span class="hljs-string">&quot;cpe:/o:centos:centos:8&quot;</span><br>HOME_URL=<span class="hljs-string">&quot;https://www.centos.org/&quot;</span><br>BUG_REPORT_URL=<span class="hljs-string">&quot;https://bugs.centos.org/&quot;</span><br><br>CENTOS_MANTISBT_PROJECT=<span class="hljs-string">&quot;CentOS-8&quot;</span><br>CENTOS_MANTISBT_PROJECT_VERSION=<span class="hljs-string">&quot;8&quot;</span><br>REDHAT_SUPPORT_PRODUCT=<span class="hljs-string">&quot;centos&quot;</span><br>REDHAT_SUPPORT_PRODUCT_VERSION=<span class="hljs-string">&quot;8&quot;</span><br></code></pre></td></tr></table></figure><h3 id="free-m"><a href="#free-m" class="headerlink" title="free -m"></a>free -m</h3><p>查看可以用的内存</p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><p>给文件写入值</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name elasticsearch -p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> -p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> \ <br>-e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> \ <br>-v        <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>config/elasticsearch.yml \ <br>-v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/data:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/data \ <br>-v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/plugins:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/plugins \ <br>-d elasticsearch:<span class="hljs-number">7.4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="线程运行诊断"><a href="#线程运行诊断" class="headerlink" title="线程运行诊断"></a>线程运行诊断</h3><p>CPU占用过高</p><ul><li>Linux环境下运行某些程序的时候，可能导致CPU的占用过高，这时需要定位占用CPU过高的线程<ul><li><strong>top</strong>命令，查看是哪个<strong>进程</strong>占用CPU过高</li><li><strong>ps H -eo pid, tid（线程id）, %cpu | grep 刚才通过top查到的进程号</strong> 通过ps命令进一步查看是哪个线程占用CPU过高</li><li><strong>jstack 进程id</strong> 通过查看进程中的线程的nid，刚才通过ps命令看到的tid来<strong>对比定位</strong>，注意jstack查找出的线程id是<strong>16进制的</strong>，<strong>需要转换</strong></li></ul></li></ul><h3 id="进入docker-中的-Container"><a href="#进入docker-中的-Container" class="headerlink" title="进入docker 中的 Container"></a>进入docker 中的 Container</h3><p><code>**docker container exec -it f0b1c8ab3633 /bin/bash**</code></p><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>cp xxx.txt xxxx.txt</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker</title>
    <link href="/2021/10/14/docker/"/>
    <url>/2021/10/14/docker/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="DOcker"><a href="#DOcker" class="headerlink" title="DOcker"></a>DOcker</h3><p><strong>软件可以带环境安装</strong></p><p>Docker是基于Go语言实现的云开源项目。</p><h3 id="容器虚拟化技术"><a href="#容器虚拟化技术" class="headerlink" title="容器虚拟化技术"></a>容器虚拟化技术</h3><p>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</p><h3 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h3><ul><li>镜像（image)：</li></ul><p>docker镜像就好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像==&gt;run==&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</p><ul><li>容器(container)：</li></ul><p>Docker利用容器技术，独立运行一个或者一组应用，通过镜像来创建的.</p><p>启动，停止，删除，基本命令</p><p>目前就可以把这个容器理解为就是一个简易的 Linux系统。</p><ul><li>仓库(repository)：</li></ul><p>仓库就是存放镜像的地方！</p><p>仓库分为公有仓库和私有仓库。(很类似git)</p><p>Docker Hub是国外的。</p><p>阿里云…都有容器服务器(配置镜像加速!)</p><h3 id="Docker工作原理"><a href="#Docker工作原理" class="headerlink" title="Docker工作原理"></a>Docker工作原理</h3><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。</p><p><img src="/2021/10/14/docker/image-20211014092551973.png" alt="image-20211014092551973"></p><h3 id="为什么比VM快"><a href="#为什么比VM快" class="headerlink" title="为什么比VM快"></a>为什么比VM快</h3><p>1、Dokcer有着比虚拟机更少的抽象层。由于docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>2、docker利用的是宿主机的内核，vm 需要是Guest OS</p><p><img src="https://img-blog.csdnimg.cn/20210719100837873.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>所以说，新建一个容器的时候，docker 不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载 Guest OS，分钟级别的，而docker 是利用宿主机的操作系统，省略了这个复杂的过程，秒级！</p><p><img src="https://img-blog.csdnimg.cn/20210719104158225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1MjIzMTU5NTc0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网站收藏</title>
    <link href="/2021/10/13/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/"/>
    <url>/2021/10/13/%E7%BD%91%E7%AB%99%E6%94%B6%E8%97%8F/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.runoob.com/js/js-this.html">JavaScript学习网站</a></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2021/10/13/JavaScript/"/>
    <url>/2021/10/13/JavaScript/</url>
    
    <content type="html"><![CDATA[<h3 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h3><ul><li>那些老旧的实例可能会在 <script> 标签中使用 type="text/javascript"。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li><p>使用 <strong>window.alert()</strong> 弹出警告框。</p></li><li><p>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</p></li><li><p>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</p></li><li><p>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</p></li></ul><h4 id="使用-window-alert-弹出警告框。"><a href="#使用-window-alert-弹出警告框。" class="headerlink" title="使用 window.alert() 弹出警告框。"></a>使用 <strong>window.alert()</strong> 弹出警告框。</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br><span class="hljs-attribute">window</span>.alert(<span class="hljs-number">5</span> + <span class="hljs-number">6</span>);<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-document-write-方法将内容写到-HTML-文档中。"><a href="#使用-document-write-方法将内容写到-HTML-文档中。" class="headerlink" title="使用 document.write() 方法将内容写到 HTML 文档中。"></a>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;&lt;h1&gt;&quot;</span>+<span class="hljs-built_in">Date</span>()+<span class="hljs-string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;myFunction()&quot;</span>&gt;</span>点我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.write(<span class="hljs-built_in">Date</span>());</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-innerHTML-写入到-HTML-元素。"><a href="#使用-innerHTML-写入到-HTML-元素。" class="headerlink" title="使用 innerHTML 写入到 HTML 元素。"></a>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = <span class="hljs-string">&quot;段落已修改。&quot;</span>;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="使用-console-log-写入到浏览器的控制台。"><a href="#使用-console-log-写入到浏览器的控制台。" class="headerlink" title="使用 console.log() 写入到浏览器的控制台。"></a>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br><span class="hljs-attribute">a</span> = <span class="hljs-number">5</span>;<br><span class="hljs-attribute">b</span> = <span class="hljs-number">6</span>;<br><span class="hljs-attribute">c</span> = a + b;<br><span class="hljs-attribute">console</span>.log(c);<br><span class="hljs-section">&lt;/script&gt;</span><br></code></pre></td></tr></table></figure><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h4><p><strong>数字（Number）字面量</strong>     <code>123e5</code></p><p><strong>字符串（String）字面量</strong></p><p><strong>表达式字面量</strong>         <code>5 + 6</code></p><p><strong>数组（Array）字面量</strong></p><p><strong>对象（Object）字面量</strong> </p><p><strong>函数（Function）字面量</strong></p><h4 id="JavaScript-变量"><a href="#JavaScript-变量" class="headerlink" title="JavaScript 变量"></a>JavaScript 变量</h4><p> <strong>var</strong> 来定义变量</p><h4 id="JavaScript-操作符"><a href="#JavaScript-操作符" class="headerlink" title="JavaScript 操作符"></a>JavaScript 操作符</h4><p><strong>赋值运算符</strong></p><p><strong>算术运算符</strong></p><h4 id="JavaScript-语句"><a href="#JavaScript-语句" class="headerlink" title="JavaScript 语句"></a>JavaScript 语句</h4><p>语句是用分号分隔，用分号来结束语句是可选的。</p><h4 id="JavaScript-关键字"><a href="#JavaScript-关键字" class="headerlink" title="JavaScript 关键字"></a>JavaScript 关键字</h4><p>var</p><h4 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h4><p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p><h4 id="JavaScript-对大小写是敏感的"><a href="#JavaScript-对大小写是敏感的" class="headerlink" title="JavaScript 对大小写是敏感的"></a>JavaScript 对大小写是敏感的</h4><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><h4 id="JavaScript-语句标识符-关键字"><a href="#JavaScript-语句标识符-关键字" class="headerlink" title="JavaScript 语句标识符(关键字)"></a>JavaScript 语句标识符(关键字)</h4><table><thead><tr><th align="left">语句</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">break</td><td align="left">用于跳出循环。</td></tr><tr><td align="left">catch</td><td align="left">语句块，在 try 语句块执行出错时执行 catch 语句块。</td></tr><tr><td align="left">continue</td><td align="left">跳过循环中的一个迭代。</td></tr><tr><td align="left">do … while</td><td align="left">执行一个语句块，在条件语句为 true 时继续执行该语句块。</td></tr><tr><td align="left">for</td><td align="left">在条件语句为 true 时，可以将代码块执行指定的次数。</td></tr><tr><td align="left">for … in</td><td align="left">用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</td></tr><tr><td align="left">function</td><td align="left">定义一个函数</td></tr><tr><td align="left">if … else</td><td align="left">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="left">return</td><td align="left">退出函数</td></tr><tr><td align="left">switch</td><td align="left">用于基于不同的条件来执行不同的动作。</td></tr><tr><td align="left">throw</td><td align="left">抛出（生成）错误 。</td></tr><tr><td align="left">try</td><td align="left">实现错误处理，与 catch 一同使用。</td></tr><tr><td align="left">var</td><td align="left">声明一个变量。</td></tr><tr><td align="left">while</td><td align="left">当条件语句为 true 时，执行语句块。</td></tr></tbody></table><h4 id="对代码行进行折行"><a href="#对代码行进行折行" class="headerlink" title="对代码行进行折行"></a>对代码行进行折行</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">document.<span class="hljs-keyword">write</span>(<span class="hljs-comment">&quot;你好 \</span><br>世界!<span class="hljs-comment">&quot;);</span><br></code></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>当您向变量分配文本值时，应该用双引号或单引号包围这个值。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var person</span>=<span class="hljs-string">&quot;John Doe&quot;</span>;<br><span class="hljs-attribute">var answer</span>=<span class="hljs-string">&#x27;Yes I am!&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="一条语句，多个变量"><a href="#一条语句，多个变量" class="headerlink" title="一条语句，多个变量"></a>一条语句，多个变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">lastname</span>=<span class="hljs-string">&quot;Doe&quot;</span>, <span class="hljs-attribute">age</span>=30, <span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;carpenter&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">lastname</span>=<span class="hljs-string">&quot;Doe&quot;</span>,<br><span class="hljs-attribute">age</span>=30,<br><span class="hljs-attribute">job</span>=<span class="hljs-string">&quot;carpenter&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">var <span class="hljs-keyword">x</span><span class="hljs-punctuation">,</span>y<span class="hljs-punctuation">,</span>z<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;、</span><br></code></pre></td></tr></table></figure><h4 id="重新声明-JavaScript-变量"><a href="#重新声明-JavaScript-变量" class="headerlink" title="重新声明 JavaScript 变量"></a>重新声明 JavaScript 变量</h4><p><a href="https://www.runoob.com/js/js-let-const.html">https://www.runoob.com/js/js-let-const.html</a></p><p>如果重新声明 JavaScript 变量，<strong>该变量的值不会丢失</strong>：</p><p>在以下两条语句执行后，变量 carname 的值依然是 “Volvo”：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var carname=<span class="hljs-string">&quot;Volvo&quot;</span><span class="hljs-comment">;</span><br>var carname<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="使用-let-和-const-ES6"><a href="#使用-let-和-const-ES6" class="headerlink" title="使用 let 和 const (ES6)"></a>使用 let 和 const (ES6)</h4><p>ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p><p>let 声明的变量只在 let 命令所在的代码块内有效。</p><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变</p><h5 id="块级作用域-Block-Scope"><a href="#块级作用域-Block-Scope" class="headerlink" title="块级作用域(Block Scope)"></a>块级作用域(Block Scope)</h5><p>使用 var 关键字声明的变量不具备块级作用域的特性，它在 {} 外依然能被访问到。</p><p>在 ES6 之前，是没有块级作用域的概念的。</p><p>ES6 可以使用 let 关键字来实现块级作用域。</p><p>let 声明的变量只在 let 命令所在的代码块 <strong>{}</strong> 内有效，在 <strong>{}</strong> 之外不能访问。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">var x = <span class="hljs-number">10</span>;<br><span class="hljs-regexp">//</span> 这里输出 x 为 <span class="hljs-number">10</span><br>&#123; <br>    let x = <span class="hljs-number">2</span>;<br>    <span class="hljs-regexp">//</span> 这里输出 x 为 <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-regexp">//</span> 这里输出 x 为 <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h5 id="重置变量"><a href="#重置变量" class="headerlink" title="重置变量"></a>重置变量</h5><p>使用 <strong>var</strong> 关键字声明的变量在任何地方都可以修改：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">2</span>;<br> <br><span class="hljs-comment">// x 为 2</span><br> <br><span class="hljs-keyword">var</span> x = <span class="hljs-number">3</span>;<br> <br><span class="hljs-comment">// 现在 x 为 3</span><br></code></pre></td></tr></table></figure><p><strong>let</strong> 关键字来重置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">var x = <span class="hljs-number">2</span>;       <span class="hljs-regexp">//</span> 合法<br>let x = <span class="hljs-number">3</span>;       <span class="hljs-regexp">//</span> 不合法<br><br>&#123;<br>    var x = <span class="hljs-number">4</span>;   <span class="hljs-regexp">//</span> 合法<br>    let x = <span class="hljs-number">5</span>   <span class="hljs-regexp">//</span> 不合法<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">var x = <span class="hljs-number">2</span>;       <span class="hljs-regexp">//</span> 合法<br>let x = <span class="hljs-number">3</span>;       <span class="hljs-regexp">//</span> 不合法<br><br>&#123;<br>    var x = <span class="hljs-number">4</span>;   <span class="hljs-regexp">//</span> 合法<br>    let x = <span class="hljs-number">5</span>   <span class="hljs-regexp">//</span> 不合法<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">var x = <span class="hljs-number">2</span>;       <span class="hljs-regexp">//</span> 合法<br>let x = <span class="hljs-number">3</span>;       <span class="hljs-regexp">//</span> 不合法<br><br>&#123;<br>    var x = <span class="hljs-number">4</span>;   <span class="hljs-regexp">//</span> 合法<br>    let x = <span class="hljs-number">5</span>   <span class="hljs-regexp">//</span> 不合法<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">var x = <span class="hljs-number">2</span>;       <span class="hljs-regexp">//</span> 合法<br>let x = <span class="hljs-number">3</span>;       <span class="hljs-regexp">//</span> 不合法<br><br>&#123;<br>    var x = <span class="hljs-number">4</span>;   <span class="hljs-regexp">//</span> 合法<br>    let x = <span class="hljs-number">5</span>   <span class="hljs-regexp">//</span> 不合法<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>**值类型(基本类型)**：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</p><h4 id="JavaScript-拥有动态类型"><a href="#JavaScript-拥有动态类型" class="headerlink" title="JavaScript 拥有动态类型"></a>JavaScript 拥有动态类型</h4><p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> x;        <span class="hljs-comment">// x 为 undefined</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">5</span>;      <span class="hljs-comment">// 现在 x 为数字</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-string">&quot;John&quot;</span>;   <span class="hljs-comment">// 现在 x 为字符串</span><br></code></pre></td></tr></table></figure><h4 id="JavaScript-字符串"><a href="#JavaScript-字符串" class="headerlink" title="JavaScript 字符串"></a>JavaScript 字符串</h4><p>字符串是存储字符（比如 “Bill Gates”）的变量。</p><p>字符串可以是引号中的任意文本。<strong>您可以使用单引号或双引号</strong>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">var carname</span>=<span class="hljs-string">&quot;Volvo XC60&quot;</span>;<br><span class="hljs-attribute">var carname</span>=<span class="hljs-string">&#x27;Volvo XC60&#x27;</span>;<br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript 对象是属性变量的容器。</p><h4 id="访问对象属性"><a href="#访问对象属性" class="headerlink" title="访问对象属性"></a>访问对象属性</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">person.lastName<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">person[<span class="hljs-string">&quot;lastName&quot;</span>]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>作用域是可访问变量的集合。</p><h4 id="JavaScript-变量的生存期"><a href="#JavaScript-变量的生存期" class="headerlink" title="JavaScript 变量的生存期"></a>JavaScript 变量的生存期</h4><p>JavaScript 变量的生命期从它们被声明的时间开始。</p><p>局部变量会在函数运行以后被删除。</p><p>全局变量会在页面关闭后被删除。</p><h4 id="向未声明的-JavaScript-变量分配值"><a href="#向未声明的-JavaScript-变量分配值" class="headerlink" title="向未声明的 JavaScript 变量分配值"></a>向未声明的 JavaScript 变量分配值</h4><p>如果您把值赋给尚未声明的变量，该变量将被自动作为 window 的一个属性,且无法删除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> var1 = <span class="hljs-number">1</span>; <span class="hljs-comment">// 不可配置全局属性</span><br>var2 = <span class="hljs-number">2</span>; <span class="hljs-comment">// 没有使用 var 声明，可配置全局属性</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.var1); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.var1); <span class="hljs-comment">// 1</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.var2); <span class="hljs-comment">// 2</span><br><br><span class="hljs-keyword">delete</span> var1; <span class="hljs-comment">// false 无法删除</span><br><span class="hljs-built_in">console</span>.log(var1); <span class="hljs-comment">//1</span><br><br><span class="hljs-keyword">delete</span> var2; <br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">delete</span> var2); <span class="hljs-comment">// true</span><br><span class="hljs-built_in">console</span>.log(var2); <span class="hljs-comment">// 已经删除 报错变量未定义</span><br></code></pre></td></tr></table></figure><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>HTML 事件是发生在 HTML 元素上的事情。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;getElementById(&#x27;demo&#x27;).innerHTML=Date()&quot;</span>&gt;现在的时间是?&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;displayDate()&quot;</span>&gt;现在的时间是?&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><p>两种方式均可以</p><h4 id="常见的HTML事件"><a href="#常见的HTML事件" class="headerlink" title="常见的HTML事件"></a>常见的HTML事件</h4><table><thead><tr><th align="left">事件</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onchange</td><td align="left">HTML 元素改变</td></tr><tr><td align="left">onclick</td><td align="left">用户点击 HTML 元素</td></tr><tr><td align="left">onmouseover</td><td align="left">用户在一个HTML元素上移动鼠标</td></tr><tr><td align="left">onmouseout</td><td align="left">用户从一个HTML元素上移开鼠标</td></tr><tr><td align="left">onkeydown</td><td align="left">用户按下键盘按键</td></tr><tr><td align="left">onload</td><td align="left">浏览器已完成页面的加载</td></tr></tbody></table><p>更多<a href="https://www.runoob.com/jsref/dom-obj-event.html">https://www.runoob.com/jsref/dom-obj-event.html</a></p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p> 不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> y = <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;John&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">var x = &quot;John&quot;;       <br>var y = new String(&quot;John&quot;);<br>(x === y) // 结果为 false，因为 x 是字符串，y 是对象<br><span class="hljs-section">=== 为绝对相等，即数据类型与值都必须相等。</span><br></code></pre></td></tr></table></figure><h4 id="字符串属性"><a href="#字符串属性" class="headerlink" title="字符串属性"></a>字符串属性</h4><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">constructor</td><td align="left">返回创建字符串属性的函数</td></tr><tr><td align="left">length</td><td align="left">返回字符串的长度</td></tr><tr><td align="left">prototype</td><td align="left">允许您向对象添加属性和方法</td></tr></tbody></table><h4 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h4><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">charAt()</td><td align="left">返回指定索引位置的字符</td></tr><tr><td align="left">charCodeAt()</td><td align="left">返回指定索引位置字符的 Unicode 值</td></tr><tr><td align="left">concat()</td><td align="left">连接两个或多个字符串，返回连接后的字符串</td></tr><tr><td align="left">fromCharCode()</td><td align="left">将 Unicode 转换为字符串</td></tr><tr><td align="left">indexOf()</td><td align="left">返回字符串中检索指定字符第一次出现的位置</td></tr><tr><td align="left">lastIndexOf()</td><td align="left">返回字符串中检索指定字符最后一次出现的位置</td></tr><tr><td align="left">localeCompare()</td><td align="left">用本地特定的顺序来比较两个字符串</td></tr><tr><td align="left">match()</td><td align="left">找到一个或多个正则表达式的匹配</td></tr><tr><td align="left">replace()</td><td align="left">替换与正则表达式匹配的子串</td></tr><tr><td align="left">search()</td><td align="left">检索与正则表达式相匹配的值</td></tr><tr><td align="left">slice()</td><td align="left">提取字符串的片断，并在新的字符串中返回被提取的部分</td></tr><tr><td align="left">split()</td><td align="left">把字符串分割为子字符串数组</td></tr><tr><td align="left">substr()</td><td align="left">从起始索引号提取字符串中指定数目的字符</td></tr><tr><td align="left">substring()</td><td align="left">提取字符串中两个指定的索引号之间的字符</td></tr><tr><td align="left">toLocaleLowerCase()</td><td align="left">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLocaleUpperCase()</td><td align="left">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td></tr><tr><td align="left">toLowerCase()</td><td align="left">把字符串转换为小写</td></tr><tr><td align="left">toString()</td><td align="left">返回字符串对象值</td></tr><tr><td align="left">toUpperCase()</td><td align="left">把字符串转换为大写</td></tr><tr><td align="left">trim()</td><td align="left">移除字符串首尾空白</td></tr><tr><td align="left">valueOf()</td><td align="left">返回某个字符串对象的原始值</td></tr></tbody></table><h3 id="运算符、比较"><a href="#运算符、比较" class="headerlink" title="运算符、比较"></a>运算符、比较</h3><h3 id="swith语句"><a href="#swith语句" class="headerlink" title="swith语句"></a>swith语句</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">switch</span>(n)<br>&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        执行代码块 <span class="hljs-number">1</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        执行代码块 <span class="hljs-number">2</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        与 <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> 和 <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> 不同时执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="for、while、continue、break"><a href="#for、while、continue、break" class="headerlink" title="for、while、continue、break"></a>for、while、continue、break</h3><h3 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h3><p>你可以使用 typeof 操作符来检测变量的数据类型。</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">typeof</span> <span class="hljs-string">&quot;John&quot;</span>                <span class="hljs-comment">// 返回 string</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-number">3.14</span>                  <span class="hljs-comment">// 返回 number</span><br><span class="hljs-built_in">typeof</span> <span class="hljs-literal">false</span>                 <span class="hljs-comment">// 返回 boolean</span><br><span class="hljs-built_in">typeof</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]             <span class="hljs-comment">// 返回 object</span><br><span class="hljs-built_in">typeof</span> &#123;<span class="hljs-built_in">name</span>:<span class="hljs-string">&#x27;John&#x27;</span>, age:<span class="hljs-number">34</span>&#125; <span class="hljs-comment">// 返回 object</span><br></code></pre></td></tr></table></figure><h4 id="undefined-和-null-的区别"><a href="#undefined-和-null-的区别" class="headerlink" title="undefined 和 null 的区别"></a>undefined 和 null 的区别</h4><p><code>null == undefined</code>为true</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>             <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">null</span>                  <span class="hljs-comment">// object</span><br><span class="hljs-literal">null</span> === <span class="hljs-literal">undefined</span>           <span class="hljs-comment">// false</span><br><span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>            <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>在 JavaScript 中有 6 种不同的数据类型：</p><ul><li>string</li><li>number</li><li>boolean</li><li>object</li><li>function</li><li>symbol</li></ul><p>3 种对象类型：</p><ul><li>Object</li><li>Date</li><li>Array</li></ul><p>2 个不包含任何值的数据类型：</p><ul><li>null</li><li>undefined</li></ul><h4 id="数字转换为字符串"><a href="#数字转换为字符串" class="headerlink" title="数字转换为字符串"></a>数字转换为字符串</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(x)</span></span>         <span class="hljs-comment">// 将变量 x 转换为字符串并返回</span><br><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-number">123</span>)</span></span>       <span class="hljs-comment">// 将数字 123 转换为字符串并返回</span><br><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(<span class="hljs-number">100</span> + <span class="hljs-number">23</span>)</span></span>  <span class="hljs-comment">// 将数字表达式转换为字符串并返回</span><br></code></pre></td></tr></table></figure><h4 id="将布尔值转换为字符串"><a href="#将布尔值转换为字符串" class="headerlink" title="将布尔值转换为字符串"></a>将布尔值转换为字符串</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(false)</span></span>        <span class="hljs-comment">// 返回 &quot;false&quot;</span><br><span class="hljs-function"><span class="hljs-title">String</span><span class="hljs-params">(true)</span></span>         <span class="hljs-comment">// 返回 &quot;true&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-literal">false</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>     <span class="hljs-comment">// 返回 &quot;false&quot;</span><br><span class="hljs-literal">true</span>.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>      <span class="hljs-comment">// 返回 &quot;true&quot;</span><br></code></pre></td></tr></table></figure><h4 id="将日期转换为字符串"><a href="#将日期转换为字符串" class="headerlink" title="将日期转换为字符串"></a>将日期转换为字符串</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>())   <br></code></pre></td></tr></table></figure><h4 id="将字符串转换为数字"><a href="#将字符串转换为数字" class="headerlink" title="将字符串转换为数字"></a>将字符串转换为数字</h4><p>全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">Number</span><span class="hljs-params">(<span class="hljs-string">&quot;3.14&quot;</span>)</span></span>  <span class="hljs-comment">// 返回 3.14</span><br><span class="hljs-function"><span class="hljs-title">Number</span><span class="hljs-params">(<span class="hljs-string">&quot; &quot;</span>)</span></span>    <span class="hljs-comment">// 返回 0</span><br><span class="hljs-function"><span class="hljs-title">Number</span><span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span>)</span></span>    <span class="hljs-comment">// 返回 0</span><br><span class="hljs-function"><span class="hljs-title">Number</span><span class="hljs-params">(<span class="hljs-string">&quot;99 88&quot;</span>)</span></span>  <span class="hljs-comment">// 返回 NaN</span><br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><ul><li><p><strong>search() 方法</strong> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</p></li><li><p><strong>replace() 方法</strong> 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</p></li><li><p><strong>exec() 方法</strong>用于检索字符串中的正则表达式的匹配。该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p></li></ul><h3 id="错误-throw、try-和-catch"><a href="#错误-throw、try-和-catch" class="headerlink" title="错误 - throw、try 和 catch"></a>错误 - throw、try 和 catch</h3><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><h4 id="console-log-方法"><a href="#console-log-方法" class="headerlink" title="console.log() 方法"></a>console.log() 方法</h4><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h4><h4 id="debugger-关键字"><a href="#debugger-关键字" class="headerlink" title="debugger 关键字"></a>debugger 关键字</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">var x = <span class="hljs-number">15</span> * <span class="hljs-number">5</span><span class="hljs-comment">;</span><br>debugger<span class="hljs-comment">;</span><br>document.getElementbyId(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = x<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p><strong>服务端数据验证</strong>是在数据提交到服务器上后再验证。</p><p><strong>客户端数据验证</strong>是在数据发送到服务器前，在浏览器上完成验证。</p><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><ul><li>在方法中，this 表示该方法所属的对象。</li><li>如果单独使用，this 表示全局对象。</li><li>在函数中，this 表示全局对象。</li><li>在函数中，在严格模式下，this 是未定义的(undefined)。</li><li>在事件中，this 表示接收事件的元素。</li><li>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</li></ul><h4 id="在方法中，this-表示该方法所属的对象。"><a href="#在方法中，this-表示该方法所属的对象。" class="headerlink" title="在方法中，this 表示该方法所属的对象。"></a>在方法中，this 表示该方法所属的对象。</h4><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attribute">firstName</span>: <span class="hljs-string">&quot;John&quot;</span>,<br>  <span class="hljs-attribute">lastName</span> : <span class="hljs-string">&quot;Doe&quot;</span>,<br>  <span class="hljs-attribute">id       :</span><span class="hljs-string"> 5566,</span><br><span class="hljs-string">  fullName</span> : <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-keyword">this</span>.lastName;<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="如果单独使用，this-表示全局对象。"><a href="#如果单独使用，this-表示全局对象。" class="headerlink" title="如果单独使用，this 表示全局对象。"></a>如果单独使用，this 表示全局对象。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-built_in">this</span>;</span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = x;</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br>[object Window]<br></code></pre></td></tr></table></figure><h4 id="在函数中，this-表示全局对象"><a href="#在函数中，this-表示全局对象" class="headerlink" title="在函数中，this 表示全局对象"></a>在函数中，this 表示全局对象</h4><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>() &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-type">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在函数中，在严格模式下，this-是未定义的-undefined-。"><a href="#在函数中，在严格模式下，this-是未定义的-undefined-。" class="headerlink" title="在函数中，在严格模式下，this 是未定义的(undefined)。"></a>在函数中，在严格模式下，this 是未定义的(undefined)。</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-meta">&quot;use strict&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myFunction</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="在事件中，this-表示接收事件的元素。"><a href="#在事件中，this-表示接收事件的元素。" class="headerlink" title="在事件中，this 表示接收事件的元素。"></a>在事件中，this 表示接收事件的元素。</h4><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs hsp">&lt;<span class="hljs-keyword">button</span> <span class="hljs-keyword">onclick</span>=<span class="hljs-string">&quot;this.style.display=&#x27;none&#x27;&quot;</span>&gt;<br>点我后我就消失了<br>&lt;/<span class="hljs-keyword">button</span>&gt;<br></code></pre></td></tr></table></figure><h4 id="类似-call-和-apply-方法可以将-this-引用到任何对象。"><a href="#类似-call-和-apply-方法可以将-this-引用到任何对象。" class="headerlink" title="类似 call() 和 apply() 方法可以将 this 引用到任何对象。"></a>类似 call() 和 apply() 方法可以将 this 引用到任何对象。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">var</span> person1 = &#123;</span><br><span class="javascript">  <span class="hljs-attr">fullName</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">this</span>.lastName;</span><br><span class="javascript">  &#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">var</span> person2 = &#123;</span><br><span class="javascript">  <span class="hljs-attr">firstName</span>:<span class="hljs-string">&quot;John&quot;</span>,</span><br><span class="javascript">  <span class="hljs-attr">lastName</span>: <span class="hljs-string">&quot;Doe&quot;</span>,</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">var</span> x = person1.fullName.call(person2); </span><br><span class="javascript"><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = x; </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>个人理解<code>var x = person1.fullName.call(person2);</code> call方法相当于把person2 和 this 关联 即<code>person2=this</code></p><h3 id="json"><a href="#json" class="headerlink" title="json"></a>json</h3><h4 id="JSON-字符串转换为-JavaScript-对象"><a href="#JSON-字符串转换为-JavaScript-对象" class="headerlink" title="JSON 字符串转换为 JavaScript 对象"></a>JSON 字符串转换为 JavaScript 对象</h4><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scilab">var text = <span class="hljs-string">&#x27;&#123; &quot;</span>sites<span class="hljs-string">&quot; : [&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;</span>name<span class="hljs-string">&quot;:&quot;</span>Runoob<span class="hljs-string">&quot; , &quot;</span>url<span class="hljs-string">&quot;:&quot;</span>www.runoob.com<span class="hljs-string">&quot; &#125;,&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;</span>name<span class="hljs-string">&quot;:&quot;</span>Google<span class="hljs-string">&quot; , &quot;</span>url<span class="hljs-string">&quot;:&quot;</span>www.google.com<span class="hljs-string">&quot; &#125;,&#x27;</span> +<br>    <span class="hljs-string">&#x27;&#123; &quot;</span>name<span class="hljs-string">&quot;:&quot;</span>Taobao<span class="hljs-string">&quot; , &quot;</span>url<span class="hljs-string">&quot;:&quot;</span>www.taobao.com<span class="hljs-string">&quot; &#125; ]&#125;&#x27;</span>;<br>    <br>obj = JSON.parse(text);<br>document.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML = obj.sites[<span class="hljs-number">1</span>].name + <span class="hljs-string">&quot; &quot;</span> + obj.sites[<span class="hljs-number">1</span>].url;<br></code></pre></td></tr></table></figure><h3 id="void-0-含义"><a href="#void-0-含义" class="headerlink" title="void(0) 含义"></a>void(0) 含义</h3><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>回调函数就是一个函数，它是在我们启动一个异步任务的时候就告诉它：等你完成了这个任务之后要干什么。这样一来主线程几乎不用关心异步任务的状态了，他自己会善始善终。</p><p>这段程序中的 setTimeout 就是一个消耗时间较长（3 秒）的过程，它的第一个参数是个回调函数，第二个参数是毫秒数，这个函数执行之后会产生一个子线程，子线程会等待 3 秒，然后执行回调函数 “print”，在命令行输出 “Time out”。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">function</span> <span class="hljs-built_in">print</span>() &#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=<span class="hljs-string">&quot;RUNOOB!&quot;</span>;<br>&#125;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-built_in">print</span>, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;demo&quot;</span>).innerHTML=<span class="hljs-string">&quot;RUNOOB!&quot;</span>;<br>&#125;, <span class="hljs-number">3000</span>);<br></code></pre></td></tr></table></figure><h4 id="异步-AJAX"><a href="#异步-AJAX" class="headerlink" title="异步 AJAX"></a>异步 AJAX</h4><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise 将嵌套格式的代码变成了顺序格式的代码。</p></script></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>javaWeb基础知识</title>
    <link href="/2021/10/12/JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <url>/2021/10/12/JavaWeb%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="状态码有哪些遇见过？"><a href="#状态码有哪些遇见过？" class="headerlink" title="状态码有哪些遇见过？"></a>状态码有哪些遇见过？</h3>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2021/10/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><h3 id="为什么用"><a href="#为什么用" class="headerlink" title="为什么用"></a>为什么用</h3><p>单例模式主要是为了避免因为创建了多个实例造成资源的浪费，且多个实例由于多次调用容易导致结果出现错误，而<strong>使用单例模式能够保证整个应用中有且只有一个实例</strong>。</p><h3 id="四种推荐的方式"><a href="#四种推荐的方式" class="headerlink" title="四种推荐的方式"></a>四种推荐的方式</h3><h4 id="恶汉模式"><a href="#恶汉模式" class="headerlink" title="恶汉模式"></a>恶汉模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingletonEHan</span>()</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingletonEHan</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> SingletonEHan instance = <span class="hljs-keyword">new</span> SingletonEHan();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SingletonEHan <span class="hljs-title">getinstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> isntance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleTonEHan</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">SingleTonEHan</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SingleTonEHan instance;<br><span class="hljs-keyword">static</span>&#123;<br>instance = <span class="hljs-keyword">new</span> SingleTonEHan();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> SingleTonEHan <span class="hljs-title">getinstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> istance;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：简单，避免线程同步的问题。</p><p>缺点: 没有达到懒加载LazyLoading的效果！造成内存的浪费。</p><h5 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h5><p>单例模式解决了线程同步的问题</p><p>线程同步：即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作， 其他线程才能对该内存地址进行操作，而其他线程又处于等待状态，实现线程同步的方法有很多，临界区对象就是其中一种。</p><h5 id="类装载"><a href="#类装载" class="headerlink" title="类装载"></a>类装载</h5><ul><li>在任何时刻，第一次<strong>访问</strong>某类，都会执行类装载</li><li>访问包括三种情况：<ul><li>使用某类的static方法</li><li>访问某类的static属性</li><li>构造某类的对象</li></ul></li><li>声明没有初始化的引用<code>Administrator admin;</code>,并不会导致类装载(This is lazy load)</li><li>一个类的装载只会执行一次</li></ul><p>类装载的工作清单：</p><ol><li>加载.class字节码文件：根据包语法决定的路径找到.class文件并加载</li><li>为static属性分配存储空间并全部置为默认值(Q:默认值是多少)</li><li>装载父类：如果这个类有父类，且父类还没有被装载过，则先装载它的父类；否则继续</li><li>进行类初始化：按照类定义中的顺序，从上到下初始化static属性和执行static块中的语句</li></ol><ul><li><p>如果使用赋值运算符显示赋值，就执行赋值操作</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li>如果等号右边的值所述的类尚未被装载，那么先装载等号右边的类再赋值</li></ul></li><li><p>如果没有用赋值运算符显示赋值，则什么也不干(保留默认值)</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-keyword">private</span> static <span class="hljs-built_in">Leader</span> <span class="hljs-built_in">leader</span>;<br></code></pre></td></tr></table></figure><ul><li>即使这个属性所属的类尚未被装载，也不会去装载这个类lazy load</li></ul></li><li><p>如果static块中的语句会使用未装载的类，则先装载这个类，再执行这条语句</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">static</span><span class="hljs-meta">&#123;...&#125;</span><br></code></pre></td></tr></table></figure><ul><li>即使本类的所有方法(包括构造器)都会使用未装载的类，也不会导致类加载；直到这些方法真正被执行的时候，才会判断使用到的类是否已被装载lazy load</li></ul></li><li><p>static块的执行和static属性的初始化是用一个过程，执行的先后顺序只取决于他们在类中定义的顺序</p></li><li><p>父类的初始化在父类的装载过程中完成</p></li></ul><h4 id="懒汉模式（双重检验）"><a href="#懒汉模式（双重检验）" class="headerlink" title="懒汉模式（双重检验）"></a>懒汉模式（双重检验）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Singleton instance;<br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(instance==<span class="hljs-keyword">null</span>)&#123;<br>    <span class="hljs-keyword">synchronized</span>(Singleton <span class="hljs-class"><span class="hljs-keyword">class</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(instance == <span class="hljs-keyword">null</span>)&#123;<br>    instance = <span class="hljs-keyword">new</span> Singleton();<br>    &#125;<br>    &#125;<br>    &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优点：线程安全，有懒加载的效果，保证了效率</p><h5 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h5><p>Java语言提供了一种稍弱的同步机制，即volatile变量，用来确保将变量的更新操作通知到其他线程。当把变量声明为volatile类型后，编译器与运行时都会注意到这个变量是共享的，因此不会将该变量上的操作与其他内存操作一起重排序。volatile变量不会被缓存在寄存器或者对其他处理器不可见的地方，因此在读取volatile类型的变量时总会返回最新写入的值。</p><p>　　在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比sychronized关键字更轻量级的同步机制。</p><p><img src="https://images2015.cnblogs.com/blog/731716/201607/731716-20160708224602686-2141387366.png" alt="img"></p><p>　　当对非 volatile 变量进行读写的时候，每个线程先从内存拷贝变量到CPU缓存中。如果计算机有多个CPU，每个线程可能在不同的CPU上被处理，这意味着每个线程可以拷贝到不同的 CPU cache 中。</p><p>　　而声明变量是 volatile 的，JVM 保证了每次读变量都从内存中读，跳过 CPU cache 这一步。</p><h6 id="当一个变量定义为-volatile-之后，将具备两种特性："><a href="#当一个变量定义为-volatile-之后，将具备两种特性：" class="headerlink" title="当一个变量定义为 volatile 之后，将具备两种特性："></a>当一个变量定义为 volatile 之后，将具备两种特性：</h6><p>　　1.保证此变量对所有的线程的可见性，这里的“可见性”，如本文开头所述，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存（详见：<a href="http://www.cnblogs.com/zhengbin/p/6407137.html">Java内存模型</a>）来完成。</p><p>　　2.禁止指令重排序优化。有volatile修饰的变量，赋值后多执行了一个“load addl $0x0, (%esp)”操作，这个操作相当于一个<strong>内存屏障</strong>（指令重排序时不能把后面的指令重排序到内存屏障之前的位置），只有一个CPU访问内存时，并不需要内存屏障；（什么是指令重排序：是指CPU采用了允许将多条指令不按程序规定的顺序分开发送给各相应电路单元处理）。</p><h6 id="volatile-性能："><a href="#volatile-性能：" class="headerlink" title="volatile 性能："></a>volatile 性能：</h6><p>　　volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢，因为它需要在本地代码中插入许多内存屏障指令来保证处理器不发生乱序执行。</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span></span>&#123;&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singletonInstance</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton INSTANCAE = <span class="hljs-keyword">new</span> Singleton()；<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> singletonInstance.INSTANCE;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>    INSTANCE;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sayOk</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;ok&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Singleton instance = Singleton.INSTANCE;<br>        istance.sayOk();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>java.lang.<strong>Runtime</strong>就是经典的单例模式(饿汉式)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Runtime</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Runtime currentRuntime = <span class="hljs-keyword">new</span> Runtime();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Version version;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Returns the runtime object associated with the current Java application.</span><br><span class="hljs-comment">     * Most of the methods of class &#123;<span class="hljs-doctag">@code</span> Runtime&#125; are instance</span><br><span class="hljs-comment">     * methods and must be invoked with respect to the current runtime object.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>  the &#123;<span class="hljs-doctag">@code</span> Runtime&#125; object associated with the current</span><br><span class="hljs-comment">     *          Java application.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runtime <span class="hljs-title">getRuntime</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> currentRuntime;<br>    &#125;<br><br>    <span class="hljs-comment">/** Don&#x27;t let anyone else instantiate this class */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Runtime</span><span class="hljs-params">()</span> </span>&#123;&#125;<br></code></pre></td></tr></table></figure><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><p><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html">博客地址</a></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue</title>
    <link href="/2021/10/11/Vue/"/>
    <url>/2021/10/11/Vue/</url>
    
    <content type="html"><![CDATA[<h3 id="Vue特点"><a href="#Vue特点" class="headerlink" title="Vue特点"></a>Vue特点</h3><ol><li><p>组件化</p></li><li><p>声明式编码  VS 命令式编码</p></li><li><p>虚拟dom+diff算法</p><p><img src="/2021/10/11/Vue/image-20211011094716382.png" alt="image-20211011094716382"></p></li></ol><h3 id="JavaScript原型"><a href="#JavaScript原型" class="headerlink" title="JavaScript原型"></a>JavaScript原型</h3><p>学习vue用到的知识，见博客</p><p><a href="https://blog.csdn.net/qq_34645412/article/details/105997336?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163391712916780274160133%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=163391712916780274160133&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-105997336.first_rank_v2_pc_rank_v29&utm_term=javascript+%E5%8E%9F%E5%9E%8B&spm=1018.2226.3001.4187">博客地址</a></p><p><img src="/2021/10/11/Vue/image-20211011100222634.png" alt="image-20211011100222634"></p><h2 id="初始Vue"><a href="#初始Vue" class="headerlink" title="初始Vue"></a>初始Vue</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>初识Vue<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">初识Vue：</span><br><span class="hljs-comment">1.想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</span><br><span class="hljs-comment">2.root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</span><br><span class="hljs-comment">3.root容器里的代码被称为【Vue模板】；</span><br><span class="hljs-comment">4.Vue实例和容器是一对一；</span><br><span class="hljs-comment">5.真实开发中只有一个Vue实例，并且会配合着组件一起使用；</span><br><span class="hljs-comment">6.&#123;&#123;xxx&#125;&#125;中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；</span><br><span class="hljs-comment">7.一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">注意区分：js表达式 和 js代码(语句)</span><br><span class="hljs-comment">1.表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方：</span><br><span class="hljs-comment">(1). a</span><br><span class="hljs-comment">(2). a+b</span><br><span class="hljs-comment">(3). demo(1)</span><br><span class="hljs-comment">(4). x === y ? &#x27;a&#x27; : &#x27;b&#x27;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.js代码(语句)</span><br><span class="hljs-comment">(1). if()&#123;&#125;</span><br><span class="hljs-comment">(2). for()&#123;&#125;</span><br><span class="hljs-comment">--&gt;</span><br><br><span class="hljs-comment">&lt;!-- 准备好一个容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;demo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello，&#123;&#123;name.toUpperCase()&#125;&#125;，&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//创建Vue实例</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#demo&#x27;</span>, <span class="hljs-comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串。</span></span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123; <span class="hljs-comment">//data中用于存储数据，数据供el所指定的容器去使用，值我们暂时先写成一个对象。</span></span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;atguigu&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">Vue模板语法有2大类：</span><br><span class="hljs-comment">1.插值语法：</span><br><span class="hljs-comment">功能：用于解析标签体内容。</span><br><span class="hljs-comment">写法：&#123;&#123;xxx&#125;&#125;，xxx是js表达式，且可以直接读取到data中的所有属性。</span><br><span class="hljs-comment">2.指令语法：</span><br><span class="hljs-comment">功能：用于解析标签（包括：标签属性、标签体内容、绑定事件.....）。</span><br><span class="hljs-comment">举例：v-bind:href=&quot;xxx&quot; 或  简写为 :href=&quot;xxx&quot;，xxx同样要写js表达式，</span><br><span class="hljs-comment"> 且可以直接读取到data中的所有属性。</span><br><span class="hljs-comment">备注：Vue中有很多的指令，且形式都是：v-????，此处我们只是拿v-bind举个例子。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>指令语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;school.url.toUpperCase()&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;school.url&quot;</span> <span class="hljs-attr">x</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span>点我去&#123;&#123;school.name&#125;&#125;学习2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jack&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">school</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://www.atguigu.com&#x27;</span>,</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">&lt;a <span class="hljs-symbol">:href=<span class="hljs-string">&quot;Date.now()&quot;</span>&gt;&lt;/a&gt;</span><br>&lt;a href=<span class="hljs-string">&quot;Date.now()&quot;</span>&gt;&lt;<span class="hljs-regexp">/a&gt;</span><br></code></pre></td></tr></table></figure><h2 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>数据绑定<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">Vue中有2种数据绑定的方式：</span><br><span class="hljs-comment">1.单向绑定(v-bind)：数据只能从data流向页面。</span><br><span class="hljs-comment">2.双向绑定(v-model)：数据不仅能从data流向页面，还可以从页面流向data。</span><br><span class="hljs-comment">备注：</span><br><span class="hljs-comment">1.双向绑定一般都应用在表单类元素上（如：input、select等）</span><br><span class="hljs-comment">2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 普通写法 --&gt;</span><br><span class="hljs-comment">&lt;!-- 单向数据绑定：&lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br/&gt;</span><br><span class="hljs-comment">双向数据绑定：&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;&lt;br/&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 简写 --&gt;</span><br>单向数据绑定：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>双向数据绑定：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 如下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h2 v-model:x=&quot;name&quot;&gt;你好啊&lt;/h2&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-model只能应用在表单类元素（输入类元素）上</strong></p><p><code>v-model=&quot;xxxx&quot;</code> = <code>v-model:value</code></p><p><code>v-bind:value=&quot;xxx&quot;</code>=<code>:value=&quot;xxx&quot;</code>  </p><h2 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>el与data的两种写法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">data与el的2种写法</span><br><span class="hljs-comment">1.el有2种写法</span><br><span class="hljs-comment">(1).new Vue时候配置el属性。</span><br><span class="hljs-comment">(2).先创建Vue实例，随后再通过vm.$mount(&#x27;#root&#x27;)指定el的值。</span><br><span class="hljs-comment">2.data有2种写法</span><br><span class="hljs-comment">(1).对象式</span><br><span class="hljs-comment">(2).函数式</span><br><span class="hljs-comment">如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</span><br><span class="hljs-comment">3.一个重要的原则：</span><br><span class="hljs-comment">由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了,而是window。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//el的两种写法</span></span><br><span class="javascript"><span class="hljs-comment">/* const v = new Vue(&#123;</span></span><br><span class="hljs-comment"><span class="javascript">//el:&#x27;#root&#x27;, //第一种写法</span></span><br><span class="hljs-comment"><span class="javascript">data:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">name:&#x27;尚硅谷&#x27;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="javascript">console.log(v)</span></span><br><span class="hljs-comment"><span class="javascript">v.$mount(&#x27;#root&#x27;) //第二种写法 */</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//data的两种写法</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-comment">//data的第一种写法：对象式</span></span><br><span class="javascript"><span class="hljs-comment">/* data:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">name:&#x27;尚硅谷&#x27;</span></span><br><span class="hljs-comment"><span class="javascript">&#125; */</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//data的第二种写法：函数式</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;@@@&#x27;</span>,<span class="hljs-built_in">this</span>) <span class="hljs-comment">//此处的this是Vue实例对象</span></span><br><span class="javascript"><span class="hljs-keyword">return</span>&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>data有2种写法<br>                (1).对象式<br>                (2).函数式<br>                如何选择：目前哪种写法都可以，以后学习到组件时，data必须使用函数式，否则会报错。</p><p>一个重要的原则：<br>                由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了,而是window。</p><h2 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>理解MVVM<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">MVVM模型</span><br><span class="hljs-comment">1. M：模型(Model) ：data中的数据</span><br><span class="hljs-comment">2. V：视图(View) ：模板代码</span><br><span class="hljs-comment">3. VM：视图模型(ViewModel)：Vue实例</span><br><span class="hljs-comment">观察发现：</span><br><span class="hljs-comment">1.data中所有的属性，最后都出现在了vm身上。</span><br><span class="hljs-comment">2.vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接使用。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学校名称：&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h1&gt;测试一下1：&#123;&#123;1+1&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-comment">&lt;h1&gt;测试一下2：&#123;&#123;$options&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-comment">&lt;h1&gt;测试一下3：&#123;&#123;$emit&#125;&#125;&lt;/h1&gt;</span><br><span class="hljs-comment">&lt;h1&gt;测试一下4：&#123;&#123;_c&#125;&#125;&lt;/h1&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(vm)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/11/Vue/image-20211011154907099.png" alt="image-20211011154907099"></p><p><strong>类比MVC</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;&#125;)<br></code></pre></td></tr></table></figure><p>差值表达式中，只要vm上有的，就可以在模板里面直接用</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><h3 id="回顾Object-defineproperty方法"><a href="#回顾Object-defineproperty方法" class="headerlink" title="回顾Object.defineproperty方法"></a>回顾Object.defineproperty方法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>回顾Object.defineproperty方法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> number = <span class="hljs-number">18</span></span><br><span class="javascript"><span class="hljs-keyword">let</span> person = &#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>,</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">Object</span>.defineProperty(person,<span class="hljs-string">&#x27;age&#x27;</span>,&#123;</span><br><span class="javascript"><span class="hljs-comment">// value:18,</span></span><br><span class="javascript"><span class="hljs-comment">// enumerable:true, //控制属性是否可以枚举，默认值是false</span></span><br><span class="javascript"><span class="hljs-comment">// writable:true, //控制属性是否可以被修改，默认值是false</span></span><br><span class="javascript"><span class="hljs-comment">// configurable:true //控制属性是否可以被删除，默认值是false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="javascript"><span class="hljs-keyword">return</span> number</span><br><span class="javascript">&#125;,</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;有人修改了age属性，且值是&#x27;</span>,value)</span><br><span class="javascript">number = value</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">// console.log(Object.keys(person))</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(person)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>**<code>Object.defineProperty()</code>**为对象添加属性和set、get方法</p><h3 id="数据代理-1"><a href="#数据代理-1" class="headerlink" title="数据代理"></a>数据代理</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>何为数据代理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 数据代理：通过一个对象代理对另一个对象中属性的操作（读/写）--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> &gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">let</span> obj = &#123;<span class="hljs-attr">x</span>:<span class="hljs-number">100</span>&#125;</span><br><span class="javascript"><span class="hljs-keyword">let</span> obj2 = &#123;<span class="hljs-attr">y</span>:<span class="hljs-number">200</span>&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-built_in">Object</span>.defineProperty(obj2,<span class="hljs-string">&#x27;x&#x27;</span>,&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> obj.x</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">set</span>(<span class="hljs-params">value</span>)</span>&#123;</span><br><span class="javascript">obj.x = value</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><p><img src="/2021/10/11/Vue/image-20211011165502208.png" alt="image-20211011165502208"></p><p><strong>vm代理了_data</strong></p><p>数据代理是代理data中数据，如果把method的方法放入data，虽然方法仍然可以用，并且生成了对应的get和set方法，但是没有意义</p><h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件的基本使用<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">事件的基本使用：</span><br><span class="hljs-comment">1.使用v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；</span><br><span class="hljs-comment">2.事件的回调需要配置在methods对象中，最终会在vm上；</span><br><span class="hljs-comment">3.methods中配置的函数，不要用箭头函数！否则this就不是vm了；</span><br><span class="hljs-comment">4.methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；</span><br><span class="hljs-comment">5.@click=&quot;demo&quot; 和 @click=&quot;demo($event)&quot; 效果一致，但后者可以传参；</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;button v-on:click=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1（不传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2（传参）<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo1</span>(<span class="hljs-params">event</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// console.log(event.target.innerText)</span></span><br><span class="javascript"><span class="hljs-comment">// console.log(this) //此处的this是vm</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;同学你好！&#x27;</span>)</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo2</span>(<span class="hljs-params">event,number</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(event,number)</span><br><span class="javascript"><span class="hljs-comment">// console.log(event.target.innerText)</span></span><br><span class="javascript"><span class="hljs-comment">// console.log(this) //此处的this是vm</span></span><br><span class="javascript">alert(<span class="hljs-string">&#x27;同学你好！！&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>@click=&quot;xxx&quot;</code> =<code>v-on:click</code> </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>事件修饰符<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">*&#123;</span><br><span class="css"><span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.demo1</span>&#123;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.box1</span>&#123;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.box2</span>&#123;</span><br><span class="css"><span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: orange;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.list</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: peru;</span><br><span class="css"><span class="hljs-attribute">overflow</span>: auto;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-tag">li</span>&#123;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">Vue中的事件修饰符：</span><br><span class="hljs-comment">1.prevent：阻止默认事件（常用）；</span><br><span class="hljs-comment">2.stop：阻止事件冒泡（常用）；</span><br><span class="hljs-comment">3.once：事件只触发一次（常用）；</span><br><span class="hljs-comment">4.capture：使用事件的捕获模式；</span><br><span class="hljs-comment">5.self：只有event.target是当前操作的元素时才触发事件；</span><br><span class="hljs-comment">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 阻止默认事件（常用） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.atguigu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 修饰符可以连续写 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 事件只触发一次（常用） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用事件的捕获模式 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;showMsg(1)&quot;</span>&gt;</span><br>div1<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMsg(2)&quot;</span>&gt;</span><br>div2<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click.self</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> @<span class="hljs-attr">wheel.passive</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript">alert(<span class="hljs-string">&#x27;同学你好！&#x27;</span>)</span><br><span class="javascript"><span class="hljs-comment">// console.log(e.target)</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showMsg</span>(<span class="hljs-params">msg</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(msg)</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">demo</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;#&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;累坏了&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><p><code>@keyup</code></p><p><code>@keydown</code></p><p><code>e.target.value</code></p><p>每次触发DOM事件时会产生一个事件对象（也称event对象），此处的参数e接收事件对象。而事件对象也有很多属性和方法，其中target属性是获取触发事件对象的目标，也就是绑定事件的元素，e.target表示该DOM元素，然后在获取其相应的属性值。</p><p><code>e.keyCode</code>按键编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html">showInfo(e)&#123;<br>if(e.keyCode!==13)<br>return console.log(e.target.value)<br>&#125;<br><br>当输入回车后，在控制台打印键盘在敲完enter键之前的内容<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>键盘事件<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">1.Vue中常用的按键别名：</span><br><span class="hljs-comment">回车 =&gt; enter</span><br><span class="hljs-comment">删除 =&gt; delete (捕获“  ”和“退格”键)</span><br><span class="hljs-comment">退出 =&gt; esc</span><br><span class="hljs-comment">空格 =&gt; space</span><br><span class="hljs-comment">换行 =&gt; tab (特殊，必须配合keydown去使用)</span><br><span class="hljs-comment">上 =&gt; up</span><br><span class="hljs-comment">下 =&gt; down</span><br><span class="hljs-comment">左 =&gt; left</span><br><span class="hljs-comment">右 =&gt; right</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</span><br><span class="hljs-comment">(1).配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发。</span><br><span class="hljs-comment">(2).配合keydown使用：正常触发事件。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4.也可以使用keyCode去指定具体的按键（不推荐）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">5.Vue.config.keyCodes.自定义键名 = 键码，可以去定制按键别名</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;按下回车提示输入&quot;</span> @<span class="hljs-attr">keydown.huiche</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript">Vue.config.keyCodes.huiche = <span class="hljs-number">13</span> <span class="hljs-comment">//定义了一个别名按键</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">showInfo</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// console.log(e.key,e.keyCode)</span></span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(e.target.value)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h2><h3 id="姓名案例-插值语法实现"><a href="#姓名案例-插值语法实现" class="headerlink" title="姓名案例_插值语法实现"></a>姓名案例_插值语法实现</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>姓名案例_插值语法实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;firstName&#125;&#125;-&#123;&#123;lastName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="模板中简单的表达式"><a href="#模板中简单的表达式" class="headerlink" title="模板中简单的表达式"></a>模板中简单的表达式</h3><p><strong>组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法。</strong></p><p>复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的<em>是什么</em>，而非<em>如何</em>计算那个值。而且计算属性和方法使得代码可以重用。</p><p>反例</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;</span><br><span class="hljs-template-variable">  <span class="hljs-name">fullName.split</span>(<span class="hljs-name">&#x27; &#x27;</span>).map(<span class="hljs-name">function</span> (<span class="hljs-name">word</span>) &#123;</span><br><span class="hljs-template-variable">    return word[0].toUpperCase() + word.slice(<span class="hljs-name">1</span>)</span><br><span class="hljs-template-variable">  &#125;).join(<span class="hljs-name">&#x27; &#x27;</span>)</span><br><span class="hljs-template-variable">&#125;&#125;</span><br></code></pre></td></tr></table></figure><p>好例子</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml"><span class="hljs-comment">&lt;!-- 在模板中 --&gt;</span></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">normalizedFullName</span> &#125;&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">// 复杂表达式已经移入一个计算属性</span><br><span class="xml">computed: &#123;</span><br><span class="xml">  normalizedFullName: function () &#123;</span><br><span class="xml">    return this.fullName.split(&#x27; &#x27;).map(function (word) &#123;</span><br><span class="xml">      return word[0].toUpperCase() + word.slice(1)</span><br><span class="xml">    &#125;).join(&#x27; &#x27;)</span><br><span class="xml">  &#125;</span><br><span class="xml">&#125;</span><br></code></pre></td></tr></table></figure><p><code>vm._data.normalizedFullName</code>没有被定义</p><h3 id="计算属性："><a href="#计算属性：" class="headerlink" title="计算属性："></a>计算属性：</h3><ol><li><p>计算属性：</p><p>​          1.定义：要用的属性不存在，要通过已有属性计算得来。</p><p>​          2.原理：底层借助了Objcet.defineproperty方法提供的getter和setter。</p><p>​          3.get函数什么时候执行？</p><p>​                (1).初次读取时会执行一次。</p><p>​                (2).当依赖的数据发生改变时会被再次调用。</p><p>​          4.优势：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便。</p><p>​          5.备注：</p><p>​              1.计算属性最终会出现在vm上，直接读取使用即可。</p><p>​              2.如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变。</p></li></ol><h3 id="计算属性简单"><a href="#计算属性简单" class="headerlink" title="计算属性简单"></a>计算属性简单</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>姓名案例_计算属性实现<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>姓：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;lastName&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>全名：<span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">firstName</span>:<span class="hljs-string">&#x27;张&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">lastName</span>:<span class="hljs-string">&#x27;三&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"><span class="hljs-comment">//完整写法</span></span><br><span class="javascript"><span class="hljs-comment">/* fullName:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">get()&#123;</span></span><br><span class="hljs-comment"><span class="javascript">console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="hljs-comment"><span class="javascript">return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="hljs-comment"><span class="javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="javascript">set(value)&#123;</span></span><br><span class="hljs-comment"><span class="javascript">console.log(&#x27;set&#x27;,value)</span></span><br><span class="hljs-comment"><span class="javascript">const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="hljs-comment"><span class="javascript">this.firstName = arr[0]</span></span><br><span class="hljs-comment"><span class="javascript">this.lastName = arr[1]</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125; */</span></span><br><span class="javascript"><span class="hljs-comment">//简写</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">fullName</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get被调用了&#x27;</span>)</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27;-&#x27;</span> + <span class="hljs-built_in">this</span>.lastName</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>只读不改可以使用这种方法</p><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>天气案例_监视属性<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">监视属性watch：</span><br><span class="hljs-comment">1.当被监视的属性变化时, 回调函数自动调用, 进行相关操作</span><br><span class="hljs-comment">2.监视的属性必须存在，才能进行监视！！</span><br><span class="hljs-comment">3.监视的两种写法：</span><br><span class="hljs-comment">(1).new Vue时传入watch配置</span><br><span class="hljs-comment">(2).通过vm.$watch监视</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isHot ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">changeWeather</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.isHot = !<span class="hljs-built_in">this</span>.isHot</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-comment">/* watch:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">isHot:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">immediate:true, //初始化时让handler调用一下</span></span><br><span class="hljs-comment"><span class="javascript">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="hljs-comment"><span class="javascript">handler(newValue,oldValue)&#123;</span></span><br><span class="hljs-comment"><span class="javascript">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125; */</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript">vm.$watch(<span class="hljs-string">&#x27;isHot&#x27;</span>,&#123;</span><br><span class="javascript"><span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//初始化时让handler调用一下</span></span><br><span class="javascript"><span class="hljs-comment">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>两种方式进行监视</p><h3 id="深度监视"><a href="#深度监视" class="headerlink" title="深度监视"></a>深度监视</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>天气案例_深度监视<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">深度监视：</span><br><span class="hljs-comment">(1).Vue中的watch默认不监测对象内部值的改变（一层）。</span><br><span class="hljs-comment">(2).配置deep:true可以监测对象内部值改变（多层）。</span><br><span class="hljs-comment">备注：</span><br><span class="hljs-comment">(1).Vue自身可以监测对象内部值的改变，但Vue提供的watch默认不可以！</span><br><span class="hljs-comment">(2).使用watch时根据数据的具体结构，决定是否采用深度监视。</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>今天天气很&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeWeather&quot;</span>&gt;</span>切换天气<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;numbers = &#123;a:666,b:888&#125;&quot;</span>&gt;</span>彻底替换掉numbers<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>&#123;&#123;numbers.c.d.e&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">isHot</span>:<span class="hljs-literal">true</span>,</span><br><span class="javascript"><span class="hljs-attr">numbers</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,</span><br><span class="javascript"><span class="hljs-attr">b</span>:<span class="hljs-number">1</span>,</span><br><span class="javascript"><span class="hljs-attr">c</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">d</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">e</span>:<span class="hljs-number">100</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">info</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.isHot ? <span class="hljs-string">&#x27;炎热&#x27;</span> : <span class="hljs-string">&#x27;凉爽&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">changeWeather</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.isHot = !<span class="hljs-built_in">this</span>.isHot</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">watch</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">isHot</span>:&#123;</span><br><span class="javascript"><span class="hljs-comment">// immediate:true, //初始化时让handler调用一下</span></span><br><span class="javascript"><span class="hljs-comment">//handler什么时候调用？当isHot发生改变时。</span></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params">newValue,oldValue</span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-comment">//监视多级结构中某个属性的变化</span></span><br><span class="javascript"><span class="hljs-comment">/* &#x27;numbers.a&#x27;:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">handler()&#123;</span></span><br><span class="hljs-comment"><span class="javascript">console.log(&#x27;a被改变了&#x27;)</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125; */</span></span><br><span class="javascript"><span class="hljs-comment">//监视多级结构中所有属性的变化</span></span><br><span class="javascript"><span class="hljs-attr">numbers</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>,</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;numbers改变了&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="监视多级结构中某个属性的变化"><a href="#监视多级结构中某个属性的变化" class="headerlink" title="监视多级结构中某个属性的变化"></a>监视多级结构中某个属性的变化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&#x27;numbers.a&#x27;</span>:&#123;<br><span class="hljs-function"><span class="hljs-title">handler</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;a被改变了&#x27;</span>)<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>记住要加  ’   ‘</p><h4 id="监视多级结构中所有属性的变化"><a href="#监视多级结构中所有属性的变化" class="headerlink" title="监视多级结构中所有属性的变化"></a>监视多级结构中所有属性的变化</h4><p><code>deep:true</code></p><h3 id="监视属性的简写"><a href="#监视属性的简写" class="headerlink" title="监视属性的简写"></a>监视属性的简写</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html">watch:&#123;<br>//正常写法<br>/* isHot:&#123;<br>// immediate:true, //初始化时让handler调用一下<br>// deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;, */<br>//简写<br>/* isHot(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125; */<br>&#125;<br>&#125;)<br><br>//正常写法<br>/* vm.$watch(&#x27;isHot&#x27;,&#123;<br>immediate:true, //初始化时让handler调用一下<br>deep:true,//深度监视<br>handler(newValue,oldValue)&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)<br>&#125;<br>&#125;) */<br><br>//简写<br>/* vm.$watch(&#x27;isHot&#x27;,(newValue,oldValue)=&gt;&#123;<br>console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue,this)<br>&#125;) */<br><br></code></pre></td></tr></table></figure><h3 id="计算属性-vs-侦听属性"><a href="#计算属性-vs-侦听属性" class="headerlink" title="计算属性 vs 侦听属性"></a>计算属性 vs 侦听属性</h3><p>当计算属性和侦听属性都可以完成任务的时候，选择计算属性</p><p>但是当完成异步任务的时候选择侦听属性</p><h2 id="绑定样式"><a href="#绑定样式" class="headerlink" title="绑定样式"></a>绑定样式</h2><h3 id="class和style"><a href="#class和style" class="headerlink" title="class和style"></a>class和style</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>绑定样式<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.basic</span>&#123;</span><br><span class="css"><span class="hljs-attribute">width</span>: <span class="hljs-number">400px</span>;</span><br><span class="css"><span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.happy</span>&#123;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> solid red;;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.644</span>);</span><br><span class="css"><span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">30deg</span>,yellow,pink,orange,yellow);</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.sad</span>&#123;</span><br><span class="css"><span class="hljs-attribute">border</span>: <span class="hljs-number">4px</span> dashed <span class="hljs-built_in">rgb</span>(<span class="hljs-number">2</span>, <span class="hljs-number">197</span>, <span class="hljs-number">2</span>);</span><br><span class="css"><span class="hljs-attribute">background-color</span>: gray;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.normal</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: skyblue;</span><br><span class="css">&#125;</span><br><span class="css"></span><br><span class="css"><span class="hljs-selector-class">.atguigu1</span>&#123;</span><br><span class="css"><span class="hljs-attribute">background-color</span>: yellowgreen;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.atguigu2</span>&#123;</span><br><span class="css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">30px</span>;</span><br><span class="css"><span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">10px</span> red;</span><br><span class="css">&#125;</span><br><span class="css"><span class="hljs-selector-class">.atguigu3</span>&#123;</span><br><span class="css"><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">20px</span>;</span><br><span class="css">&#125;</span><br><span class="css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">绑定样式：</span><br><span class="hljs-comment">1. class样式</span><br><span class="hljs-comment">写法:class=&quot;xxx&quot; xxx可以是字符串、对象、数组。</span><br><span class="hljs-comment">字符串写法适用于：类名不确定，要动态获取。</span><br><span class="hljs-comment">对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</span><br><span class="hljs-comment">数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</span><br><span class="hljs-comment">2. style样式</span><br><span class="hljs-comment">:style=&quot;&#123;fontSize: xxx&#125;&quot;其中xxx是动态值。</span><br><span class="hljs-comment">:style=&quot;[a,b]&quot;其中a、b是样式对象。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot; &quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;mood&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br><span class="hljs-comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;basic&quot;</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">mood</span>:<span class="hljs-string">&#x27;normal&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">classArr</span>:[<span class="hljs-string">&#x27;atguigu1&#x27;</span>,<span class="hljs-string">&#x27;atguigu2&#x27;</span>,<span class="hljs-string">&#x27;atguigu3&#x27;</span>],</span><br><span class="javascript"><span class="hljs-attr">classObj</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">atguigu1</span>:<span class="hljs-literal">false</span>,</span><br><span class="javascript"><span class="hljs-attr">atguigu2</span>:<span class="hljs-literal">false</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">styleObj</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;red&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">styleObj2</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;orange&#x27;</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">styleArr</span>:[</span><br><span class="javascript">&#123;</span><br><span class="javascript"><span class="hljs-attr">fontSize</span>: <span class="hljs-string">&#x27;40px&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;blue&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript">&#123;</span><br><span class="javascript"><span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&#x27;gray&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">]</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">changeMood</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;happy&#x27;</span>,<span class="hljs-string">&#x27;sad&#x27;</span>,<span class="hljs-string">&#x27;normal&#x27;</span>]</span><br><span class="javascript"><span class="hljs-keyword">const</span> index = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random()*<span class="hljs-number">3</span>)</span><br><span class="javascript"><span class="hljs-built_in">this</span>.mood = arr[index]</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>条件渲染<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">条件渲染：</span><br><span class="hljs-comment">1.v-if</span><br><span class="hljs-comment">写法：</span><br><span class="hljs-comment">(1).v-if=&quot;表达式&quot; </span><br><span class="hljs-comment">(2).v-else-if=&quot;表达式&quot;</span><br><span class="hljs-comment">(3).v-else=&quot;表达式&quot;</span><br><span class="hljs-comment">适用于：切换频率较低的场景。</span><br><span class="hljs-comment">特点：不展示的DOM元素直接被移除。</span><br><span class="hljs-comment">注意：v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.v-show</span><br><span class="hljs-comment">写法：v-show=&quot;表达式&quot;</span><br><span class="hljs-comment">适用于：切换频率较高的场景。</span><br><span class="hljs-comment">特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3.备注：使用v-if的时，元素可能无法获取到，而使用v-show一定可以获取到。</span><br><span class="hljs-comment"> --&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 使用v-show做条件渲染 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h2 v-show=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h2 v-show=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- 使用v-if做条件渲染 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h2 v-if=&quot;false&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;h2 v-if=&quot;1 === 1&quot;&gt;欢迎来到&#123;&#123;name&#125;&#125;&lt;/h2&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- v-else和v-else-if --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;div v-if=&quot;n === 1&quot;&gt;Angular&lt;/div&gt;</span><br><span class="hljs-comment">&lt;div v-else-if=&quot;n === 2&quot;&gt;React&lt;/div&gt;</span><br><span class="hljs-comment">&lt;div v-else-if=&quot;n === 3&quot;&gt;Vue&lt;/div&gt;</span><br><span class="hljs-comment">&lt;div v-else&gt;哈哈&lt;/div&gt; --&gt;</span><br><br><span class="hljs-comment">&lt;!-- v-if与template的配合使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;n === 1&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>你好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>尚硅谷<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">n</span>:<span class="hljs-number">0</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;template v-if=&quot;n === 1&quot;&gt;</code> 不再结构中</p><h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><h3 id="基本列表"><a href="#基本列表" class="headerlink" title="基本列表"></a>基本列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>基本列表<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">v-for指令:</span><br><span class="hljs-comment">1.用于展示列表数据</span><br><span class="hljs-comment">2.语法：v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;</span><br><span class="hljs-comment">3.可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少）</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表（遍历数组）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 遍历对象 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(value,k) of car&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;k&quot;</span>&gt;</span><br>&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 遍历字符串 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试遍历字符串（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(char,index) of str&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 遍历指定次数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>测试遍历指定次数（用得少）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(number,index) of 5&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>    //in<br>&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">persons</span>:[</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;</span><br><span class="javascript">],</span><br><span class="javascript"><span class="hljs-attr">car</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;奥迪A8&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">price</span>:<span class="hljs-string">&#x27;70万&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">color</span>:<span class="hljs-string">&#x27;黑色&#x27;</span></span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">str</span>:<span class="hljs-string">&#x27;hello&#x27;</span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;li v-for=&quot;(p,index) of persons&quot; :key=&quot;index&quot;&gt;</code></p><h3 id="key的原理"><a href="#key的原理" class="headerlink" title="key的原理"></a>key的原理</h3><p><img src="/2021/10/11/Vue/image-20211013224253042.png" alt="index"></p><p><img src="/2021/10/11/Vue/image-20211013224418456.png" alt="p.id"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>key的原理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">面试题：react、vue中的key有什么作用？（key的内部原理）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1. 虚拟DOM中key的作用：</span><br><span class="hljs-comment">key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, </span><br><span class="hljs-comment">随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.对比规则：</span><br><span class="hljs-comment">(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：</span><br><span class="hljs-comment">①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！</span><br><span class="hljs-comment">②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">(2).旧虚拟DOM中未找到与新虚拟DOM相同的key</span><br><span class="hljs-comment">创建新的真实DOM，随后渲染到到页面。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3. 用index作为key可能会引发的问题：</span><br><span class="hljs-comment">1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:</span><br><span class="hljs-comment">会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2. 如果结构中还包含输入类的DOM：</span><br><span class="hljs-comment">会产生错误DOM更新 ==&gt; 界面有问题。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4. 开发中如何选择key?:</span><br><span class="hljs-comment">1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。</span><br><span class="hljs-comment">2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，</span><br><span class="hljs-comment">使用index作为key是没有问题的。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 遍历数组 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表（遍历数组）<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>添加一个老刘<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of persons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">persons</span>:[</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;张三&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;李四&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;王五&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>&#125;</span><br><span class="javascript">]</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">add</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> p = &#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;老刘&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">40</span>&#125;</span><br><span class="javascript"><span class="hljs-built_in">this</span>.persons.unshift(p)   <span class="hljs-comment">//在前面加  </span></span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a>列表过滤</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表过滤<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPerons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//用watch实现</span></span><br><span class="javascript"><span class="hljs-comment">//#region </span></span><br><span class="javascript"><span class="hljs-comment">/* new Vue(&#123;</span></span><br><span class="hljs-comment"><span class="javascript">el:&#x27;#root&#x27;,</span></span><br><span class="hljs-comment"><span class="javascript">data:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">keyWord:&#x27;&#x27;,</span></span><br><span class="hljs-comment"><span class="javascript">persons:[</span></span><br><span class="hljs-comment"><span class="javascript">&#123;id:&#x27;001&#x27;,name:&#x27;马冬梅&#x27;,age:19,sex:&#x27;女&#x27;&#125;,</span></span><br><span class="hljs-comment"><span class="javascript">&#123;id:&#x27;002&#x27;,name:&#x27;周冬雨&#x27;,age:20,sex:&#x27;女&#x27;&#125;,</span></span><br><span class="hljs-comment"><span class="javascript">&#123;id:&#x27;003&#x27;,name:&#x27;周杰伦&#x27;,age:21,sex:&#x27;男&#x27;&#125;,</span></span><br><span class="hljs-comment"><span class="javascript">&#123;id:&#x27;004&#x27;,name:&#x27;温兆伦&#x27;,age:22,sex:&#x27;男&#x27;&#125;</span></span><br><span class="hljs-comment"><span class="javascript">],</span></span><br><span class="hljs-comment"><span class="javascript">filPerons:[]</span></span><br><span class="hljs-comment"><span class="javascript">&#125;,</span></span><br><span class="hljs-comment"><span class="javascript">watch:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">keyWord:&#123;</span></span><br><span class="hljs-comment"><span class="javascript">immediate:true,</span></span><br><span class="hljs-comment"><span class="javascript">handler(val)&#123;</span></span><br><span class="hljs-comment"><span class="javascript">this.filPerons = this.persons.filter((p)=&gt;&#123;</span></span><br><span class="hljs-comment"><span class="javascript">return p.name.indexOf(val) !== -1</span></span><br><span class="hljs-comment"><span class="javascript">&#125;)</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;</span></span><br><span class="hljs-comment"><span class="javascript">&#125;) */</span></span><br><span class="javascript"><span class="hljs-comment">//#endregion</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//用computed实现</span></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">persons</span>:[</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">20</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">21</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">22</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;</span><br><span class="javascript">]</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">filPerons</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.persons.filter(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> p.name.indexOf(<span class="hljs-built_in">this</span>.keyWord) !== -<span class="hljs-number">1</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;) </span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&lt;li v-for=&quot;(p,index) of filPerons&quot; :key=&quot;index&quot;&gt;</code>  注意<code>filPersons</code>，不能加（）因为<code>filPerons</code>是对象</p><h3 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a>列表排序</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>列表排序<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>人员列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名字&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;keyWord&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(p,index) of filPerons&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;p.id&quot;</span>&gt;</span><br>&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">keyWord</span>:<span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">sortType</span>:<span class="hljs-number">0</span>, <span class="hljs-comment">//0原顺序 1降序 2升序</span></span><br><span class="javascript"><span class="hljs-attr">persons</span>:[</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;001&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;马冬梅&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">30</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;002&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周冬雨&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">31</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;女&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;003&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;周杰伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">18</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;004&#x27;</span>,<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;温兆伦&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">19</span>,<span class="hljs-attr">sex</span>:<span class="hljs-string">&#x27;男&#x27;</span>&#125;</span><br><span class="javascript">]</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">computed</span>:&#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">filPerons</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">const</span> arr = <span class="hljs-built_in">this</span>.persons.filter(<span class="hljs-function">(<span class="hljs-params">p</span>)=&gt;</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> p.name.indexOf(<span class="hljs-built_in">this</span>.keyWord) !== -<span class="hljs-number">1</span></span><br><span class="javascript">&#125;)</span><br><span class="javascript"><span class="hljs-comment">//判断一下是否需要排序</span></span><br><span class="javascript"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.sortType)&#123;</span><br><span class="javascript">arr.sort(<span class="hljs-function">(<span class="hljs-params">p1,p2</span>)=&gt;</span>&#123;</span><br><span class="javascript"><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sortType === <span class="hljs-number">1</span> ? p2.age-p1.age : p1.age-p2.age</span><br><span class="javascript">&#125;)</span><br><span class="javascript">&#125;</span><br><span class="javascript"><span class="hljs-keyword">return</span> arr</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;) </span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>知识点补充：</p><ul><li><p><code>if(this.sortType)</code>相当于<code>if(this.sortType)&gt;0</code></p></li><li><p>排序API  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">arr.sort((p1,p2)=&gt;&#123;<br>return this.sortType === 1 ? p2.age-p1.age : p1.age-p2.age<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue监测数据改变的原理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引入Vue --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 准备好一个容器--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学校信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校名称：&#123;&#123;school.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>学校地址：&#123;&#123;school.address&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>校长是：&#123;&#123;school.leader&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学生信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;</span>添加一个性别属性，默认值是男<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>年龄：真实&#123;&#123;student.age.rAge&#125;&#125;，对外&#123;&#123;student.age.sAge&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>朋友们<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(f,index) in student.friends&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span><br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span><br><span class="javascript">Vue.config.productionTip = <span class="hljs-literal">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="javascript"><span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">data</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">school</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">address</span>:<span class="hljs-string">&#x27;北京&#x27;</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">student</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tom&#x27;</span>,</span><br><span class="javascript"><span class="hljs-attr">age</span>:&#123;</span><br><span class="javascript"><span class="hljs-attr">rAge</span>:<span class="hljs-number">40</span>,</span><br><span class="javascript"><span class="hljs-attr">sAge</span>:<span class="hljs-number">29</span>,</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">friends</span>:[</span><br><span class="javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;jerry&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">35</span>&#125;,</span><br><span class="javascript">&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;tony&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-number">36</span>&#125;</span><br><span class="javascript">]</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;,</span><br><span class="javascript"><span class="hljs-attr">methods</span>: &#123;</span><br><span class="javascript"><span class="hljs-function"><span class="hljs-title">addSex</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"><span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span><br><span class="javascript"><span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.student,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;</span><br><span class="javascript">&#125;)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="数据监测"><a href="#数据监测" class="headerlink" title="数据监测"></a>数据监测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;<br>&lt;title&gt;总结数据监视&lt;/title&gt;<br>&lt;style&gt;<br>button&#123;<br>margin-top: 10px;<br>&#125;<br>&lt;/style&gt;<br>&lt;!-- 引入Vue --&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;!--<br>Vue监视数据的原理：<br><span class="hljs-number">1.</span> vue会监视data中所有层次的数据。<br><br><span class="hljs-number">2.</span> 如何监测对象中的数据？<br>通过setter实现监视，且要在<span class="hljs-keyword">new</span> Vue时就传入要监测的数据。<br>(<span class="hljs-number">1</span>).对象中后追加的属性，Vue默认不做响应式处理<br>(<span class="hljs-number">2</span>).如需给后添加的属性做响应式，请使用如下API：<br>Vue.set(target，propertyName/index，value) 或 <br>vm.$set(target，propertyName/index，value)<br><br><span class="hljs-number">3.</span> 如何监测数组中的数据？<br>通过包裹数组更新元素的方法实现，本质就是做了两件事：<br>(<span class="hljs-number">1</span>).调用原生对应的方法对数组进行更新。<br>(<span class="hljs-number">2</span>).重新解析模板，进而更新页面。<br><br><span class="hljs-number">4.</span>在Vue修改数组中的某个元素一定要用如下方法：<br><span class="hljs-number">1.</span>使用这些API:push()、pop()、shift()、unshift()、splice()、sort()、reverse()<br><span class="hljs-number">2.</span>Vue.set() 或 vm.$set()<br><br>特别注意：Vue.set() 和 vm.$set() 不能给vm 或 vm的根数据对象 添加属性！！！<br>--&gt;<br>&lt;!-- 准备好一个容器--&gt;<br>&lt;div id=<span class="hljs-string">&quot;root&quot;</span>&gt;<br>&lt;h1&gt;学生信息&lt;/h1&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;student.age++&quot;</span>&gt;年龄+<span class="hljs-number">1</span>岁&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;addSex&quot;</span>&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;student.sex = &#x27;未知&#x27; &quot;</span>&gt;修改性别&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;addFriend&quot;</span>&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;updateFirstFriendName&quot;</span>&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;addHobby&quot;</span>&gt;添加一个爱好&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;updateHobby&quot;</span>&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br/&gt;<br>&lt;button <span class="hljs-meta">@click</span>=<span class="hljs-string">&quot;removeSmoke&quot;</span>&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br/&gt;<br>&lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;<br>&lt;h3 v-<span class="hljs-keyword">if</span>=<span class="hljs-string">&quot;student.sex&quot;</span>&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;<br>&lt;h3&gt;爱好：&lt;/h3&gt;<br>&lt;ul&gt;<br>&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(h,index) in student.hobby&quot;</span> :key=<span class="hljs-string">&quot;index&quot;</span>&gt;<br>&#123;&#123;h&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;h3&gt;朋友们：&lt;/h3&gt;<br>&lt;ul&gt;<br>&lt;li v-<span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;(f,index) in student.friends&quot;</span> :key=<span class="hljs-string">&quot;index&quot;</span>&gt;<br>&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;<br>&lt;/li&gt;<br>&lt;/ul&gt;<br>&lt;/div&gt;<br>&lt;/body&gt;<br><br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>Vue.config.productionTip = <span class="hljs-keyword">false</span> <span class="hljs-comment">//阻止 vue 在启动时生成生产提示。</span><br><br><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> Vue(&#123;<br>el:<span class="hljs-string">&#x27;#root&#x27;</span>,<br>data:&#123;<br>student:&#123;<br>name:<span class="hljs-string">&#x27;tom&#x27;</span>,<br>age:<span class="hljs-number">18</span>,<br>hobby:[<span class="hljs-string">&#x27;抽烟&#x27;</span>,<span class="hljs-string">&#x27;喝酒&#x27;</span>,<span class="hljs-string">&#x27;烫头&#x27;</span>],<br>friends:[<br>&#123;name:<span class="hljs-string">&#x27;jerry&#x27;</span>,age:<span class="hljs-number">35</span>&#125;,<br>&#123;name:<span class="hljs-string">&#x27;tony&#x27;</span>,age:<span class="hljs-number">36</span>&#125;<br>]<br>&#125;<br>&#125;,<br>methods: &#123;<br>addSex()&#123;<br><span class="hljs-comment">// Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span><br><span class="hljs-keyword">this</span>.$set(<span class="hljs-keyword">this</span>.student,<span class="hljs-string">&#x27;sex&#x27;</span>,<span class="hljs-string">&#x27;男&#x27;</span>)<br>&#125;,<br>addFriend()&#123;<br><span class="hljs-keyword">this</span>.student.friends.unshift(&#123;name:<span class="hljs-string">&#x27;jack&#x27;</span>,age:<span class="hljs-number">70</span>&#125;)<br>&#125;,<br>updateFirstFriendName()&#123;<br><span class="hljs-keyword">this</span>.student.friends[<span class="hljs-number">0</span>].name = <span class="hljs-string">&#x27;张三&#x27;</span><br>&#125;,<br>addHobby()&#123;<br><span class="hljs-keyword">this</span>.student.hobby.push(<span class="hljs-string">&#x27;学习&#x27;</span>)<br>&#125;,<br>updateHobby()&#123;<br><span class="hljs-comment">// this.student.hobby.splice(0,1,&#x27;开车&#x27;)</span><br><span class="hljs-comment">// Vue.set(this.student.hobby,0,&#x27;开车&#x27;)</span><br><span class="hljs-keyword">this</span>.$set(<span class="hljs-keyword">this</span>.student.hobby,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;开车&#x27;</span>)<br>&#125;,<br>removeSmoke()&#123;<br><span class="hljs-keyword">this</span>.student.hobby = <span class="hljs-keyword">this</span>.student.hobby.filter((h)=&gt;&#123;<br><span class="hljs-keyword">return</span> h !== <span class="hljs-string">&#x27;抽烟&#x27;</span><br>&#125;)<br>&#125;<br>&#125;<br>&#125;)<br>&lt;/script&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>常见错误总结</title>
    <link href="/2021/10/09/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
    <url>/2021/10/09/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h4 id="controller层的方法指定了两个相同的路径"><a href="#controller层的方法指定了两个相同的路径" class="headerlink" title="controller层的方法指定了两个相同的路径"></a>controller层的方法指定了两个相同的路径</h4><p>Ambiguous mapping. Cannot map ‘XXXXController’ method</p><p><img src="/2021/10/09/%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/image-20211009145822887.png" alt="image-20211009145822887"></p>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谷粒商城项目总结1</title>
    <link href="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/"/>
    <url>/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<h2 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h2><p>谷粒商城是一个 B2C 模式的电商平台，销售自营商品给客户。</p><h2 id="P3-6-分布式"><a href="#P3-6-分布式" class="headerlink" title="P3-6 分布式"></a>P3-6 分布式</h2><h3 id="分布式基础"><a href="#分布式基础" class="headerlink" title="分布式基础"></a>分布式基础</h3><h4 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a><strong>微服务</strong></h4><p>微服务架构风格，就像是把一个<strong>单独的应用程序</strong>开发为<strong>一套小服务</strong>，每个<strong>小服务</strong>运行在<strong>自</strong> </p><p><strong>己</strong>的<strong>进程</strong>中，并使用轻量级机制通信，通常是 HTTP API。</p><h4 id="集群-amp-分布式-amp-节点"><a href="#集群-amp-分布式-amp-节点" class="headerlink" title="集群&amp;分布式&amp;节点"></a>集群&amp;分布式&amp;节点</h4><p>TODO</p><h4 id="远程调用"><a href="#远程调用" class="headerlink" title="远程调用"></a>远程调用</h4><p>各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用</p><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013112356272.png" alt="image-20211013112356272"></p><h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013112453364.png" alt="image-20211013112453364"></p><p><strong>常见的负载均衡算法：</strong> </p><p><strong>轮询：</strong>为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直 </p><p>到最后一个，然后循环。 </p><p><strong>最小连接：</strong>优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下 </p><p>可以考虑采取这种方式。 </p><p><strong>散列：</strong>根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程 </p><p>度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。</p><h4 id="服务注册-发现-amp-注册中心"><a href="#服务注册-发现-amp-注册中心" class="headerlink" title="服务注册/发现&amp;注册中心"></a>服务注册/发现&amp;注册中心</h4><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013112550461.png" alt="image-20211013112550461"></p><h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h4><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013112622306.png" alt="image-20211013112622306"></p><h4 id="服务熔断-amp-服务降级"><a href="#服务熔断-amp-服务降级" class="headerlink" title="服务熔断&amp;服务降级"></a>服务熔断&amp;服务降级</h4><p>在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时,有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。</p><ul><li>服务熔断 </li></ul><p>设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开 </p><p>启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认 </p><p>的数据 </p><ul><li>服务降级 </li></ul><p>在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业 </p><p>务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、 </p><p>调用 Mock 数据、调用 Fallback 处理逻辑】。</p><h4 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a>API 网关</h4><p>在微服务架构中，API Gateway 作为整体架构的重要组件，它<strong>抽象了微服务中都需要的公共</strong> </p><p><strong>功能</strong>，同时提供了客户端<strong>负载均衡</strong>，<strong>服务自动熔断</strong>，<strong>灰度发布</strong>，<strong>统一认证</strong>，<strong>限流流控</strong>，<strong>日</strong> </p><p><strong>志统计</strong>等丰富的功能，帮助我们解决很多 API 管理难题。</p><p>管关也可以做负载均衡！</p><h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.jpg" alt="谷粒商城-微服务架构图"></p><h3 id="微服务划分"><a href="#微服务划分" class="headerlink" title="微服务划分"></a>微服务划分</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013113902232.png" alt="image-20211013113902232"></p><h2 id="P6-19环境搭建"><a href="#P6-19环境搭建" class="headerlink" title="P6-19环境搭建"></a>P6-19环境搭建</h2><p>Linux虚拟机 Centos7</p><p>docker 安装 mysql、redis</p><p>开发工具 IDEA Maven Vscode</p><p>代码管理 Git</p><p>数据库初始化</p><p>逆向工程为数据库中的表生成代码</p><h2 id="P20-27SpringCloud"><a href="#P20-27SpringCloud" class="headerlink" title="P20-27SpringCloud"></a>P20-27SpringCloud</h2><h3 id="分布式系统基本环境SpringCloud"><a href="#分布式系统基本环境SpringCloud" class="headerlink" title="分布式系统基本环境SpringCloud"></a>分布式系统基本环境SpringCloud</h3><ul><li><p>SpringCloud Alibaba - Nacos：注册中心（服务发现/注册） </p></li><li><p>SpringCloud Alibaba - Nacos：配置中心（动态配置管理） </p></li><li><p>SpringCloud - Ribbon：负载均衡 SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务） </p></li><li><p>SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断） </p></li><li><p>SpringCloud - Gateway：API 网关（webflux 编程模式） SpringCloud - Sleuth：调用链监控 </p></li><li><p>SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案</p></li></ul><p>SpringCloud版本要和SpringBoot对应</p><h3 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h3><ol><li><p>pom文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>YML</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9001</span><br><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-payment-provider</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#配置Nacos地址</span><br><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentMain9001</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>            SpringApplication.run(PaymentMain9001.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="远程调用OpenFeign"><a href="#远程调用OpenFeign" class="headerlink" title="远程调用OpenFeign"></a>远程调用OpenFeign</h3></li><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>主启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderFeignMain80</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span><br><span class="hljs-function">    </span>&#123;<br>        SpringApplication.run(OrderFeignMain80.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>业务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@FeignClient(value = &quot;CLOUD-PAYMENT-SERVICE&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">PaymentFeignService</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@GetMapping(value = &quot;/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function">CommonResult&lt;Payment&gt; <span class="hljs-title">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderFeignController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> PaymentFeignService paymentFeignService;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/consumer/payment/get/&#123;id&#125;&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CommonResult&lt;Payment&gt; <span class="hljs-title">getPaymentById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> paymentFeignService.getPaymentById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Feign自带负载均衡配置项</p></li></ol><h3 id="配置中心-1"><a href="#配置中心-1" class="headerlink" title="配置中心"></a>配置中心</h3><ol><li><p>pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>bootstrap</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># nacos配置</span><br><span class="hljs-meta">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-meta">spring.cloud.nacos.config.namespace</span>=<span class="hljs-string">3b599d65-bf90-47a1-8e49-24065b23a226</span><br><span class="hljs-meta">spring.application.name</span>=<span class="hljs-string">guli-product</span><br></code></pre></td></tr></table></figure><p><strong>bootstrap优先级高于application</strong></p></li><li><p>@RefreshScope</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RefreshScope</span> <span class="hljs-comment">//在控制器类加入@RefreshScope注解使当前类下的配置支持Nacos的动态刷新功能。</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConfigClientController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">@Value(&quot;$&#123;config.info&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String configInfo;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/config/info&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getConfigInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> configInfo;<br>    &#125;<br>&#125;<br> <br></code></pre></td></tr></table></figure></li><li><p>Nacos配置中心的操作</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso">命名空间内可以创建配置的分类<br>将命名空间在bootstrap中关联，则就会被该命名空间管理<br>项目中每一个服务就创建一个命名空间<br><br>命名空间下的配置列表中，可见将配置分组<br>可以分为生产环境的配置 测试环境的配置 <span class="hljs-params">...</span><span class="hljs-params">...</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="网关GateWay"><a href="#网关GateWay" class="headerlink" title="网关GateWay"></a>网关GateWay</h3><ol><li><p>创建一个网关的微服务</p></li><li><p>完成服务注册与发现</p></li><li><p>在配置中编写路由</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">member_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://gulimall-member</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/member/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">product_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://guli-product</span><br>          <span class="hljs-attr">predicates:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/product/**</span><br>          <span class="hljs-attr">filters:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span><br><br><span class="hljs-comment">#        - id: test_route</span><br><span class="hljs-comment">#          uri: https://www.baidu.com</span><br><span class="hljs-comment">#          predicates:</span><br><span class="hljs-comment">#            - Query=url,baidu</span><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">third_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://gulimall-third-party</span><br>          <span class="hljs-attr">predicates:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/thirdparty/**</span><br>          <span class="hljs-attr">filters:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/thirdparty/(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span><br><br><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">admin_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://renren</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span><br></code></pre></td></tr></table></figure><p>tip：网关可以负载均衡<code>lb:</code></p><p>​        网关中的路由有先后顺序 最后的路由最后匹配</p><p>​        项目开发的时候，一般都要路径重写<code>- RewritePath=</code></p></li></ol><h2 id="P27-44vUE"><a href="#P27-44vUE" class="headerlink" title="P27-44vUE"></a>P27-44vUE</h2><h2 id="P45-101接口与前端页面的开发"><a href="#P45-101接口与前端页面的开发" class="headerlink" title="P45-101接口与前端页面的开发"></a>P45-101接口与前端页面的开发</h2><h3 id="P47跨域"><a href="#P47跨域" class="headerlink" title="P47跨域"></a>P47跨域</h3><ul><li><p>跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是 浏览器对javascript施加的安全限制。 </p></li><li><p>同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；</p></li></ul><h4 id="跨域流程"><a href="#跨域流程" class="headerlink" title="跨域流程"></a>跨域流程</h4><p>简单请求直接发送请求</p><p>非简单请求，需要发送预检请求</p><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013152103016.png" alt="image-20211013152103016"></p><h4 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h4><h5 id="使用nginx部署为同一域"><a href="#使用nginx部署为同一域" class="headerlink" title="使用nginx部署为同一域"></a>使用nginx部署为同一域</h5><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013152212026.png" alt="image-20211013152212026"></p><h5 id="配置当次请求允许跨域"><a href="#配置当次请求允许跨域" class="headerlink" title="配置当次请求允许跨域"></a>配置当次请求允许跨域</h5><h6 id="如何做"><a href="#如何做" class="headerlink" title="如何做"></a>如何做</h6><p>添加响应头 </p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">• <span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-variable">Allow</span><span class="hljs-operator">-</span><span class="hljs-variable">Origin</span>：支持哪些来源的请求跨域 <br><br>• <span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-variable">Allow</span><span class="hljs-operator">-</span><span class="hljs-variable">Methods</span>：支持哪些方法跨域 <br><br>• <span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-variable">Allow</span><span class="hljs-operator">-</span><span class="hljs-variable">Credentials</span>：跨域请求默认不包含<span class="hljs-variable">cookie</span>，设置为<span class="hljs-variable">true</span>可以包含 <br><br><span class="hljs-variable">cookie</span> <br><br>• <span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-variable">Expose</span><span class="hljs-operator">-</span><span class="hljs-variable">Headers</span>：跨域请求暴露的字段 <br><br>• <span class="hljs-variable">CORS</span>请求时，<span class="hljs-variable">XMLHttpRequest</span>对象的<span class="hljs-variable">getResponseHeader</span><span class="hljs-punctuation">(</span><span class="hljs-punctuation">)</span>方法只能拿到<span class="hljs-number">6</span>个基本字段： <br><br><span class="hljs-variable">Cache</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span>、<span class="hljs-variable">Content</span><span class="hljs-operator">-</span><span class="hljs-built_in">Language</span>、<span class="hljs-variable">Content</span><span class="hljs-operator">-</span><span class="hljs-variable">Type</span>、<span class="hljs-variable">Expires</span>、<span class="hljs-built_in">Last</span><span class="hljs-operator">-</span><span class="hljs-variable">Modified</span>、<span class="hljs-variable">Pragma</span>。如 <br><br>果想拿到其他字段，就必须在<span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-variable">Expose</span><span class="hljs-operator">-</span><span class="hljs-variable">Headers</span>里面指定。 <br><br>• <span class="hljs-variable">Access</span><span class="hljs-operator">-</span><span class="hljs-built_in">Control</span><span class="hljs-operator">-</span><span class="hljs-built_in">Max</span><span class="hljs-operator">-</span><span class="hljs-variable">Age</span>：表明该响应的有效时间为多少秒。在有效时间内，浏览器无 <br><br>须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果 <br><br>该首部字段的值超过了最大有效时间，将不会生效<br></code></pre></td></tr></table></figure><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><p>缺点：每一个请求都要</p><h6 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h6><p>利用filter,在前求接口之前，统一添加响应头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GulimallCorsConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsWebFilter</span><span class="hljs-params">()</span></span>&#123;<br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br><br>        CorsConfiguration corsConfiguration = <span class="hljs-keyword">new</span> CorsConfiguration();<br><br>        <span class="hljs-comment">//1、配置跨域</span><br>        corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.setAllowCredentials(<span class="hljs-keyword">true</span>);<br><br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>,corsConfiguration);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Oss对象储存"><a href="#Oss对象储存" class="headerlink" title="Oss对象储存"></a>Oss对象储存</h3><h4 id="服务端签名后直传"><a href="#服务端签名后直传" class="headerlink" title="服务端签名后直传"></a>服务端签名后直传</h4><p>优点：采用JavaScript客户端直接签名（参见<a href="https://help.aliyun.com/document_detail/31925.htm?spm=a2c4g.11186623.0.0.169c5d3fQhtHY6#concept-frd-4gy-5db">JavaScript客户端签名直传</a>）时，AccessKey ID和AcessKey Secret会暴露在前端页面，因此存在严重的安全隐患。因此，OSS提供了服务端签名后直传的方案。</p><p><img src="http://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3156348951/p139016.png" alt="img"></p><p><a href="https://help.aliyun.com/document_detail/91868.htm?spm=a2c4g.11186623.0.0.169c5d3fQhtHY6#concept-ahk-rfz-2fb">官网实例</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript">protected <span class="hljs-keyword">void</span> doGet(HttpServletRequest request, HttpServletResponse response)<br>            throws ServletException, IOException &#123;<br><br>        <span class="hljs-built_in">String</span> accessId = <span class="hljs-string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>; <span class="hljs-comment">// 请填写您的AccessKeyId。</span><br>        <span class="hljs-built_in">String</span> accessKey = <span class="hljs-string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>; <span class="hljs-comment">// 请填写您的AccessKeySecret。</span><br>        <span class="hljs-built_in">String</span> endpoint = <span class="hljs-string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="hljs-comment">// 请填写您的 endpoint。</span><br>        <span class="hljs-built_in">String</span> bucket = <span class="hljs-string">&quot;bucket-name&quot;</span>; <span class="hljs-comment">// 请填写您的 bucketname 。</span><br>        <span class="hljs-built_in">String</span> host = <span class="hljs-string">&quot;https://&quot;</span> + bucket + <span class="hljs-string">&quot;.&quot;</span> + endpoint; <span class="hljs-comment">// host的格式为 bucketname.endpoint</span><br>        <span class="hljs-comment">// callbackUrl为上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span><br>        <span class="hljs-built_in">String</span> callbackUrl = <span class="hljs-string">&quot;http://88.88.88.88:8888&quot;</span>;<br>        <span class="hljs-built_in">String</span> dir = <span class="hljs-string">&quot;user-dir-prefix/&quot;</span>; <span class="hljs-comment">// 用户上传文件时指定的前缀。</span><br><br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessId, accessKey);<br>        <span class="hljs-keyword">try</span> &#123;<br>            long expireTime = <span class="hljs-number">30</span>;<br>            long expireEndTime = System.currentTimeMillis() + expireTime * <span class="hljs-number">1000</span>;<br>            <span class="hljs-built_in">Date</span> expiration = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(expireEndTime);<br>            <span class="hljs-comment">// PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。</span><br>            PolicyConditions policyConds = <span class="hljs-keyword">new</span> PolicyConditions();<br>            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="hljs-number">0</span>, <span class="hljs-number">1048576000</span>);<br>            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);<br><br>            <span class="hljs-built_in">String</span> postPolicy = ossClient.generatePostPolicy(expiration, policyConds);<br>            byte[] binaryData = postPolicy.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            <span class="hljs-built_in">String</span> encodedPolicy = BinaryUtil.toBase64String(binaryData);<br>            <span class="hljs-built_in">String</span> postSignature = ossClient.calculatePostSignature(postPolicy);<br><br>            <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt; respMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">String</span>&gt;();<br>            respMap.put(<span class="hljs-string">&quot;accessid&quot;</span>, accessId);<br>            respMap.put(<span class="hljs-string">&quot;policy&quot;</span>, encodedPolicy);<br>            respMap.put(<span class="hljs-string">&quot;signature&quot;</span>, postSignature);<br>            respMap.put(<span class="hljs-string">&quot;dir&quot;</span>, dir);<br>            respMap.put(<span class="hljs-string">&quot;host&quot;</span>, host);<br>            respMap.put(<span class="hljs-string">&quot;expire&quot;</span>, <span class="hljs-built_in">String</span>.valueOf(expireEndTime / <span class="hljs-number">1000</span>));<br>            <span class="hljs-comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span><br><br>            JSONObject jasonCallback = <span class="hljs-keyword">new</span> JSONObject();<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackUrl&quot;</span>, callbackUrl);<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackBody&quot;</span>,<br>                    <span class="hljs-string">&quot;filename=$&#123;object&#125;&amp;size=$&#123;size&#125;&amp;mimeType=$&#123;mimeType&#125;&amp;height=$&#123;imageInfo.height&#125;&amp;width=$&#123;imageInfo.width&#125;&quot;</span>);<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackBodyType&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>            <span class="hljs-built_in">String</span> base64CallbackBody = BinaryUtil.toBase64String(jasonCallback.toString().getBytes());<br>            respMap.put(<span class="hljs-string">&quot;callback&quot;</span>, base64CallbackBody);<br><br>            JSONObject ja1 = JSONObject.fromObject(respMap);<br>            <span class="hljs-comment">// System.out.println(ja1.toString());</span><br>            response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET, POST&quot;</span>);<br>            response(request, response, ja1.toString());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Assert.fail(e.getMessage());</span><br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123; <br>            ossClient.shutdown();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>这一系列操作就是在服务器端，通过一系列运算，回传给客户端accessid、policy、signature、host等信息，客户端拿到该信息就可以直接将文件上传。</strong></p><h4 id="配置oss，bucket的注意事项"><a href="#配置oss，bucket的注意事项" class="headerlink" title="配置oss，bucket的注意事项"></a>配置oss，bucket的注意事项</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>    <span class="hljs-attr">alicloud:</span><br>      <span class="hljs-attr">access-key:</span> <span class="hljs-string">LTAI5tP1PoxWnCtW119aEpnx</span><br>      <span class="hljs-attr">secret-key:</span> <span class="hljs-string">qUTmqUFbac8WdY848QJb8Lh0oXInm7</span><br>      <span class="hljs-attr">oss:</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-beijing.aliyuncs.com</span><br>        <span class="hljs-attr">bucket:</span> <span class="hljs-string">guli-lapuda</span><br></code></pre></td></tr></table></figure><p>bucket是没有在ConfigurationProperties里的，但是可以手动添加，方便@Value()注入。</p><p>因为access-key和secret-key，就包含了bucket列表，但是也要配置正确，因为传给客户端的host就包含了bucket。如果bucket错误，虽然可以上传文件成功，但是做一些其他操作会失败。（例如调用上传的图片时，地址发生错误）</p><h3 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h3><h4 id="单组校验："><a href="#单组校验：" class="headerlink" title="单组校验："></a>单组校验：</h4><ol><li><p>在entity对象的属性中添加校验注解（在javax.validation.constraints包下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotBlank(message = &quot;品牌名必须提交&quot;)</span><span class="hljs-comment">//自定义message消息</span><br>   <span class="hljs-keyword">private</span> String name;<br>   <br><span class="hljs-meta">@Pattern(regexp=&quot;^[a-zA-Z]$&quot;,message = &quot;检索首字母必须是一个字母&quot;)</span><span class="hljs-comment">//支持正则</span><br>   <span class="hljs-keyword">private</span> String firstLetter;<br>   <br><span class="hljs-meta">@URL</span><br><span class="hljs-keyword">private</span> String EMail;<br></code></pre></td></tr></table></figure></li><li><p>在请求的controller方法中添加@Valid注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> BrandEntity brand)</span></span>&#123;<br>brandService.save(brand);<br><br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。(但会造成代码冗余)，可以采取统一异常处理。（见04）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/save&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">save</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> BrandEntity brand, BindingResult result)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>( result.hasErrors())&#123;<br>            Map&lt;String,String&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-comment">//1.获取错误的校验结果</span><br>            result.getFieldErrors().forEach((item)-&gt;&#123;<br>                <span class="hljs-comment">//获取发生错误时的message</span><br>                String message = item.getDefaultMessage();<br>                <span class="hljs-comment">//获取发生错误的字段</span><br>                String field = item.getField();<br>                map.put(field,message);<br>            &#125;);<br>            <span class="hljs-keyword">return</span> R.error(<span class="hljs-number">400</span>,<span class="hljs-string">&quot;提交的数据不合法&quot;</span>).put(<span class="hljs-string">&quot;data&quot;</span>,map);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br><br>        &#125;<br>brandService.save(brand);<br><br>        <span class="hljs-keyword">return</span> R.ok();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>统一异常处理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">统一异常处理过程：<br><br><span class="hljs-number">1.</span> 创建异常处理类（专门创建一个exception的包）<br><span class="hljs-number">2.</span> 添加<span class="hljs-meta">@ControllerAdvice</span>注解<br><span class="hljs-number">3.</span> 在类写具体处理的类，需添加<span class="hljs-meta">@ExceptionHandler(value=xxxExcepion.class)</span>指明需要处理的异常类型。<br><br>- <span class="hljs-meta">@RestControllerAdvice</span>=<span class="hljs-meta">@ResponseBody</span>+<span class="hljs-meta">@Controller</span>+<span class="hljs-meta">@Advice</span>（basePackge=）可以指定处理哪里的异常<br>- 打印日志：先引入<span class="hljs-meta">@Slf4j</span>注解，再使用log.erro()等就可以打印日志了<br>    <br>    <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice(basePackages = &quot;com.atguigu.gulimall.product&quot;)</span>   <span class="hljs-comment">//指定检验的包</span><br><span class="hljs-comment">//@RestControllerAdvice=@ResponseBody+@Controller+@Advice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GulimallExceptionControllerAdvice</span> </span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">handleValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> </span>&#123;<br>        log.error(<span class="hljs-string">&quot;数据校验出错：&#123;&#125;，异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());<br>        BindingResult bindingResult = e.getBindingResult();<br>        Map&lt;String,String&gt; errorMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        bindingResult.getFieldErrors().forEach((fieldError)-&gt;&#123;<br>            errorMap.put(fieldError.getField(),fieldError.getDefaultMessage());<br>        &#125;);<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnume.VAILD_EXCEPTION.getCode(),BizCodeEnume.VAILD_EXCEPTION.getMsg())<br>            .put(<span class="hljs-string">&quot;data&quot;</span>,errorMap);<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Throwable.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">handlerException</span><span class="hljs-params">(Throwable throwable)</span></span>&#123;<br>        log.error(<span class="hljs-string">&quot;error:&quot;</span>,throwable);<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnume.UNKNOW_EXCEPTION.getCode(),BizCodeEnume.UNKNOW_EXCEPTION.getMsg());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    可以通过创建枚举类,统一定义返回的状态码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">BizCodeEnume</span> </span>&#123;<br>    UNKNOW_EXCEPTION(<span class="hljs-number">10000</span>,<span class="hljs-string">&quot;系统未知异常&quot;</span>),<br>    VAILD_EXCEPTION(<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;参数格式校验失败&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    BizCodeEnume(<span class="hljs-keyword">int</span> code,String msg)&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h4><p>Bean对象的属性检验在不同的业务情况下，检验的是不同的。如：在创建Bean时，id属性应该为空；在更新Bean时，id属性不为空。</p><ol><li><p>在Entity类上的校验注解上添加group属性，属性中是一个<strong>接口类</strong>(一个空接口，自己创建)。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@NotNull</span>(message = <span class="hljs-string">&quot;修改必须指定品牌id&quot;</span>,groups = &#123;UpdateGroup.class&#125;)<br>  <span class="hljs-variable">@Null</span>(message = <span class="hljs-string">&quot;新增不能指定id&quot;</span>,groups = &#123;AddGroup.class&#125;)<br>  <span class="hljs-variable">@TableId</span><br>  private Long brandId;<br></code></pre></td></tr></table></figure></li><li><p>在请求的controller方法中添加**@Valided**注解,并添加需要的分组的接口类。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/save&quot;</span>)<br>public R save(<span class="hljs-variable">@Validated</span>(&#123;AddGroup.class&#125;) <span class="hljs-variable">@RequestBody</span> BrandEntity brand) &#123;<br>    <span class="hljs-selector-tag">brandService</span><span class="hljs-selector-class">.save</span>(brand);<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">R</span><span class="hljs-selector-class">.ok</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="手写一个检验注解"><a href="#手写一个检验注解" class="headerlink" title="手写一个检验注解"></a>手写一个检验注解</h4><ol><li><p>创建一个注解的接口（一般参照其他注解接口，直接复制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以ListValue自定义注解为例</span><br><span class="hljs-meta">@ListValue(vals=&#123;0,1&#125;,groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span><br><span class="hljs-keyword">private</span> Integer showStatus;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class &#125;)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListValue &#123;<br>    <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;com.atguigu.common.valid.ListValue.message&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    int[] vals() default &#123; &#125;;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建ValidationMessages.properties，添加messages属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.valid</span><span class="hljs-selector-class">.ListValue</span>.message=必须提交指定的值<br></code></pre></td></tr></table></figure></li><li><p>创建校验器类，实现ConstraintValidator类，并编写校验规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解名   检验的数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListValueConstraintValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">ListValue</span>,<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(ListValue constraintAnnotation)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] vals = constraintAnnotation.vals();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val : vals) &#123;<br>            set.add(val);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//判断是否校验成功</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 需要校验的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> set.contains(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="P75"><a href="#P75" class="headerlink" title="P75"></a>P75</h3><h4 id="引入分页插件"><a href="#引入分页插件" class="headerlink" title="引入分页插件"></a>引入分页插件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Spring boot方式</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@MapperScan(&quot;com.baomidou.cloud.service.*.mapper*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">// 旧版</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        PaginationInterceptor paginationInterceptor = <span class="hljs-keyword">new</span> PaginationInterceptor();<br>        <span class="hljs-comment">// 设置请求的页面大于最大页后操作， true调回到首页，false 继续请求  默认false</span><br>        <span class="hljs-comment">// paginationInterceptor.setOverflow(false);</span><br>        <span class="hljs-comment">// 设置最大单页限制数量，默认 500 条，-1 不受限制</span><br>        <span class="hljs-comment">// paginationInterceptor.setLimit(500);</span><br>        <span class="hljs-comment">// 开启 count 的 join 优化,只针对部分 left join</span><br>        paginationInterceptor.setCountSqlParser(<span class="hljs-keyword">new</span> JsqlParserCountOptimize(<span class="hljs-keyword">true</span>));<br>        <span class="hljs-keyword">return</span> paginationInterceptor;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 最新版</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> PaginationInnerInterceptor(DbType.H2));<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>修改queryPage</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">queryPage</span><span class="hljs-params">(Map&lt;String, Object&gt; params)</span> </span>&#123;<br>    QueryWrapper&lt;BrandEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(key))&#123;<br>        wrapper.like(<span class="hljs-string">&quot;name&quot;</span>,key);<br>    &#125;<br>    IPage&lt;BrandEntity&gt; page = <span class="hljs-keyword">this</span>.page(<span class="hljs-keyword">new</span> Query&lt;BrandEntity&gt;().getPage(params), wrapper);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageUtils(page);<br>&#125;<br></code></pre></td></tr></table></figure><p>该项目对MyBatisPLlus提供的Page对象进行了再次封装</p><p>也创建了自己的Query类，可以通过<code>getPage()</code>对<code>Map&lt;String, Object&gt;</code>进行了解析</p><p><code>Map&lt;String, Object&gt;</code>封装了分页需要的参数</p><h4 id="关联分类"><a href="#关联分类" class="headerlink" title="关联分类"></a>关联分类</h4><p>多对多，需传建一个表,并保留一些冗余字段，以减少查询提高性能。</p><p>但是但数据更新的时候，也要保持冗余数据的一致</p><h3 id="P76"><a href="#P76" class="headerlink" title="P76"></a>P76</h3><h4 id="Object-划分"><a href="#Object-划分" class="headerlink" title="Object 划分"></a>Object <strong>划分</strong></h4><ul><li><strong>1.PO(persistant object)</strong> <strong>持久对象</strong> </li></ul><p>PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。 PO 中应该不包 </p><p>含任何对数据库的操作。 </p><ul><li><strong>2.DO<strong><strong>（</strong></strong>Domain Object****）领域对象</strong> </li></ul><p>就是从现实世界中抽象出来的有形或无形的业务实体。 </p><ul><li><strong>3.TO(Transfer Object)</strong> <strong>，数据传输对象</strong> </li></ul><p>不同的应用程序之间传输的对象 </p><ul><li><strong>4.DTO<strong><strong>（</strong></strong>Data Transfer Object****）数据传输对象</strong> </li></ul><p>这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的 </p><p>数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这 </p><p>里，泛指用于展示层与服务层之间的数据传输对象。 </p><ul><li><strong>5.VO(value object)</strong> <strong>值对象</strong> </li></ul><p>通常用于业务层之间的数据传递，和 PO 一样也是仅仅包含数据而已。但应是抽象出 </p><p>的业务对象 , 可以和表对应 , 也可以不 , 这根据业务的需要 。用 new 关键字创建，由 </p><p>GC 回收的。 </p><p>View object：视图对象； </p><p>接受页面传递来的数据，封装对象 </p><p>将业务处理完成的对象，封装成页面要用的数据 </p><ul><li><strong>6.BO(business object)</strong> <strong>业务对象</strong> </li></ul><p>从业务模型的角度看 , 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对 </p><p>象 , 通过调用 DAO 方法 , 结合 PO,VO 进行业务操作。business object: 业务对象 主要作 </p><p>用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。 比如一个简 </p><p>历，有教育经历、工作经历、社会关系等等。 我们可以把教育经历对应一个 PO ，工作经 </p><p>历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的 BO 对象处理简历，每 </p><p>个 BO 包含这些 PO 。 这样处理业务逻辑时，我们就可以针对 BO 去处理。</p><h4 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanUtils</span>.</span></span>copy<span class="hljs-constructor">Properties(<span class="hljs-params">attr</span>,<span class="hljs-params">attrEntity</span>)</span>;<br></code></pre></td></tr></table></figure><p>把attr的属性赋值给attrEntity，不要搞错了</p><h3 id="P77"><a href="#P77" class="headerlink" title="P77"></a>P77</h3><p>查询规格参数</p><p>请求路径 /product/attr/base/list/{catelogId}</p><p>请求参数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123;<br>   page: <span class="hljs-number">1</span>,<span class="hljs-regexp">//</span>当前页码<br>   limit: <span class="hljs-number">10</span>,<span class="hljs-regexp">//</span>每页记录数<br>   sidx: <span class="hljs-string">&#x27;id&#x27;</span>,<span class="hljs-regexp">//</span>排序字段<br>   order: <span class="hljs-string">&#x27;asc/desc&#x27;</span>,<span class="hljs-regexp">//</span>排序方式<br>   key: <span class="hljs-string">&#x27;华为&#x27;</span><span class="hljs-regexp">//</span>检索关键字<br>&#125;<br></code></pre></td></tr></table></figure><p>响应数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;msg&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>,<br><span class="hljs-attr">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;page&quot;</span>: &#123;<br><span class="hljs-attr">&quot;totalCount&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;pageSize&quot;</span>: <span class="hljs-number">10</span>,<br><span class="hljs-attr">&quot;totalPage&quot;</span>: <span class="hljs-number">0</span>,<br><span class="hljs-attr">&quot;currPage&quot;</span>: <span class="hljs-number">1</span>,<br><span class="hljs-attr">&quot;list&quot;</span>: [&#123;<br><span class="hljs-attr">&quot;attrId&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//属性id</span><br><span class="hljs-attr">&quot;attrName&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-comment">//属性名</span><br><span class="hljs-attr">&quot;attrType&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//属性类型，0-销售属性，1-基本属性</span><br><span class="hljs-attr">&quot;catelogName&quot;</span>: <span class="hljs-string">&quot;手机/数码/手机&quot;</span>, <span class="hljs-comment">//所属分类名字</span><br><span class="hljs-attr">&quot;groupName&quot;</span>: <span class="hljs-string">&quot;主体&quot;</span>, <span class="hljs-comment">//所属分组名字</span><br><span class="hljs-attr">&quot;enable&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//是否启用</span><br><span class="hljs-attr">&quot;icon&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-comment">//图标</span><br><span class="hljs-attr">&quot;searchType&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-comment">//是否需要检索[0-不需要，1-需要]</span><br><span class="hljs-attr">&quot;showDesc&quot;</span>: <span class="hljs-number">0</span>,<span class="hljs-comment">//是否展示在介绍上；0-否 1-是</span><br><span class="hljs-attr">&quot;valueSelect&quot;</span>: <span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-comment">//可选值列表[用逗号分隔]</span><br><span class="hljs-attr">&quot;valueType&quot;</span>: <span class="hljs-number">0</span><span class="hljs-comment">//值类型[0-为单个值，1-可以选择多个值]</span><br>&#125;]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="分析-这相当于要在后端查询三张表（如图）"><a href="#分析-这相当于要在后端查询三张表（如图）" class="headerlink" title="分析:这相当于要在后端查询三张表（如图）"></a>分析:这相当于要在后端查询三张表（如图）</h4><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211006151644885.png" alt="image-20211006151644885"></p><p>由于AttrEntityd的属性占响应数据的绝大部分，所以可以查询出Attr表后，在其基础上增加<code>catelogName</code>和<code>groupName</code></p><p>核心代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">getBaseList</span><span class="hljs-params">(Long catelogId, Map&lt;String, Object&gt; params)</span> </span>&#123;<br>        <br>        <span class="hljs-comment">//查询AttrEntity</span><br>        QueryWrapper&lt;AttrEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(key)) &#123;<br>            wrapper.and((wrapper1) -&gt; &#123;<br>                wrapper1.eq(<span class="hljs-string">&quot;attr_id&quot;</span>, key).or().like(<span class="hljs-string">&quot;attr_name&quot;</span>, key);<br>            &#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (catelogId != <span class="hljs-number">0</span>) &#123;<br>            wrapper.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>, catelogId);<br>        &#125;<br>        IPage&lt;AttrEntity&gt; page = <span class="hljs-keyword">this</span>.page(<br>                <span class="hljs-keyword">new</span> Query&lt;AttrEntity&gt;().getPage(params),<br>                wrapper<br>        );<br>        PageUtils pageUtils = <span class="hljs-keyword">new</span> PageUtils(page);<br>        <br>        <br>        <span class="hljs-comment">//查询</span><br>        <br>        List&lt;AttrRespVo&gt; attrRespVos = page.getRecords().stream().map((attrEntity) -&gt; &#123;<br>            AttrRespVo attrRespVo = <span class="hljs-keyword">new</span> AttrRespVo();<br>            BeanUtils.copyProperties(attrEntity,attrRespVo);<br>            CategoryEntity categoryEntity = categoryDao.selectById(attrEntity.getCatelogId());<br>            <span class="hljs-keyword">if</span>(categoryEntity!=<span class="hljs-keyword">null</span>)&#123;<br>                attrRespVo.setCatelogName(categoryEntity.getName());<br>            &#125;<br>            <span class="hljs-keyword">return</span> attrRespVo;<br>        &#125;).collect(Collectors.toList());<br>        pageUtils.setList(attrRespVos);<span class="hljs-comment">//查询出Attr表后，在其基础上增加`catelogName`和`groupName`</span><br>        <span class="hljs-keyword">return</span> pageUtils;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="条件构造器and"><a href="#条件构造器and" class="headerlink" title="条件构造器and"></a>条件构造器and</h4><p>有两种形式的条件构造方式，它们之间相差很大!!!</p><p>第一种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!StringUtils.isEmpty(key)) &#123;<br>            wrapper.and((wrapper1) -&gt; &#123;<br>                wrapper1.eq(<span class="hljs-string">&quot;attr_id&quot;</span>, key).or().like(<span class="hljs-string">&quot;attr_name&quot;</span>, key);<br>            &#125;);<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  attr_id,attr_name,search_type,icon,value_select,attr_type,enable,catelog_id,show_desc  <br><span class="hljs-keyword">FROM</span> pms_attr <br><span class="hljs-keyword">WHERE</span> ((attr_id <span class="hljs-operator">=</span> ? <span class="hljs-keyword">OR</span> attr_name <span class="hljs-keyword">LIKE</span> ?))<br></code></pre></td></tr></table></figure><p>第二种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">wrapper.eq(<span class="hljs-string">&quot;attr_id&quot;</span>, key).or().like(<span class="hljs-string">&quot;attr_name&quot;</span>, key);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span>  attr_id,attr_name,search_type,icon,value_select,attr_type,enable,catelog_id,show_desc  <br><span class="hljs-keyword">FROM</span> pms_attr <br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">WHERE</span> (attr_id <span class="hljs-operator">=</span> ? <span class="hljs-keyword">OR</span> attr_name <span class="hljs-keyword">LIKE</span> ?)<br></code></pre></td></tr></table></figure><p>虽然这两种方式的条件构造器，最后的sql语句都是一样的，且执行的结果一样，<strong>仅仅只是差了一个括号</strong>，但是当这个wrapper再拼接一个条件是就会发生巨大的变化。例如在原来的wrapper上在拼接一个<code>wrapper.eq(&quot;catelog_id&quot;, catelogId);</code></p><p>那么第一种的结果是:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>)<br> <span class="hljs-keyword">FROM</span> pms_attr<br> <span class="hljs-keyword">WHERE</span> ((attr_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">OR</span> attr_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1%&#x27;</span>) <span class="hljs-keyword">AND</span> catelog_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>第二种的结果是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-number">1</span>)<br> <span class="hljs-keyword">FROM</span> pms_attr<br> <span class="hljs-keyword">WHERE</span> (attr_id <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">OR</span> attr_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%1%&#x27;</span> <span class="hljs-keyword">AND</span> catelog_id <span class="hljs-operator">=</span> <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h4><p>Stream（流）是一个来自数据源的元素队列并支持聚合操作</p><p><strong>聚合操作</strong> 类似SQL语句一样的操作， 比如filter, map, reduce, find, match, sorted等。</p><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 获取对应的平方数</span><br>List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;AttrRespVo&gt; attrRespVos = page.getRecords().stream().map((attrEntity) -&gt; &#123;<br>            AttrRespVo attrRespVo = <span class="hljs-keyword">new</span> AttrRespVo();<br>            BeanUtils.copyProperties(attrEntity,attrRespVo);<br>            CategoryEntity categoryEntity = categoryDao.selectById(attrEntity.getCatelogId());<br>            <span class="hljs-keyword">if</span>(categoryEntity!=<span class="hljs-keyword">null</span>)&#123;<br>                attrRespVo.setCatelogName(categoryEntity.getName());<br>            &#125;<br>            <span class="hljs-keyword">return</span> attrRespVo;<br>        &#125;).collect(Collectors.toList());<br><br><span class="hljs-comment">//attrEntity就相当于是流</span><br></code></pre></td></tr></table></figure><h3 id="P78"><a href="#P78" class="headerlink" title="P78"></a>P78</h3><p>当一个增删改查得接口中，要对不得表进行修改的时候，需要加上事务的注解<code>@Transactional</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Transactional</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMore</span><span class="hljs-params">(AttrVo attr)</span> </span>&#123;<br>        AttrEntity attrEntity = <span class="hljs-keyword">new</span> AttrEntity();<br><br>        BeanUtils.copyProperties(attr,attrEntity);<br>        <span class="hljs-keyword">this</span>.updateById(attrEntity);<br><br>        AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = attrAttrgroupRelationService.getOne<br>                (<span class="hljs-keyword">new</span> QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(<span class="hljs-string">&quot;attr_id&quot;</span>, attr.getAttrId()));<br>        BeanUtils.copyProperties(attr,attrAttrgroupRelationEntity);<br><br>        attrAttrgroupRelationService.updateById(attrAttrgroupRelationEntity);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="P80"><a href="#P80" class="headerlink" title="P80"></a>P80</h3><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h4><p>在编写接口的时候，接口文档中</p><blockquote><p>[{  “attrGroupId”: 4,   “attrId”: 3 }]</p></blockquote><p>在后端controller层，需要使用一个<strong>对象数组</strong>来接受这个参数！使用的注解为@RequestBody</p><p>使用数组在传值，是因为可以获得steam流</p><h4 id="复习controller层用于接受参数的几个注解"><a href="#复习controller层用于接受参数的几个注解" class="headerlink" title="复习controller层用于接受参数的几个注解"></a>复习controller层用于接受参数的几个注解</h4><p>@RequsetBody</p><p>@PathVaribal</p><p>@RequestParam</p><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><p>在需要批量删除的时候，不要分开删除。这样会降低数据库的效能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">AttrAttrgroupRelationDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">AttrAttrgroupRelationEntity</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">deleteBatchByAttrAttrGroup</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;entities&quot;)</span> List&lt;AttrAttrgroupRelationEntity&gt; attrAttrgroupRelationEntities)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">delete</span> id<span class="hljs-operator">=</span>&quot;deleteBatchByAttrAttrGroup&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> `pms_attr_attrgroup_relation` <span class="hljs-keyword">WHERE</span><br>    <span class="hljs-operator">&lt;</span>foreach collection<span class="hljs-operator">=</span>&quot;entities&quot; item<span class="hljs-operator">=</span>&quot;item&quot; separator<span class="hljs-operator">=</span>&quot; OR &quot;<span class="hljs-operator">&gt;</span><br>        (attr_id<span class="hljs-operator">=</span>#&#123;item.attrId&#125; <span class="hljs-keyword">AND</span> attr_group_id<span class="hljs-operator">=</span>#&#123;item.attrGroupId&#125;)<br>    <span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span>foreach<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">delete</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="P81"><a href="#P81" class="headerlink" title="P81"></a>P81</h3><h4 id="获取属性分组没有关联的其他属性"><a href="#获取属性分组没有关联的其他属性" class="headerlink" title="获取属性分组没有关联的其他属性"></a>获取属性分组没有关联的其他属性</h4><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211008171512867.png" alt="image-20211008171512867"></p><p>总结：</p><p>由于增加了关联表 C 。表A可以通过表C查询到表B。</p><p>但是如果表A中的某个数据被删除了，而表C没有及时更新，那么，当表B通过表C查询表A时，虽然表C有原来关于表A的数据，但是由于表A已经删除了，所以查询到的数据是空！！！ 这回带来一系列问题，比如：</p><ol><li>需要链表查询的时候，如果A中的数据不存在了，如果查询其字段名，直接回报错！！</li><li>需要通过C查询一组A的时候，由于某个值为空，虽然查询出了所有数据（包括空），但前端在处理数据的时候，不许有空,否则前端无页面</li></ol><h3 id="p86新增商品抽取"><a href="#p86新增商品抽取" class="headerlink" title="p86新增商品抽取"></a>p86新增商品抽取</h3><p>当要处理很长得jason数据的时候，网上有很多奖jason转为对象的工具类！</p><p><code>@TableId(type = IdType.INPUT)</code>当实体类的字段需要</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="获取所有分类以及子分类，并返回json树形结构"><a href="#获取所有分类以及子分类，并返回json树形结构" class="headerlink" title="获取所有分类以及子分类，并返回json树形结构"></a>获取所有分类以及子分类，并返回json树形结构</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;CategoryEntity&gt; <span class="hljs-title">listWithTree</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="hljs-keyword">null</span>);<br>        List&lt;CategoryEntity&gt; collect =<br>                categoryEntities.stream().<br>                        filter(categoryEntity -&gt; categoryEntity.getParentCid() == <span class="hljs-number">0</span>).<br>                        map(categoryEntity -&gt; &#123;<br>                            categoryEntity.setChildren(<span class="hljs-keyword">this</span>.getchilren(categoryEntity, categoryEntities));<br>                            <span class="hljs-keyword">return</span> categoryEntity;<br>                        &#125;).collect(Collectors.toList());<br>        <span class="hljs-keyword">return</span> collect;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;CategoryEntity&gt; <span class="hljs-title">getchilren</span><span class="hljs-params">(CategoryEntity menu, List&lt;CategoryEntity&gt; categoryEntities)</span> </span>&#123;<br>       List&lt;CategoryEntity&gt; collect = categoryEntities.stream().<br>               filter(categoryEntity -&gt; categoryEntity.getParentCid().equals(menu.getCatId()))<br>               .map(categoryEntity -&gt; &#123;<br>                   categoryEntity.setChildren(getchilren(categoryEntity, categoryEntities));<br>                   <span class="hljs-keyword">return</span> categoryEntity;<br>               &#125;)<br>               .collect(Collectors.toList());<br>       <span class="hljs-keyword">return</span> collect;<br>   &#125;<br></code></pre></td></tr></table></figure><p>使用了递归的方法，先将所有的的<code>CategoryEntity</code>查出来，再设置<code>setChildren</code></p><p>tip：<code>CategoryEntity</code>的<code>children</code>属性是后来加的，需要加入<code>@TableFiled(exist = false)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(&quot;pms_attr_group&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AttrGroupEntity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br>    <span class="hljs-meta">@TableField(exist = false)</span><br>    <span class="hljs-keyword">private</span> Long[] catelogPath;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改分类父子关系以及顺序"><a href="#修改分类父子关系以及顺序" class="headerlink" title="修改分类父子关系以及顺序"></a>修改分类父子关系以及顺序</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013172412830.png" alt="image-20211013172412830"></p><p>请求参数 ：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>  &#123;<br>    <span class="hljs-attr">&quot;catId&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//菜单id</span><br>    <span class="hljs-attr">&quot;catLevel&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//菜单层级</span><br>    <span class="hljs-attr">&quot;parentCid&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//父菜单id</span><br>    <span class="hljs-attr">&quot;sort&quot;</span>: <span class="hljs-number">0</span> <span class="hljs-comment">//排序</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/update/sort&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">updateSort</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> CategoryEntity[] category)</span></span>&#123;<br>       categoryService.updateBatchById(Arrays.asList(category));<br>       <span class="hljs-keyword">return</span> R.ok();<br>   &#125;<br></code></pre></td></tr></table></figure><p>请求的JSON是数组，所以用<code>CategoryEntity[]</code>来接收，并使用<code>@RequestBody</code></p><p><code>updateBatchById</code>接收的是List集合，使用<code>Arrays.asList(category)</code>转化成List</p><h3 id="获取分类属性分组"><a href="#获取分类属性分组" class="headerlink" title="获取分类属性分组"></a>获取分类属性分组</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013172333231.png" alt="image-20211013172333231"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">listByCatelogId</span><span class="hljs-params">(Map&lt;String, Object&gt; params, Long catelogId)</span> </span>&#123;<br>      String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br>      <span class="hljs-comment">//select * from pms_attr_group where catelog_id=? and (attr_group_id=key or attr_group_name like %key%)</span><br>      QueryWrapper&lt;AttrGroupEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;AttrGroupEntity&gt;();<br>      <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(key)) &#123;<br>          wrapper.and((obj) -&gt; &#123;<br>              obj.eq(<span class="hljs-string">&quot;attr_group_id&quot;</span>, key).or().like(<span class="hljs-string">&quot;attr_group_name&quot;</span>, key);<br>          &#125;);<br>      &#125;<br><br>      <span class="hljs-keyword">if</span> (catelogId == <span class="hljs-number">0</span>) &#123;<br>          IPage&lt;AttrGroupEntity&gt; page = <span class="hljs-keyword">this</span>.page(<span class="hljs-keyword">new</span> Query&lt;AttrGroupEntity&gt;().getPage(params),<br>                  wrapper);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageUtils(page);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>          wrapper.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>, catelogId);<br>          IPage&lt;AttrGroupEntity&gt; page = <span class="hljs-keyword">this</span>.page(<span class="hljs-keyword">new</span> Query&lt;AttrGroupEntity&gt;().getPage(params),<br>                  wrapper);<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PageUtils(page);<br>      &#125;<br></code></pre></td></tr></table></figure><p><code>IPage&lt;AttrGroupEntity&gt; page = this.page(new Query&lt;AttrGroupEntity&gt;().getPage(params),wrapper)</code></p><p><code>this.page()</code>MyBatisPlus提供的分页查询的方法，需要传入分页对象，和查询条件<code>wrapper</code></p><p><code>Query&lt;AttrGroupEntity&gt;()</code>是人人开源定义的查询对象，该对象包含了分页对象，和分页信息</p><h3 id="获取属性分组详情"><a href="#获取属性分组详情" class="headerlink" title="获取属性分组详情"></a>获取属性分组详情</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013173654281.png" alt="image-20211013173654281"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/info/&#123;attrGroupId&#125;&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">info</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;attrGroupId&quot;)</span> Long attrGroupId)</span> </span>&#123;<br>       AttrGroupEntity attrGroup = attrGroupService.getById(attrGroupId);<br>       <span class="hljs-keyword">return</span> R.ok().put(<span class="hljs-string">&quot;attrGroup&quot;</span>, attrGroup);<br>   &#125;<br></code></pre></td></tr></table></figure><p><code>attrGroupService.getById(attrGroupId)</code>MyBatisPlus提供的基本方法</p><h3 id="获取分类规格参数"><a href="#获取分类规格参数" class="headerlink" title="获取分类规格参数"></a>获取分类规格参数</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013174457335.png" alt="image-20211013174457335"></p><p>响应数据是聚合了多个实体类的属性</p><p>可以先查出包含响应数据中最多的实体类<code>AttrEntity</code></p><p>在该实体类上增加属性，所以又需要创建一个vo</p><p>这个vo可以继承<code>AttrEntity</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">getBaseList</span><span class="hljs-params">(Long catelogId, Map&lt;String, Object&gt; params)</span> </span>&#123;<br>    <br>    <span class="hljs-comment">//查询了AttrEntity</span><br>    QueryWrapper&lt;AttrEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(key)) &#123;<br>        wrapper.and((wrapper1) -&gt; &#123;<br>            wrapper1.eq(<span class="hljs-string">&quot;attr_id&quot;</span>, key).or().like(<span class="hljs-string">&quot;attr_name&quot;</span>, key);<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (catelogId != <span class="hljs-number">0</span>) &#123;<br>        wrapper.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>, catelogId);<br>    &#125;<br>    IPage&lt;AttrEntity&gt; page = <span class="hljs-keyword">this</span>.page(<br>            <span class="hljs-keyword">new</span> Query&lt;AttrEntity&gt;().getPage(params),<br>            wrapper<br>    );<br>    PageUtils pageUtils = <span class="hljs-keyword">new</span> PageUtils(page);<br>    <br>    <br>    List&lt;AttrRespVo&gt; attrRespVos = page.getRecords().stream().map((attrEntity) -&gt; &#123;<br>        AttrRespVo attrRespVo = <span class="hljs-keyword">new</span> AttrRespVo();<br>        BeanUtils.copyProperties(attrEntity,attrRespVo);<br>        AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = <span class="hljs-keyword">null</span>;<br>        Long attrId = attrEntity.getAttrId();<br><br>        QueryWrapper&lt;AttrAttrgroupRelationEntity&gt; wrapper_1 = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>        wrapper_1.eq(<span class="hljs-string">&quot;attr_id&quot;</span>,attrId);<br>        <span class="hljs-keyword">if</span>(attrAttrgroupRelationService.count(wrapper_1)&gt;<span class="hljs-number">0</span>)&#123;<br>            attrAttrgroupRelationEntity = attrAttrgroupRelationService.getOne(wrapper_1);<br>            AttrGroupEntity attrGroupEntity = attrGroupService.getById(attrAttrgroupRelationEntity.getAttrGroupId());<br>           <span class="hljs-keyword">if</span>(attrGroupEntity!=<span class="hljs-keyword">null</span>)&#123;<br>               attrRespVo.setGroupName(attrGroupEntity.getAttrGroupName());<br>               attrRespVo.setAttrGroupId(attrGroupEntity.getAttrGroupId());<br>           &#125;<br>        &#125;<br><br>        Long catelogIdAttrEntity = attrEntity.getCatelogId();<br>        String cateLogName = categoryService.getById(catelogIdAttrEntity).getName();<br>        Long[] catelogPath = categoryService.getCatelogPath(catelogIdAttrEntity);<br>        attrRespVo.setCatelogName(cateLogName);<br>        attrRespVo.setCatelogPath(catelogPath);<br>        <span class="hljs-keyword">return</span> attrRespVo;<br>    &#125;).collect(Collectors.toList());<br><br>    pageUtils.setList(attrRespVos);<br>    <span class="hljs-keyword">return</span> pageUtils;<br>&#125;<br></code></pre></td></tr></table></figure><p>个人分析:这样的代码使得每次使用<code>attrEntity</code>都要查数据库，而且每次要查4次数据库，性能大幅降低!!!</p><h3 id="保存属性【规格参数，销售属性】"><a href="#保存属性【规格参数，销售属性】" class="headerlink" title="保存属性【规格参数，销售属性】"></a>保存属性【规格参数，销售属性】</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013191141610.png" alt="image-20211013191141610"></p><p>由于数据库设计的时候，为了提升性能是没有外键的，而是设计了关联表</p><p>所以当需要添加数据时，不仅要添加原来表中的数据，还要添加关联表中的数据</p><p>同理，当需要删除某一项数据的时候，两个表都要删除</p><h3 id="查询属性详情"><a href="#查询属性详情" class="headerlink" title="查询属性详情"></a>查询属性详情</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013191506993.png" alt="image-20211013191506993"></p><p>属性查询很简单，但是<code>catelogPath</code>稍微用到了递归，这里提一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br> <span class="hljs-keyword">public</span> Long[] getCatelogPath(Long catelogId) &#123;<br>     ArrayList&lt;Long&gt; path = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>     List&lt;Long&gt; catelogPath = findCatelogPath(catelogId, path);<br>     Collections.reverse(catelogPath);<br>     <span class="hljs-keyword">return</span> catelogPath.toArray(<span class="hljs-keyword">new</span> Long[catelogPath.size()]);<br> &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> List&lt;Long&gt; <span class="hljs-title">findCatelogPath</span><span class="hljs-params">(Long catelogId, ArrayList&lt;Long&gt; path)</span> </span>&#123;<br>     CategoryEntity categoryEntity = <span class="hljs-keyword">this</span>.getById(catelogId);<br>     <span class="hljs-keyword">if</span>(categoryEntity==<span class="hljs-keyword">null</span>)&#123;<br>         <span class="hljs-keyword">return</span> path;<br>     &#125;<br>     Long parentCid = categoryEntity.getParentCid();<br>     path.add(catelogId);<br>     <span class="hljs-keyword">if</span>(parentCid!=<span class="hljs-number">0</span>)&#123;<br>         findCatelogPath(parentCid,path);<br>     &#125;<br>     <span class="hljs-keyword">return</span> path;<br> &#125;<br></code></pre></td></tr></table></figure><p>这个递归妙在，递归方法中的path</p><p>path相当于接受id的容器，已经创建好了，如果每次在递归中创建一个，则造成内存浪费！</p><p><code>catelogPath.toArray(new Long[catelogPath.size()]);</code>List转化成ArrayList</p><h3 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013192853475.png" alt="image-20211013192853475"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateMore</span><span class="hljs-params">(AttrVo attr)</span> </span>&#123;<br>    AttrEntity attrEntity = <span class="hljs-keyword">new</span> AttrEntity();<br><br>    BeanUtils.copyProperties(attr,attrEntity);<br>    <span class="hljs-keyword">this</span>.updateById(attrEntity);<br><br>    AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = attrAttrgroupRelationService.getOne<br>            (<span class="hljs-keyword">new</span> QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(<span class="hljs-string">&quot;attr_id&quot;</span>, attr.getAttrId()));<br>    BeanUtils.copyProperties(attr,attrAttrgroupRelationEntity);<br><br>    attrAttrgroupRelationService.updateById(attrAttrgroupRelationEntity);<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个方法中，修改了两次数据库中的表时，会产生事务</p><p>需要加上<code>@Transactional</code></p><h3 id="获取分类销售属性"><a href="#获取分类销售属性" class="headerlink" title="获取分类销售属性"></a>获取分类销售属性</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013193156656.png" alt="image-20211013193156656"></p><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013193206892.png" alt="image-20211013193206892"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">getSaleList</span><span class="hljs-params">(Long catelogId, Map&lt;String,Object&gt; params)</span> </span>&#123;<br><br>      <span class="hljs-comment">//查询到AttrEntity，并封装成page    AttrEntit储存信息</span><br>      QueryWrapper&lt;AttrEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>      String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br>      <span class="hljs-keyword">if</span>(catelogId==<span class="hljs-number">0</span>)&#123;<br>          wrapper.and(wrapperTemp-&gt;wrapperTemp.eq(<span class="hljs-string">&quot;attr_type&quot;</span>,<span class="hljs-number">0</span>));<br><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>          wrapper.and(wrapperTemp-&gt;wrapperTemp.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>,catelogId).eq(<span class="hljs-string">&quot;attr_type&quot;</span>,<span class="hljs-number">0</span>));<br>      &#125;<br>      <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(key))&#123;<br>          wrapper.like(<span class="hljs-string">&quot;attr_name&quot;</span>,key);<br>      &#125;<br>      IPage&lt;AttrEntity&gt; page = <span class="hljs-keyword">this</span>.page(<span class="hljs-keyword">new</span> Query&lt;AttrEntity&gt;().getPage(params), wrapper);<br>      PageUtils pageUtils = <span class="hljs-keyword">new</span> PageUtils(page);<br><br>      <span class="hljs-comment">//在page基础上增加其他属性   AttrSaleListVo作为储存信息的容器</span><br>      List&lt;AttrSaleListVo&gt; attrSaleListVos = page.getRecords().stream().map(attrEntity -&gt; &#123;<br>          AttrSaleListVo attrSaleListVo = <span class="hljs-keyword">new</span> AttrSaleListVo();<br>          AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = attrAttrgroupRelationService.<br>                  getOne(<span class="hljs-keyword">new</span> QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(<span class="hljs-string">&quot;attr_id&quot;</span>, attrEntity.getAttrId()));<br>          <span class="hljs-keyword">if</span>(attrAttrgroupRelationEntity!=<span class="hljs-keyword">null</span>)&#123;<br>              Long attrGroupId = attrAttrgroupRelationEntity.getAttrGroupId();<br>              AttrGroupEntity attrGroupEntity = attrGroupDao.selectById(attrGroupId);<br>              String attrGroupName=<span class="hljs-string">&quot;&quot;</span>;<br>              <span class="hljs-keyword">if</span>(attrGroupEntity!=<span class="hljs-keyword">null</span>)&#123; attrGroupName = attrGroupEntity.getAttrGroupName();&#125;<br>              String catelofName = categoryDao.selectById(attrEntity.getCatelogId()).getName();<br>              attrSaleListVo.setCatelogName(catelofName);<br>              attrSaleListVo.setGroupName(attrGroupName);<br>          &#125;<br>              BeanUtils.copyProperties(attrEntity,attrSaleListVo);<br>              <span class="hljs-keyword">return</span> attrSaleListVo;<br>      &#125;).collect(Collectors.toList());<br>      pageUtils.setList(attrSaleListVos);<br>      <span class="hljs-keyword">return</span> pageUtils;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="获取属性分组的关联的所有属性"><a href="#获取属性分组的关联的所有属性" class="headerlink" title="获取属性分组的关联的所有属性"></a>获取属性分组的关联的所有属性</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013193428276.png" alt="image-20211013193428276"></p><p>这个查询涉及到多表的查询，简单</p><p>经验总结：</p><p>返回值<code>List&lt;AttrEntity&gt;</code>：</p><p>首先看data的JASON类型是数组，所以用List，其次数组中是对象，所以<code>List&lt;AttrEntity&gt;</code></p><h3 id="添加属性与分组关联关系"><a href="#添加属性与分组关联关系" class="headerlink" title="添加属性与分组关联关系"></a>添加属性与分组关联关系</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013194257798.png" alt="image-20211013194257798"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json">[&#123;<br>  <span class="hljs-attr">&quot;attrGroupId&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//分组id</span><br>  <span class="hljs-attr">&quot;attrId&quot;</span>: <span class="hljs-number">0</span>, <span class="hljs-comment">//属性id</span><br>&#125;]<br></code></pre></td></tr></table></figure><p>请求参数是一个数组，数组里面是对象，所以使用<code>Object[]</code>来接受</p><p>使用数组的请求参数，可以批量操作</p><p>SpringBoot会自动完成映射</p><h3 id="删除属性与分组的关联关系"><a href="#删除属性与分组的关联关系" class="headerlink" title="删除属性与分组的关联关系"></a>删除属性与分组的关联关系</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013195631342.png" alt="image-20211013195631342"></p><h3 id="获取属性分组没有关联的其他属性-1"><a href="#获取属性分组没有关联的其他属性-1" class="headerlink" title="获取属性分组没有关联的其他属性"></a>获取属性分组没有关联的其他属性</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013195843293.png" alt="image-20211013195843293"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PageUtils <span class="hljs-title">getNoAttrAndGroup</span><span class="hljs-params">(Long attrgroupId,Map&lt;String,Object&gt; params)</span> </span>&#123;<br>    AttrGroupEntity attrGroupEntity = <span class="hljs-keyword">this</span>.getById(attrgroupId);<br>    Long catelogId = attrGroupEntity.getCatelogId();<br><br>    QueryWrapper&lt;AttrEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    String key = (String) params.get(<span class="hljs-string">&quot;key&quot;</span>);<br><br>    wrapper.and(wrapperTemp-&gt;wrapperTemp.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>,catelogId));<br>    <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(key))&#123;<br>        wrapper.like(<span class="hljs-string">&quot;attr_name&quot;</span>,key);<br>    &#125;<br>    IPage&lt;AttrEntity&gt; page = attrService.page(<span class="hljs-keyword">new</span> Query&lt;AttrEntity&gt;().getPage(params), wrapper);<br>    PageUtils pageUtils = <span class="hljs-keyword">new</span> PageUtils(page);    <span class="hljs-comment">//至此，查询到了所有属性分组对应的所有属性（关联的和未关联）</span><br><br>    <span class="hljs-comment">//剔除关联的</span><br>    List&lt;AttrEntity&gt; Nolist = page.getRecords().stream().map(attrEntity -&gt; &#123;<br>        AttrAttrgroupRelationEntity attrAttrgroupRelationEntity = attrAttrgroupRelationService.<br>                getOne(<span class="hljs-keyword">new</span> QueryWrapper&lt;AttrAttrgroupRelationEntity&gt;().eq(<span class="hljs-string">&quot;attr_id&quot;</span>, attrEntity.getAttrId()));<br>        <span class="hljs-keyword">if</span>(attrAttrgroupRelationEntity==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> attrEntity;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;).collect(Collectors.toList());<br>    Nolist.removeAll(Collections.singleton(<span class="hljs-keyword">null</span>));<br>    pageUtils.setList(Nolist);<br>    <span class="hljs-keyword">return</span> pageUtils;<br></code></pre></td></tr></table></figure><h3 id="获取分类关联的品牌"><a href="#获取分类关联的品牌" class="headerlink" title="获取分类关联的品牌"></a>获取分类关联的品牌</h3><h3 id="获取品牌关联的分类"><a href="#获取品牌关联的分类" class="headerlink" title="获取品牌关联的分类"></a>获取品牌关联的分类</h3><h3 id="获取品牌关联的分类-1"><a href="#获取品牌关联的分类-1" class="headerlink" title="获取品牌关联的分类"></a>获取品牌关联的分类</h3><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211013201127044.png" alt="image-20211013201127044"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;AttrGroupWithAttrsVo&gt; <span class="hljs-title">getAttrGroupWithAttrsVo</span><span class="hljs-params">(Long catelogId)</span> </span>&#123;<br>       <span class="hljs-comment">//查Grpoup 多个</span><br>       QueryWrapper&lt;AttrGroupEntity&gt; wrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>       wrapper.eq(<span class="hljs-string">&quot;catelog_id&quot;</span>,catelogId);<br>       List&lt;AttrGroupEntity&gt; attrGroupEntities = baseMapper.selectList(wrapper);<br><br>       <span class="hljs-comment">//查attr  一个组有多个</span><br>       List&lt;AttrGroupWithAttrsVo&gt; collect = attrGroupEntities.stream().map((item) -&gt; &#123;<br>           AttrGroupWithAttrsVo attrGroupWithAttrsVo = <span class="hljs-keyword">new</span> AttrGroupWithAttrsVo();<br><br>           <span class="hljs-comment">//查询某一属性分组下的所有attr</span><br>           Long attrGroupId = item.getAttrGroupId();<br>           QueryWrapper&lt;AttrAttrgroupRelationEntity&gt; wrapper_1 = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>           wrapper_1.eq(<span class="hljs-string">&quot;attr_group_id&quot;</span>,attrGroupId);<br><br>           <span class="hljs-comment">//由于新增属性分组的时候，所以没有添加到属性分组表</span><br>           <span class="hljs-keyword">if</span>(attrAttrgroupRelationService.count(wrapper_1)&gt;<span class="hljs-number">0</span>)&#123;<br>               List&lt;AttrAttrgroupRelationEntity&gt; attrgroupRelationEntities = attrAttrgroupRelationService.list(wrapper_1);<br><br>               List&lt;Long&gt; attrIds = attrgroupRelationEntities.stream().map((attrgroupRelationEntity) -&gt; &#123;<br>                   <span class="hljs-keyword">return</span> attrgroupRelationEntity.getAttrId();<br>               &#125;).collect(Collectors.toList());<br><br>               System.out.println(attrIds);<br><br>               List&lt;AttrEntity&gt; attrEntities = attrService.listByIds(attrIds);<br>               attrGroupWithAttrsVo.setAttrs(attrEntities);<br>           &#125;<br>         <br>           BeanUtils.copyProperties(item,attrGroupWithAttrsVo);<br>           <span class="hljs-keyword">return</span> attrGroupWithAttrsVo;<br>       &#125;).collect(Collectors.toList());<br>       <span class="hljs-keyword">return</span> collect;<br>   &#125;<br><br></code></pre></td></tr></table></figure><h1 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h1><h2 id="P103-127-elasticSearch"><a href="#P103-127-elasticSearch" class="headerlink" title="P103-127 elasticSearch"></a>P103-127 elasticSearch</h2><h3 id="安装ES"><a href="#安装ES" class="headerlink" title="安装ES"></a>安装ES</h3><h4 id="下载镜像文件"><a href="#下载镜像文件" class="headerlink" title="下载镜像文件"></a>下载镜像文件</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull elasticsearch:<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span> 存储和检索数据 <br><span class="hljs-attribute">docker</span> pull kibana:<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span> 可视化检索数据<br></code></pre></td></tr></table></figure><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><h5 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h5><ul><li><p>创建了文件夹挂载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/mydata/</span>elasticsearch/config <br>mkdir -p <span class="hljs-regexp">/mydata/</span>elasticsearch/data <br>echo <span class="hljs-string">&quot;http.host: 0.0.0.0&quot;</span> &gt;&gt; <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml<br></code></pre></td></tr></table></figure></li><li><p>修改权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod -R <span class="hljs-number">777</span> <span class="hljs-regexp">/mydata/</span>elasticsearch/ 保证权限<br></code></pre></td></tr></table></figure><p>这里是把文件的更改读写权限，如果不更改会出现错误</p><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211014102358872.png" alt="image-20211014102358872"></p><p><img src="/2021/10/05/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B01/image-20211014102434112.png" alt="权限未修改导致错误"></p></li><li><p>安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run --name elasticsearch -p <span class="hljs-number">9200</span>:<span class="hljs-number">9200</span> -p <span class="hljs-number">9300</span>:<span class="hljs-number">9300</span> \ -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \<br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> \ <br>-v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/config/</span>elasticsearch.yml:<span class="hljs-regexp">/usr/</span>share<span class="hljs-regexp">/elasticsearch/</span>config/elasticsearch.yml \ <br>-v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/data:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/data \ <br>-v <span class="hljs-regexp">/mydata/</span>elasticsearch<span class="hljs-regexp">/plugins:/u</span>sr<span class="hljs-regexp">/share/</span>elasticsearch/plugins \ <br>-d elasticsearch:<span class="hljs-number">7.4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a>Kibana</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run --name kibana -e ELASTICSEARCH_HOSTS=http://<span class="hljs-number">101.34.143.34:9200</span> -p <span class="hljs-number">5601</span>:<span class="hljs-number">5601</span> -d kibana:<span class="hljs-number">7</span>.<span class="hljs-number">4</span>.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker ps -a<br>docker rm xxxx  <span class="hljs-regexp">//</span>移除容器<br>docker stop  xxx <span class="hljs-regexp">//</span>停止<br>docker exec -it <span class="hljs-number">6</span>d659c133398 <span class="hljs-regexp">/bin/</span>bash    进入到容器中<br>docker restart elasticsearch<br>docker container cp nginx:<span class="hljs-regexp">/etc/</span>nginx .  在含nginx文件夹的目录下拷贝容器中的文件<br><br><br>onzip  xxxx.zip 解压文件夹<br></code></pre></td></tr></table></figure><h3 id="P126测试保存"><a href="#P126测试保存" class="headerlink" title="P126测试保存"></a>P126测试保存</h3><ul><li><p>配置RequestOption（单例模式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> RequestOptions COMMON_OPTIONS;<br>    <span class="hljs-keyword">static</span> &#123;<br>        RequestOptions.Builder builder = RequestOptions.DEFAULT.toBuilder();<br>        <span class="hljs-comment">// builder.addHeader(&quot;Authorization&quot;, &quot;Bearer &quot; + TOKEN);</span><br>        <span class="hljs-comment">// builder.setHttpAsyncResponseConsumerFactory(</span><br>        <span class="hljs-comment">//         new HttpAsyncResponseConsumerFactory</span><br>        <span class="hljs-comment">//                 .HeapBufferedResponseConsumerFactory(30 * 1024 * 1024 * 1024));</span><br>        COMMON_OPTIONS = builder.build();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">indexData</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br><br>        IndexRequest indexRequest = <span class="hljs-keyword">new</span> IndexRequest(<span class="hljs-string">&quot;users&quot;</span>);<br>        indexRequest.id(<span class="hljs-string">&quot;1&quot;</span>);   <span class="hljs-comment">//数据的id</span><br><br>        <span class="hljs-comment">// indexRequest.source(&quot;userName&quot;,&quot;zhangsan&quot;,&quot;age&quot;,18,&quot;gender&quot;,&quot;男&quot;);</span><br><br>        User user = <span class="hljs-keyword">new</span> User();<br>        user.setUserName(<span class="hljs-string">&quot;zhangsan&quot;</span>);<br>        user.setAge(<span class="hljs-number">18</span>);<br>        user.setGender(<span class="hljs-string">&quot;男&quot;</span>);<br><br>        String jsonString = JSON.toJSONString(user);<br>        indexRequest.source(jsonString, XContentType.JSON);  <span class="hljs-comment">//要保存的内容</span><br><br>        <span class="hljs-comment">//执行操作</span><br>        IndexResponse index = client.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS);<br><br>        <span class="hljs-comment">//提取有用的响应数据</span><br>        System.out.println(index);<br><br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="p127-复制查询"><a href="#p127-复制查询" class="headerlink" title="p127 复制查询"></a>p127 复制查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">searchState</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>      <span class="hljs-comment">//1. 创建检索请求</span><br>      SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> SearchSourceBuilder();<br>      <span class="hljs-comment">//        sourceBuilder.query(QueryBuilders.termQuery(&quot;city&quot;, &quot;Nicholson&quot;));</span><br>      <span class="hljs-comment">//        sourceBuilder.from(0);</span><br>      <span class="hljs-comment">//        sourceBuilder.size(5);</span><br>      <span class="hljs-comment">//        sourceBuilder.timeout(new TimeValue(60, TimeUnit.SECONDS));</span><br>      QueryBuilder matchQueryBuilder = QueryBuilders.matchQuery(<span class="hljs-string">&quot;state&quot;</span>, <span class="hljs-string">&quot;AK&quot;</span>);<br>      <span class="hljs-comment">//                .fuzziness(Fuzziness.AUTO)</span><br>      <span class="hljs-comment">//                .prefixLength(3)</span><br>      <span class="hljs-comment">//                .maxExpansions(10);</span><br>      sourceBuilder.query(matchQueryBuilder);<br>      SearchRequest searchRequest = <span class="hljs-keyword">new</span> SearchRequest();<br>      searchRequest.indices(<span class="hljs-string">&quot;bank&quot;</span>);<br>      searchRequest.source(sourceBuilder);<br>      <span class="hljs-comment">//2. 执行检索</span><br>      SearchResponse searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);<br>      System.out.println(searchResponse);<br><br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="P128-140商城业务"><a href="#P128-140商城业务" class="headerlink" title="P128-140商城业务"></a>P128-140商城业务</h1><h3 id="上架"><a href="#上架" class="headerlink" title="上架"></a>上架</h3><h4 id="创建SkuEs模型"><a href="#创建SkuEs模型" class="headerlink" title="创建SkuEs模型"></a>创建SkuEs模型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SkuEsModel</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Long skuId;<br><br>    <span class="hljs-keyword">private</span> Long spuId;<br><br>    <span class="hljs-keyword">private</span> String skuTitle;<br><br>    <span class="hljs-keyword">private</span> BigDecimal skuPrice;<br><br>    <span class="hljs-keyword">private</span> String skuImg;<br><br>    <span class="hljs-keyword">private</span> Long saleCount;<br><br>    <span class="hljs-keyword">private</span> Boolean hasStock;<br><br>    <span class="hljs-keyword">private</span> Long hotScore;<br><br>    <span class="hljs-keyword">private</span> Long brandId;<br><br>    <span class="hljs-keyword">private</span> Long catalogId;<br><br>    <span class="hljs-keyword">private</span> String brandName;<br><br>    <span class="hljs-keyword">private</span> String brandImg;<br><br>    <span class="hljs-keyword">private</span> String catalogName;<br><br>    <span class="hljs-keyword">private</span> List&lt;Attrs&gt; attrs;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Attrs</span> </span>&#123;<br><br>        <span class="hljs-keyword">private</span> Long attrId;<br><br>        <span class="hljs-keyword">private</span> String attrName;<br><br>        <span class="hljs-keyword">private</span> String attrValue;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="创建上架方服务"><a href="#创建上架方服务" class="headerlink" title="创建上架方服务"></a>创建上架方服务</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(value = &quot;/&#123;spuId&#125;/up&quot;)</span><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">spuUp</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;spuId&quot;)</span> Long spuId)</span> </span>&#123;<br><br>       spuInfoService.up(spuId);<br><br>       <span class="hljs-keyword">return</span> R.ok();<br>   &#125;<br></code></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">up</span><span class="hljs-params">(Long spuId)</span> </span>&#123;<br>        List&lt;SkuInfoEntity&gt; skus = skuInfoService.getSkusBySpuId(spuId);<br><br>        <span class="hljs-comment">//1、查出当前spuId对应的所有sku信息,品牌的名字</span><br>        List&lt;SkuInfoEntity&gt; skuInfoEntities = skuInfoService.getSkusBySpuId(spuId);<br><br>        <span class="hljs-comment">//TODO 4、查出当前sku的所有可以被用来检索的规格属性</span><br>        List&lt;ProductAttrValueEntity&gt; baseAttrs = productAttrValueService.baseAttrListforspu(spuId);<br>        List&lt;Long&gt; attrIds = baseAttrs.stream().map(attr -&gt; &#123;<br>            <span class="hljs-keyword">return</span> attr.getAttrId();<br>        &#125;).collect(Collectors.toList());<br><br>        List&lt;Long&gt; searchAttrIds = attrService.selectSearchAttrs(attrIds);<br>        Set&lt;Long&gt; idSet = searchAttrIds.stream().collect(Collectors.toSet());<br><br>        List&lt;SkuEsModel.Attrs&gt; attrsList = baseAttrs.stream().filter(item -&gt; &#123;<br>            <span class="hljs-keyword">return</span> idSet.contains(item.getAttrId());<br>        &#125;).map(item -&gt; &#123;<br>            SkuEsModel.Attrs attrs = <span class="hljs-keyword">new</span> SkuEsModel.Attrs();<br>            BeanUtils.copyProperties(item, attrs);<br>            <span class="hljs-keyword">return</span> attrs;<br>        &#125;).collect(Collectors.toList());<br><br>        List&lt;Long&gt; skuIdList = skuInfoEntities.stream()<br>                .map(SkuInfoEntity::getSkuId)<br>                .collect(Collectors.toList());<br><br>        <span class="hljs-comment">//TODO 1、发送远程调用，库存系统查询是否有库存</span><br>        Map&lt;Long, Boolean&gt; stockMap = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            R skuHasStock = wareFeignService.getSkuHasStock(skuIdList);<br>            <span class="hljs-comment">//</span><br>            TypeReference&lt;List&lt;SkuHasStockVo&gt;&gt; typeReference = <span class="hljs-keyword">new</span> TypeReference&lt;List&lt;SkuHasStockVo&gt;&gt;() &#123;&#125;;<br>            stockMap = skuHasStock.getData(typeReference).stream()<br>                    .collect(Collectors.toMap(SkuHasStockVo::getSkuId, item -&gt; item.getHasStock()));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            log.error(<span class="hljs-string">&quot;库存服务查询异常：原因&#123;&#125;&quot;</span>,e);<br>        &#125;<br><br>        <span class="hljs-comment">//2、封装每个sku的信息</span><br>        Map&lt;Long, Boolean&gt; finalStockMap = stockMap;<br>        List&lt;SkuEsModel&gt; collect = skuInfoEntities.stream().map(sku -&gt; &#123;<br>            <span class="hljs-comment">//组装需要的数据</span><br>            SkuEsModel esModel = <span class="hljs-keyword">new</span> SkuEsModel();<br>            esModel.setSkuPrice(sku.getPrice());<br>            esModel.setSkuImg(sku.getSkuDefaultImg());<br><br>            <span class="hljs-comment">//设置库存信息</span><br>            <span class="hljs-keyword">if</span> (finalStockMap == <span class="hljs-keyword">null</span>) &#123;<br>                esModel.setHasStock(<span class="hljs-keyword">true</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                esModel.setHasStock(finalStockMap.get(sku.getSkuId()));<br>            &#125;<br><br>            <span class="hljs-comment">//TODO 2、热度评分。0</span><br>            esModel.setHotScore(<span class="hljs-number">0L</span>);<br><br>            <span class="hljs-comment">//TODO 3、查询品牌和分类的名字信息</span><br>            BrandEntity brandEntity = brandService.getById(sku.getBrandId());<br>            esModel.setBrandName(brandEntity.getName());<br>            esModel.setBrandId(brandEntity.getBrandId());<br>            esModel.setBrandImg(brandEntity.getLogo());<br><br>            CategoryEntity categoryEntity = categoryService.getById(sku.getCatalogId());<br>            esModel.setCatalogId(categoryEntity.getCatId());<br>            esModel.setCatalogName(categoryEntity.getName());<br><br>            <span class="hljs-comment">//设置检索属性</span><br>            esModel.setAttrs(attrsList);<br><br>            BeanUtils.copyProperties(sku,esModel);<br><br>            <span class="hljs-keyword">return</span> esModel;<br>        &#125;).collect(Collectors.toList());<br><br>        <span class="hljs-comment">//TODO 5、将数据发给es进行保存：gulimall-search</span><br>        R r = searchFeignService.productStatusUp(collect);<br><br>        <span class="hljs-keyword">if</span> (r.getCode() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//远程调用成功</span><br>            <span class="hljs-comment">//TODO 6、修改当前spu的状态</span><br>            <span class="hljs-keyword">this</span>.baseMapper.updaSpuStatus(spuId, ProductConstant.ProductStatusEnum.SPU_UP.getCode());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//远程调用失败</span><br>            <span class="hljs-comment">//TODO 7、重复调用？接口幂等性:重试机制</span><br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="P136"><a href="#P136" class="headerlink" title="P136"></a>P136</h3><h3 id="P142"><a href="#P142" class="headerlink" title="P142"></a>P142</h3><h3 id="P154"><a href="#P154" class="headerlink" title="P154"></a>P154</h3><p>Lettuce在高并发场景下遇见的问题以及解决办法（ io.netty.util.internal.OutOfDirectMemoryError）</p><p><a href="https://blog.csdn.net/qq_45988496/article/details/115406318?utm_term=lettuce%E5%AF%BC%E8%87%B4%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-1-115406318&spm=3001.4430">博客地址</a></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatis面试</title>
    <link href="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="MyBatis是什么"><a href="#MyBatis是什么" class="headerlink" title="MyBatis是什么"></a>MyBatis是什么</h3><ul><li><p>MyBatis是半ORM框架，能够通关简单的XML或注解完成配置和映射原生信息，将pojo对象（plain old java object）映射成数据库的记录</p></li><li><p>内部封装JDBC，开发时只需要关注sql语句本身，不需要花费精力加载驱动，创建连接，创建statement。</p></li></ul><h3 id="优点和缺点"><a href="#优点和缺点" class="headerlink" title="优点和缺点"></a>优点和缺点</h3><p>优点</p><ul><li>内部封装JDBC，减少了大量的冗余代码，程序员只需关注编写sql语句。</li><li>基于sql语句编程，将程序代码和sql分离，降低耦合度，方便统一管理sql</li><li>很好的与各种数据库兼容</li></ul><p>缺点</p><ul><li>数据库移植性差</li><li>SQL语句编写工作量大（MyBatisPlus可以解决大部分基本的sql语句）</li></ul><h3 id="MyBatis与和Hibernate的区别"><a href="#MyBatis与和Hibernate的区别" class="headerlink" title="MyBatis与和Hibernate的区别"></a>MyBatis与和Hibernate的区别</h3><p>相同</p><ul><li>都是持久层框架，都对JDBC进行了封装</li></ul><p>不同</p><ul><li>MyBatis半自动ORM框架，Hibernate是全自动框架，对sql语句进行了封装，不需要手动编写sql</li><li>当代码开发量大时 ，MyBatis性能更好</li></ul><h3 id="MyBatis编程步骤"><a href="#MyBatis编程步骤" class="headerlink" title="MyBatis编程步骤"></a>MyBatis编程步骤</h3><p>创建xml全局配置文件，再将xml文件以流的形式读取，从而创建出SqlSessionFactory,通过<strong>sqlSession</strong>就可以获取<strong>sqlSession</strong>，sqlSession就可以获取到Dao接口的代理类，使得接口和Mapper文件进行绑定，从而使用代理对象完成增删改查。</p><blockquote><p>Dao接口的名与Mapper文件中的namespace一致，标签中的id与Dao接口中的方法一致。</p><p>sqlSession也是非线程安全的。</p></blockquote><h3 id="MyBatis工作原理"><a href="#MyBatis工作原理" class="headerlink" title="MyBatis工作原理"></a>MyBatis工作原理</h3><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211005095017810.png"></p><h3 id="和-的区别是什么？"><a href="#和-的区别是什么？" class="headerlink" title="#{}和${}的区别是什么？"></a>#{}和${}的区别是什么？</h3><p>1）#{}是预编译处理，$ {}是字符串替换。</p><p>2）mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；mybatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。</p><p>3）使用 #{} 可以有效的防止SQL注入，提高系统安全性。</p><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>创建xml全局配置文件，在将xml文件以流的形式读取，从而创建出SqlSessionFactory,通过<strong>sqlSession</strong>就可以获取<strong>sqlSession</strong>，sqlSession就可以获取到Dao接口的代理类，使得接口和xml文件进行绑定，从而使用代理对象完成增删改查。</p><p>Dao接口的名与Mapper文件中的namespace一致，标签中的id与Dao接口中的方法一致。</p><p>sqlSession也是非线程安全的。</p><h3 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h3><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027105623833.png" alt="image-20211027105623833"></p><ul><li><p><strong>properties属性</strong>，一般用resource与properties文件绑定</p></li><li><p><strong>settings</strong></p><ul><li><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027102948979.png" alt="image-20211027102948979"></li></ul></li><li><p><strong>typeAliases别名处理器</strong></p><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027105845010.png" alt="image-20211027105845010"></p></li><li><p><strong>typeHandlers类型处理器</strong></p></li><li><p><strong>environments环境</strong></p><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027110120780.png" alt="image-20211027110120780"></p></li></ul><h3 id="映射文件"><a href="#映射文件" class="headerlink" title="映射文件"></a>映射文件</h3><p>•cache –命名空间的二级缓存配置</p><p>•cache-ref – 其他命名空间缓存配置的引用。</p><p>•resultMap – 自定义结果集映射</p><p>•parameterMap – 已废弃！老式风格的参数映射</p><p>•sql –抽取可重用语句块。</p><p>•insert – 映射插入语句</p><p>•update – 映射更新语句</p><p>•delete – 映射删除语句</p><p>•select – 映射查询语句</p><h4 id="•insert-–-映射插入语句"><a href="#•insert-–-映射插入语句" class="headerlink" title="•insert – 映射插入语句"></a>•insert – 映射插入语句</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027150319542.png" alt="image-20211027150319542"></p><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027150339982.png" alt="image-20211027150339982"></p><h4 id="•select-–-映射查询语句"><a href="#•select-–-映射查询语句" class="headerlink" title="•select – 映射查询语句"></a>•select – 映射查询语句</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027151244392.png" alt="image-20211027151244392"></p><h5 id="联合查询"><a href="#联合查询" class="headerlink" title="联合查询"></a>联合查询</h5><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027151547132.png" alt="image-20211027151547132"></p><h5 id="分段查询"><a href="#分段查询" class="headerlink" title="分段查询"></a>分段查询</h5><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027151716639.png" alt="image-20211027151716639"></p><p> <strong>Association 在一对一,多对一时使用</strong></p><p> <strong>Collection 在一对多,多对多时使用</strong></p><p><strong>在association标签中 javaType属性指向的是****实体类的属性</strong></p><p><strong>在collection标签中 javaType属性指向的是****集合的类型</strong> <strong>ofType指向的是集合的泛型类型</strong> </p><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027154207337.png" alt="image-20211027154207337"></p><h3 id="动态sql"><a href="#动态sql" class="headerlink" title="动态sql"></a>动态sql</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027100331079.png" alt="image-20211027100331079"></p><h4 id="choose-when-otherwise"><a href="#choose-when-otherwise" class="headerlink" title="choose(when,otherwise)"></a>choose(when,otherwise)</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027100349026.png" alt="image-20211027100349026"></p><h4 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027100444851.png" alt="image-20211027100444851"></p><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027100302079.png" alt="image-20211027100302079"></p><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p><img src="/2021/10/05/MyBatis%E9%9D%A2%E8%AF%95/image-20211027100509134.png" alt="image-20211027100509134"></p><p>原理：OGNL</p><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>默认为一级缓存，作用域是sqlSession</p><p>二级缓存手动开启，二级缓存是在SqlSession关闭或提交后生效</p><ul><li>如果缓存的是POJO需要实现序列化接口</li><li>开启方法，全局配置开启缓存，在mapper文件中使用<cache></cache></li></ul><h4 id="Hibernate和MyBatis"><a href="#Hibernate和MyBatis" class="headerlink" title="Hibernate和MyBatis"></a>Hibernate和MyBatis</h4><h3 id="Dao-接⼝的⼯作原理是什么？"><a href="#Dao-接⼝的⼯作原理是什么？" class="headerlink" title="Dao 接⼝的⼯作原理是什么？"></a><strong>Dao</strong> <strong>接⼝的⼯作原理是什么？</strong></h3><p>Dao 接⼝的⼯作原理是 JDK 动态代理，Mybatis 运⾏时会使⽤ JDK 动态代理为 Dao 接⼝⽣成代</p><p>理 proxy 对象，代理对象 proxy 会拦截接⼝⽅法，转⽽执⾏ MappedStatement 所代表的 sql，然后</p><p>将 sql 执⾏结果返回。</p><h3 id="Mybatis-是如何进⾏分⻚的？分⻚插件的原理是什么？"><a href="#Mybatis-是如何进⾏分⻚的？分⻚插件的原理是什么？" class="headerlink" title="Mybatis 是如何进⾏分⻚的？分⻚插件的原理是什么？"></a>Mybatis 是如何进⾏分⻚的？分⻚插件的原理是什么？</h3><h3 id="有返回的Sql如何进行映射"><a href="#有返回的Sql如何进行映射" class="headerlink" title="有返回的Sql如何进行映射"></a>有返回的Sql如何进行映射</h3><ul><li><p>自动映射</p><p>只要列名和对象的属性名一样，自动完成映射，且不区分大小写</p><p>但是如果不一样，可以使用列的别名 例如user_name as name</p></li><li><p>resultMap</p><p>将返回的结果逐一的映射为对象的属性，还需要指定类型</p></li></ul><h3 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h3><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h3 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h3><h3 id="不同的-Xml-映射⽂件，id-是否可以重复？"><a href="#不同的-Xml-映射⽂件，id-是否可以重复？" class="headerlink" title="不同的 Xml 映射⽂件，id 是否可以重复？"></a>不同的 Xml 映射⽂件，id 是否可以重复？</h3><p>可以重复，前提是由namespace</p><h3 id="是否可以映射枚举类"><a href="#是否可以映射枚举类" class="headerlink" title="是否可以映射枚举类"></a>是否可以映射枚举类</h3><p>可以</p><h3 id="除了常⻅的-select-insert-updae-delete-标签之外，还有哪些标签？"><a href="#除了常⻅的-select-insert-updae-delete-标签之外，还有哪些标签？" class="headerlink" title="除了常⻅的 select|insert|updae|delete 标签之外，还有哪些标签？"></a>除了常⻅的 select|insert|updae|delete 标签之外，还有哪些标签？</h3><p><resultMap> 、 <parameterMap> 、 <sql> 、 <include> 、 <selectKey> ，加上动态 sql 的 9<br>个标签， trim|where|set|foreach|if|choose|when|otherwise|bind 等，其中为 sql ⽚段标签，通过<br><include> 标签引⼊ sql ⽚段， <selectKey> 为不⽀持⾃增的主键⽣成策略标签。</selectKey></include></selectKey></include></sql></parameterMap></resultMap></p><h3 id="如何分页"><a href="#如何分页" class="headerlink" title="如何分页"></a>如何分页</h3><p>分⻚插件的基本原理是使⽤ Mybatis 提供的插件接⼝，在插件的拦截⽅法内拦截待执⾏的 sql，然后重写 sql</p><p><strong>limit</strong></p><h3 id="Mybatis-的插件运⾏原理"><a href="#Mybatis-的插件运⾏原理" class="headerlink" title="Mybatis 的插件运⾏原理"></a><strong>Mybatis</strong> <strong>的插件运⾏原理</strong></h3><p>Mybatis 使⽤ JDK 的动态代理，为需要拦截的接⼝⽣成代理对象以实现接⼝⽅法拦截功能，每当执⾏这 4 种接⼝对象的⽅法时，就会进⼊拦截⽅法</p><h3 id="Mybatis-是否⽀持延迟加载？如果⽀持，它的实现原理是什么？"><a href="#Mybatis-是否⽀持延迟加载？如果⽀持，它的实现原理是什么？" class="headerlink" title="Mybatis 是否⽀持延迟加载？如果⽀持，它的实现原理是什么？"></a>Mybatis 是否⽀持延迟加载？如果⽀持，它的实现原理是什么？</h3><p>懒加载就相当于把关联查询分两次来做。</p><p>Mybatis 仅⽀持 association 关联对象和 collection 关联集合对象的延迟加载，</p><p>可以配置是否启⽤延迟加载 lazyLoadingEnabled=true|false</p><p>原理是，使⽤ CGLIB 创建⽬标对象的代理对象，当调⽤⽬标⽅法时，进⼊拦截器⽅法，⽐如调⽤ a.getB().getName() ，拦截器 invoke() ⽅法发现 a.getB() 是 null 值，那么就会单独发送事先保存好的查询关联 B 对象的 sql，把 B 查询上来，然后调⽤ a.setB(b)，于是 a 的对象 b 属性就有值了，接着完成 a.getB().getName() ⽅法的调⽤。</p><h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud面试总结</title>
    <link href="/2021/10/04/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/10/04/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是微服务架构"><a href="#什么是微服务架构" class="headerlink" title="什么是微服务架构"></a>什么是微服务架构</h3><p>微服务架构就是将单体的应用程序，按照业务逻辑分为多个应用程序，并且通过轻量级的机制进行通信。这些单体的应用可以是不同的语言，采用不同的数据库，以保证最低限度的集中式管理。</p><h3 id="什么是SpringCloud"><a href="#什么是SpringCloud" class="headerlink" title="什么是SpringCloud"></a>什么是SpringCloud</h3><p>SpringCloud就是一系列的框架集合。它把各个优秀成熟的框架组合起来，采用SpringBoot的风格进行再封装，屏蔽掉了复制的配置。</p><h3 id="SpringCloud的优缺点"><a href="#SpringCloud的优缺点" class="headerlink" title="SpringCloud的优缺点"></a>SpringCloud的优缺点</h3><p>优点</p><ul><li>各个微服务之间的耦合度低</li><li>开发人员可以并行开发各自的微服务，互不打扰</li><li>每个微服务可以使用不同的语言以及数据库</li><li>直接写后端的代码，不关注前端怎么开发，只需要暴露相应的接口</li></ul><p>缺点：</p><ul><li>各个微服务采用了不同的数据库，给运维人员带来了麻烦</li><li>微服务众多，部署麻烦</li><li>系统集成测试麻烦</li><li>性能的监测麻烦</li></ul><p>总的来说，优点大于缺点，SpringCloud是完善的分布式框架，很多企业开始使用。</p><h3 id="SpringCloud与SpringBoot的区别"><a href="#SpringCloud与SpringBoot的区别" class="headerlink" title="SpringCloud与SpringBoot的区别"></a>SpringCloud与SpringBoot的区别</h3><ul><li>从功能上说，SpringBoot专注于单个微服务的开发，而SpringCloud则是专注于各个微服务之间的整合通信与统一管理。</li><li>SpringCloud依赖于SpringBoot，SpringCloud必须依赖SpringBoot开发，而SpringBoot可以不依赖与SpringCloud完成项目的开发。</li></ul><h3 id="SpringCloud由什么组成"><a href="#SpringCloud由什么组成" class="headerlink" title="SpringCloud由什么组成"></a>SpringCloud由什么组成</h3><p>SpringCloud由各种微服务框架组成，各种框架有如下：</p><ul><li>服务的注册与发现：Eureka() Nacos Consul Zookeeper</li><li>网关：Gateway zuul</li><li>负载均衡：Ribbon Nacos</li><li>统一配置管理: Config</li><li>熔断器: Hystrix</li><li>服务接口调用：OpenFeign</li><li>信息总线：Bus</li><li>信息驱动：Stream</li><li>分布式请求链路跟踪：Sleuth</li><li>分布式任务管理:Seata</li><li>Spring Cloud Alibaba</li></ul><p><img src="/2021/10/04/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/image-20211004181337499.png" alt="Cloud升级"></p><h3 id="开发分布式微服务带来的问题"><a href="#开发分布式微服务带来的问题" class="headerlink" title="开发分布式微服务带来的问题"></a>开发分布式微服务带来的问题</h3><ul><li>由于分布式系统的复杂性，带来了一系列开销方面的问题：带宽为题、延迟开销、网络问题、安全问题</li><li>服务注册发现及调用的困难：由于微服务众多，需要有一个服务目录进行统一管理。</li><li>冗余</li><li>性能问题</li></ul><h3 id="服务注册与发现是什么，如何实现"><a href="#服务注册与发现是什么，如何实现" class="headerlink" title="服务注册与发现是什么，如何实现"></a>服务注册与发现是什么，如何实现</h3><h3 id="Eureka如何实现高可用"><a href="#Eureka如何实现高可用" class="headerlink" title="Eureka如何实现高可用"></a>Eureka如何实现高可用</h3><p>集群并相互注册</p><h3 id="Eureka的自我保护机制"><a href="#Eureka的自我保护机制" class="headerlink" title="Eureka的自我保护机制"></a>Eureka的自我保护机制</h3><p>Eureka Service在没有接受到某个微服务的心跳时，会启动保护机制，并不会立马删除它，等到网络故障恢复后，就会自动退出</p><h3 id="注册中心的比较"><a href="#注册中心的比较" class="headerlink" title="注册中心的比较"></a>注册中心的比较</h3><p>比较注册中心就是比较CAP,CAP理论的核心是：一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求,<strong>最多只能满足2个。</strong></p><p><img src="/2021/10/04/SpringCloud%E9%9D%A2%E8%AF%95%E9%A2%98/image-20211004175905591.png" alt="CAP原理"></p><p>一般都是讨论，AP和CP，CA是单点集群，与分布式微服务架构背道而驰。</p><ul><li>CP - 满足一致性，分区容忍必的系统，通常性能不是特别高。</li><li>AP - 满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。（example：秒杀）</li></ul>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot面试</title>
    <link href="/2021/10/03/SpringBoot%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/03/SpringBoot%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="SpringBoot的自动配置原理"><a href="#SpringBoot的自动配置原理" class="headerlink" title="SpringBoot的自动配置原理"></a>SpringBoot的自动配置原理</h3><p>SpringBoot启动的时候通过<code>@EnableAutoConfiguration</code>注解找到META-INF/spring.factories配置文件中所有的自动配置类，并对其进行加载，而这些自动配置类的类名都是以AutoConfiguration结尾来命名的，它实际上就是一个javaConfig形式的Spring容器配置类，它们都有一个<code>@EnableConfigurationPerperties</code>的注解，通过这个注解启动XXXProperties命名的类去加载全局配置中的属性，如server.port,而XXXProperties通过<code>@ConfigurationProperties</code>注解将全局配置文件中的属性与自己的属性进行绑定。</p><h3 id="SpringBoot-配置加载顺序"><a href="#SpringBoot-配置加载顺序" class="headerlink" title="SpringBoot 配置加载顺序?"></a>SpringBoot 配置加载顺序?</h3><ol><li> properties文件</li><li>YAML文件</li><li>系统环境变量</li><li>命令行参数</li></ol><h3 id="SpringBoot如何解决跨域问题"><a href="#SpringBoot如何解决跨域问题" class="headerlink" title="SpringBoot如何解决跨域问题"></a>SpringBoot如何解决跨域问题</h3><ul><li><p>跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是 浏览器对javascript施加的安全限制。 </p></li><li><p>同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；</p></li></ul><p>跨域可以在前端通过 JSONP 来解决，但是 JSONP 只可以发送 GET 请求，无法发送其他类型的请求，在 RESTful 风格的应用中，就显得非常鸡肋，因此我们推荐在后端通过 （CORS，Cross-origin resource sharing  跨源资源共享） 来解决跨域问题。</p><p>这种解决方案并非 SpringBoot 特有的，在传统的 SSM 框架中，就可以通过 CORS 来解决跨域问题，只不过之前我们是在 XML 文件中配置 CORS ，现在可以通过实现WebMvcConfigurer接口然后重写addCorsMappings方法解决跨域问题。</p><h4 id="WebMvcConfigurer"><a href="#WebMvcConfigurer" class="headerlink" title="WebMvcConfigurer"></a>WebMvcConfigurer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CorsConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">WebMvcConfigurer</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addCorsMappings</span><span class="hljs-params">(CorsRegistry registry)</span> </span>&#123;<br>    registry.addMapping(<span class="hljs-string">&quot;/**&quot;</span>)<br>            .allowedOrigins(<span class="hljs-string">&quot;*&quot;</span>)<br>            .allowCredentials(<span class="hljs-keyword">true</span>)<br>            .allowedMethods(<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;PUT&quot;</span>, <span class="hljs-string">&quot;DELETE&quot;</span>, <span class="hljs-string">&quot;OPTIONS&quot;</span>)<br>            .maxAge(<span class="hljs-number">3600</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GulimallCorsConfiguration</span> </span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title">corsWebFilter</span><span class="hljs-params">()</span></span>&#123;<br>        UrlBasedCorsConfigurationSource source = <span class="hljs-keyword">new</span> UrlBasedCorsConfigurationSource();<br><br>        CorsConfiguration corsConfiguration = <span class="hljs-keyword">new</span> CorsConfiguration();<br><br>        <span class="hljs-comment">//1、配置跨域</span><br>        corsConfiguration.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>        corsConfiguration.setAllowCredentials(<span class="hljs-keyword">true</span>);<br><br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>,corsConfiguration);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> CorsWebFilter(source);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="什么是SpringBoor-Stater"><a href="#什么是SpringBoor-Stater" class="headerlink" title="什么是SpringBoor Stater"></a>什么是SpringBoor Stater</h3><p>自动导入依赖，完成版本仲裁</p><p>例如 <code>spring-boot-starter-web</code>,就自动帮我们导入了Tomcat Jason webmvc web validator 等需要用到的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-json<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.8.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.17.Final<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-webmvc<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>SpingBoot提供了许多starter例如 security mybatis jpa 等等</p><h3 id="创建SpringBoot的方法有哪些"><a href="#创建SpringBoot的方法有哪些" class="headerlink" title="创建SpringBoot的方法有哪些"></a>创建SpringBoot的方法有哪些</h3><ul><li>Maven</li><li>Spring Initializr</li></ul><h3 id="spring-boot-maven-plugin的作用"><a href="#spring-boot-maven-plugin的作用" class="headerlink" title="spring-boot-maven-plugin的作用"></a>spring-boot-maven-plugin的作用</h3><ul><li>启动SpingBoot程序</li><li>重新打包jar包或者war包</li><li>管理SpingBoot程序的生命周期</li></ul><h3 id="SpringBoot的监视器是什么"><a href="#SpringBoot的监视器是什么" class="headerlink" title="SpringBoot的监视器是什么"></a>SpringBoot的监视器是什么</h3><p>可以帮助我们访问生产环境中运行的应用程序的当前状态</p><p>监视器模块公开了一组可以直接作为HTTP URL访问的REST端点来坚持状态</p><h3 id="什么是SpringData"><a href="#什么是SpringData" class="headerlink" title="什么是SpringData"></a>什么是SpringData</h3><p>TODO</p><h3 id="如何使用-Spring-Boot生成一个WAR文件"><a href="#如何使用-Spring-Boot生成一个WAR文件" class="headerlink" title="如何使用 Spring Boot生成一个WAR文件?"></a>如何使用 Spring Boot生成一个WAR文件?</h3><h4 id="1-修改pom-xml"><a href="#1-修改pom-xml" class="headerlink" title="1.修改pom.xml"></a>1.修改pom.xml</h4><p>修改pom.xml中打包方式为war包，将</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-修改启动类"><a href="#2-修改启动类" class="headerlink" title="2.修改启动类"></a>2.修改启动类</h4><p>两个步骤：</p><ul><li><p>将启动类继承SpringBootServletInitializer</p></li><li><p>重写configure方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DemoApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SpringBootServletInitializer</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(DemoApplication .class, args);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> SpringApplicationBuilder <span class="hljs-title">configure</span><span class="hljs-params">(SpringApplicationBuilder builder)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> builder.sources(DemoApplication .class);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-打包"><a href="#3-打包" class="headerlink" title="3.打包"></a>3.打包</h4><p>运行Maven的【package】命令，在target目录下会生成war包。<br>至此，结束。</p><h3 id="什么是-Spring-Boot-Starters"><a href="#什么是-Spring-Boot-Starters" class="headerlink" title="什么是 Spring Boot Starters"></a>什么是 Spring Boot Starters</h3><p>解决的问题：依赖管理</p><p>比如我们使用了spring-boot-starter-web，就会自动的为我导入需要用到的各种包，例如tomcat、validator、web、webmvc、logback等。</p><h3 id="Spring-Boot-⽀持哪些内嵌-Servlet-容器"><a href="#Spring-Boot-⽀持哪些内嵌-Servlet-容器" class="headerlink" title="Spring Boot ⽀持哪些内嵌 Servlet 容器"></a>Spring Boot ⽀持哪些内嵌 Servlet 容器</h3><p>可以支持的有tomcat和jetty，默认的是tomcat，端口为8080</p><h3 id="如何在-Spring-Boot-应⽤程序中使⽤-Jetty-⽽不是-Tomcat"><a href="#如何在-Spring-Boot-应⽤程序中使⽤-Jetty-⽽不是-Tomcat" class="headerlink" title="如何在 Spring Boot 应⽤程序中使⽤ Jetty ⽽不是 Tomcat?"></a>如何在 Spring Boot 应⽤程序中使⽤ Jetty ⽽不是 Tomcat?</h3><p>使用Jetty，需要在spring-boot-starter-web排除spring-boot-starter-tomcat，因为SpringBoot默认使用tomcat，在导入jettty的starter</p><h3 id="介绍⼀下-SpringBootApplication-注解"><a href="#介绍⼀下-SpringBootApplication-注解" class="headerlink" title="介绍⼀下@SpringBootApplication 注解"></a>介绍⼀下@SpringBootApplication 注解</h3><p>这个注解就是一个组合注解</p><p>核心注解有：</p><p>@ComponentScan：扫描符合条件的组件或者bean，并将它们放入容器当中。</p><p>@EnableAutoConfiguration 开启自动配置,<strong>借助@Import的支持，收集和注册特定场景相关的bean定义</strong>。</p><p>@SpringBootConfiguration</p><h3 id="如何重新加载-Spring-Boot上的更改而无需重新启动服务器"><a href="#如何重新加载-Spring-Boot上的更改而无需重新启动服务器" class="headerlink" title="如何重新加载 Spring Boot上的更改而无需重新启动服务器?"></a>如何重新加载 Spring Boot上的更改而无需重新启动服务器?</h3><h3 id="SpringBoot、SpringMVC-Spring"><a href="#SpringBoot、SpringMVC-Spring" class="headerlink" title="SpringBoot、SpringMVC,Spring"></a>SpringBoot、SpringMVC,Spring</h3><p>Spring是一个轻量级的JavaWeb企业级开发框架，他的核心功能主要是ioc,aop。</p><p>ioc就是控制反转，他能够把各种组件，对象放入容器中进行统一管理。</p><p>aop就是切面编程，他能够在不修改源码的情况下，进行功能的增强，像是事务的操作就运用到了Aop。</p><p>SpirngMVC是基于MVC设计思想的web框架，它把web运用进行分层（service dao entity controller），相比于传统的jsp，可以降低代码的耦合度。</p><p>springboot主要是解决spring和springmvc的配置问题，springboot设计的思想就是约定大于配置，是开发人员无需过多的关注大量 的xml文件配置，只需要少量的注解就可以完成。</p><h3 id="SpirngBoot监视器"><a href="#SpirngBoot监视器" class="headerlink" title="SpirngBoot监视器"></a>SpirngBoot监视器</h3><h3 id="Spring-Boot-如何做请求参数校验"><a href="#Spring-Boot-如何做请求参数校验" class="headerlink" title="Spring Boot 如何做请求参数校验"></a>Spring Boot 如何做请求参数校验</h3><h3 id="如何使⽤-Spring-Boot-实现全局异常处理？"><a href="#如何使⽤-Spring-Boot-实现全局异常处理？" class="headerlink" title="如何使⽤ Spring Boot 实现全局异常处理？"></a>如何使⽤ Spring Boot 实现全局异常处理？</h3><ul><li><p>@ControllerAdvice、@ExceptionHandler</p><p>可以创建一个全局异常处理的类，并使用**@ControllerAdvice**注解，在类中就可以创建处理异常的方法，方法上加上@ExceptionHandler,这个注解中的value属性就可以指定接受的异常类；方法的参数列表中，接受异常的对象。</p><p>在方法中就可以完成业务逻辑，一般实现全局异常都是为了使用户有更好的体验。</p></li><li><p>实现ErrorController接口</p></li></ul><p>两者的区别：@ControllerAdvice只能处理控制器的抛出的异常，请求在控制器，实现ErrorController接口可以处理所有的异常，包括404、401错误。</p><h3 id="Spring-Boot-如何做请求参数校验？"><a href="#Spring-Boot-如何做请求参数校验？" class="headerlink" title="Spring Boot 如何做请求参数校验？"></a>Spring Boot 如何做请求参数校验？</h3><p>Hibernate Validator 提供了 JSR 303 规范中所有内置 constraint 的实现，所以在项目开发中数据的校验是基于此的。</p><p>做法就是在实体类上添加检验注解例如（@NotBlank @Pattern @URL 等），在controller控制层上的请求方法的参数列表中，为需要验证的实体类对象加入@Valid注解就可以进行校验。</p><p>通常情况下，如果检验不合格时，会有一个自定义的异常处理类，统一的对检验不合格的异常进行处理，例如返回Json数据等。</p><p>并且，数据校验是会根据业务逻辑的不同，每个实体类的检验也不同，就需要进行分组。分组主要是通过创建几个空的接口，在检验注解上添加groups属性指定该注解是属于哪个组。而在控制层只需要指明检验的分组是哪一个就可以了。</p><h3 id="SpringBoot启动的机制"><a href="#SpringBoot启动的机制" class="headerlink" title="SpringBoot启动的机制"></a>SpringBoot启动的机制</h3><p>SpringBoot通过配置文件，自动装配所属的依赖的类，再用动态代理的方式注入容器。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>零碎知识点</title>
    <link href="/2021/10/03/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/10/03/%E9%9B%B6%E7%A2%8E%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h3 id="yaml可以表示的数据类型"><a href="#yaml可以表示的数据类型" class="headerlink" title="yaml可以表示的数据类型"></a>yaml可以表示的数据类型</h3><ol><li><p>对象类</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> &#123;<span class="hljs-string">k1:v1</span>,<span class="hljs-string">k2:v2</span>,<span class="hljs-string">k3:v3</span>&#125;<br><span class="hljs-comment">#或</span><br><span class="hljs-attr">k:</span> <br>  <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span><br>  <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span><br>  <span class="hljs-attr">k3:</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure></li><li><p>字面量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">k:</span> <span class="hljs-string">v</span><br></code></pre></td></tr></table></figure></li><li><p>数组</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">行内写法：</span>  <span class="hljs-attr">k:</span> [<span class="hljs-string">v1</span>,<span class="hljs-string">v2</span>,<span class="hljs-string">v3</span>]<br><span class="hljs-comment">#或者</span><br><span class="hljs-attr">k:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v1</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v2</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">v3</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="MyBatisPlus-Crud接口update"><a href="#MyBatisPlus-Crud接口update" class="headerlink" title="MyBatisPlus Crud接口update"></a>MyBatisPlus Crud接口update</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">update</span><span class="hljs-params">(T updateEntity, Wrapper&lt;T&gt; whereWrapper)</span></span>;<br><span class="hljs-comment">// 根据 ID 选择修改</span><br></code></pre></td></tr></table></figure><p>如果whereWrapper为null，则这个updateEntity会覆盖掉 数据库中的所有数据，一定不要用错了！！！</p><h3 id="list集合去掉null"><a href="#list集合去掉null" class="headerlink" title="list集合去掉null"></a>list集合去掉null</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">list</span>.remove<span class="hljs-constructor">All(Collections.<span class="hljs-params">singleton</span>(<span class="hljs-params">null</span>)</span>); <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在线教育</title>
    <link href="/2021/10/03/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2/"/>
    <url>/2021/10/03/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p>1、库名与应用名称尽量一致</p><p>2、表名、字段名必须使用小写字母或数字，禁止出现数字开头，</p><p>3、表名不使用复数名词</p><p>4、表的命名最好是加上“业务名称_表的作用”。如，edu_teacher</p><p>5、表必备三字段：id, gmt_create, gmt_modified</p><blockquote><p>说明：</p><p>其中 id 必为主键，类型为 bigint unsigned、单表时自增、步长为 1。</p><p>（如果使用分库分表集群部署，则id类型为verchar，非自增，业务中使用分布式id生成器）</p><p>gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被 动更新。</p></blockquote><p>6、单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。 说明：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。 </p><p>7、表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint （1 表示是，0 表示否）。 </p><blockquote><p>说明：任何字段如果为非负数，必须是 unsigned。 </p><p>注意：POJO 类中的任何布尔类型的变量，都不要加 is 前缀。数据库表示是与否的值，使用 tinyint 类型，坚持 is_xxx 的 命名方式是为了明确其取值含义与取值范围。 </p><p>正例：表达逻辑删除的字段名 is_deleted，1 表示删除，0 表示未删除。 </p></blockquote><p>8、小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不 正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。</p><p>9、如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 </p><p>10、varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索 引效率。</p><p>11、唯一索引名为 uk_字段名；普通索引名则为 idx_字段名。</p><p>说明：uk_ 即 unique key；idx_ 即 index 的简称</p><p>12、不得使用外键与级联，一切外键概念必须在应用层解决。外键与级联更新适用于单机低并发，不适合分布式、高并发集群；级联更新是强阻塞，存在数据库更新风暴的风险；外键影响数据库的插入速度。 </p><h1 id="MyBatisPlus在项目中应用"><a href="#MyBatisPlus在项目中应用" class="headerlink" title="MyBatisPlus在项目中应用"></a>MyBatisPlus在项目中应用</h1><h2 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>在前端进行修改或新增等操作的时候，一些属性需要自动填充，例如修改时间、创建时间等。</p><ol><li><p>在handler包下，创建MyMetaObjectHandler实现MetaObjectHandler类，重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br><span class="hljs-comment">//插入的时候，为gmtCreate，gmtModified赋予new Date()值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;gmtCreate&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;，gmtModified赋予&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br><span class="hljs-comment">//修改的时候，gmtModified赋予new Date()值</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;gmtModified&quot;</span>, <span class="hljs-keyword">new</span> Date(), metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在entity实体类中添加@TableFile()注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">   <br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT)</span><br><span class="hljs-keyword">private</span> Date gmtCreate;<br>   <br><span class="hljs-meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span><br><span class="hljs-keyword">private</span> Date gmtModified;<br>   <br></code></pre></td></tr></table></figure></li></ol><h2 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h2><h3 id="使用步骤-1"><a href="#使用步骤-1" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li><p>在MyBatisPlusConfig中配置分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> PaginationInterceptor <span class="hljs-title">paginationInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> PaginationInterceptor();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用分页插件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;&#123;page&#125;/&#123;limit&#125;&quot;)</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">pageList</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@PathVariable</span> Long page,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-meta">@PathVariable</span> Long limit)</span></span>&#123;<br>    Page&lt;Teacher&gt; pageParam = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, limit);<span class="hljs-comment">//创建page对象</span><br>    teacherService.page(pageParam, <span class="hljs-keyword">null</span>);<br>    List&lt;Teacher&gt; records = pageParam.getRecords();<br>    <span class="hljs-keyword">long</span> total = pageParam.getTotal();<br>    <span class="hljs-keyword">return</span>  R.ok().data(<span class="hljs-string">&quot;total&quot;</span>, total).data(<span class="hljs-string">&quot;rows&quot;</span>, records);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Page类的结构"><a href="#Page类的结构" class="headerlink" title="Page类的结构"></a>Page类的结构</h3><p><img src="/2021/10/03/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2/image-20211003162018065.png" alt="image-20211003162018065"></p><h1 id="通用的配置"><a href="#通用的配置" class="headerlink" title="通用的配置"></a>通用的配置</h1><h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><ol><li><p>创建处理异常的类ExceptionHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> class <span class="hljs-title">GlobalExceptionController</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(Exception e)</span> </span>&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;执行了全局异常处理..&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//特定异常</span><br>    <span class="hljs-meta">@ExceptionHandler(ArithmeticException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(ArithmeticException e)</span> </span>&#123;<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.error().message(<span class="hljs-string">&quot;执行了ArithmeticException异常处理..&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//自定义异常</span><br>    <span class="hljs-meta">@ExceptionHandler(GuliException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">error</span><span class="hljs-params">(GuliException e)</span> </span>&#123;<br>        log.error(e.getMessage());<br>        e.printStackTrace();<br>        <span class="hljs-keyword">return</span> R.error().code(e.getCode()).message(e.getMsg());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>当出现异常的时候，可以抛出自己定义的异常</p></li></ol><h2 id="统一日志配置"><a href="#统一日志配置" class="headerlink" title="统一日志配置"></a>统一日志配置</h2><h3 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h3><p>日志记录器（Logger）的行为是分等级的。如下表所示：</p><p>分为：OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL  (面试常问)</p><p>默认情况下，spring boot从控制台打印出来的日志级别只有<strong>INFO</strong>及以上级别，可以配置日志级别。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 设置日志级别</span><br><span class="hljs-string">logging.level.root=WARN</span><br></code></pre></td></tr></table></figure><h3 id="日志持久化"><a href="#日志持久化" class="headerlink" title="日志持久化"></a>日志持久化</h3>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyBatisPlus笔记</title>
    <link href="/2021/10/03/MyBatisPlus/"/>
    <url>/2021/10/03/MyBatisPlus/</url>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 Sql 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p><a href="https://mp.baomidou.com/guide/quick-start.html#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B7%A5%E7%A8%8B">官方地址</a></p><blockquote><p>步骤</p></blockquote><p>1、创建数据库，以及表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE USER<br>(<br>id BIGINT(20) NOT NULL COMMENT &#x27;主键ID&#x27;,<br>NAME VARCHAR(30) NULL DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>age INT(11) NULL DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>email VARCHAR(50) NULL DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>PRIMARY KEY (id)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM USER;<br><br>INSERT INTO USER (id, NAME, age, email) VALUES<br>(1, &#x27;Jone&#x27;, 18, &#x27;test1@baomidou.com&#x27;),<br>(2, &#x27;Jack&#x27;, 20, &#x27;test2@baomidou.com&#x27;),<br>(3, &#x27;Tom&#x27;, 28, &#x27;test3@baomidou.com&#x27;),<br>(4, &#x27;Sandy&#x27;, 21, &#x27;test4@baomidou.com&#x27;),<br>(5, &#x27;Billie&#x27;, 24, &#x27;test5@baomidou.com&#x27;);<br></code></pre></td></tr></table></figure><p>2、搭建环境</p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802082921896.png" alt="image-20210802082921896"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802083112340.png" alt="image-20210802083112340"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802083140847.png" alt="image-20210802083140847"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802083241027.png" alt="image-20210802083241027"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802083417212.png" alt="image-20210802083417212"></p><p>3、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--数据库驱动--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--lombok--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--myBatisPlus--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>4、配置</p><p>mysql数据库的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.datasource.username</span>=<span class="hljs-string">Administrator</span><br><span class="hljs-meta">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-meta">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mybatis_plus?\</span><br><span class="hljs-string">  useUnicode=true&amp;characterEncoding=utg-8&amp;serverTimezone=GMT%2B8</span><br><span class="hljs-meta">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br></code></pre></td></tr></table></figure><p>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MapperScan(&quot;com.kuang.mybatis&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplication</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(MybatisPlusApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>5、创建POJO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.mybatis.pojo;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Data   能够自动生成构造器get，set方法。</p><p>6、编写Mapper类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.kuang.mybatis.mapper;<br><br><span class="hljs-keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;<br><span class="hljs-keyword">import</span> com.kuang.mybatis.pojo.User;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">BaseMapper</span>&lt;<span class="hljs-title">User</span>&gt; </span>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>@Repository</p><p>至此，完成CRUD操作</p><p>7、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MybatisPlusApplicationTests</span> </span>&#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-keyword">null</span>);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h2><p>sql不可见，开发时应该可见。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h2 id="CRUD扩展"><a href="#CRUD扩展" class="headerlink" title="CRUD扩展"></a>CRUD扩展</h2><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">2</span>);<br>    user.setEmail(<span class="hljs-string">&quot;lsd@qq.com&quot;</span>);<br>    user.setName(<span class="hljs-string">&quot;lsd&quot;</span>);<br>    userMapper.insert(user);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="主键自增策略"><a href="#主键自增策略" class="headerlink" title="主键自增策略"></a><strong>主键自增策略</strong></h3><p><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">分布式系统唯一ID生成方案汇总</a></p><p>​    <strong>Twitter的snowflake算法</strong></p><p>snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。</p><p>在POJO对象的id属性上，添加@TableId(type= )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">IdType</span> </span>&#123;<br>    AUTO(<span class="hljs-number">0</span>),     <span class="hljs-comment">//自动增加</span><br>    NONE(<span class="hljs-number">1</span>),<br>    INPUT(<span class="hljs-number">2</span>),       <span class="hljs-comment">//手动输入</span><br>    ASSIGN_ID(<span class="hljs-number">3</span>), <span class="hljs-comment">//雪花算法</span><br>    ASSIGN_UUID(<span class="hljs-number">4</span>); <br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> key;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">IdType</span><span class="hljs-params">(<span class="hljs-keyword">int</span> key)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.key = key;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getKey</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.key;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用之前，Mysql需要有主键并且自增。</p><h3 id="更新操作"><a href="#更新操作" class="headerlink" title="更新操作"></a>更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testUpdate</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setId(<span class="hljs-number">5L</span>);<br>    user.setEmail(<span class="hljs-string">&quot;lsd@qqq.com&quot;</span>);<br>    user.setName(<span class="hljs-string">&quot;ls2d&quot;</span>);<br>    userMapper.updateById(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802113136884.png" alt="image-20210802113136884"></p><p>帮我们完成了拼串的操作</p><h3 id="自动填充"><a href="#自动填充" class="headerlink" title="自动填充"></a>自动填充</h3><p>创建时间、修改时间!这些操作一般都是自动化完成的,我们不希望手动更新。<br>阿里巴巴开发手册:所有的数据库表: gmt_create、 gmt_modified几乎所有的表都要配置上!而且需要自动化!</p><blockquote><p>方式一：数据库级别 （不建议）</p></blockquote><p>1、数据库表</p><p>2、pojo对象</p><blockquote><p>方式二</p></blockquote><p>1、删除数据库默认的值</p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802143100217.png" alt="image-20210802143100217"></p><p>2、@TableFied注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@TableField(fill=INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill=INSERT)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>源码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.baomidou.mybatisplus.annotation;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">FieldFill</span> </span>&#123;<br>    DEFAULT,<br>    INSERT,<br>    UPDATE,<br>    INSERT_UPDATE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">FieldFill</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、编写处理器处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyMetaObjectHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">MetaObjectHandler</span> </span>&#123;<br>    <span class="hljs-comment">//插入时，需要修改的是createTime和updateTime</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insertFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;createTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br><br>    <span class="hljs-comment">//更新时，需要修改的是updateTime</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">updateFill</span><span class="hljs-params">(MetaObject metaObject)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.setFieldValByName(<span class="hljs-string">&quot;updateTime&quot;</span>,<span class="hljs-keyword">new</span> Date(),metaObject);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>line1  注意加入@Componet注解，以便注入到IOC容器</p><h3 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h3><p>面试中常见，与之对应的是悲观锁。</p><blockquote><p>乐观锁：总是认为不会出现问题，不论干什么都不去上锁，如果出现了问题就加锁。</p><p>悲观锁：总是认为会出现问题，无论干什么都会上锁，再去上锁。</p></blockquote><p>乐观锁实现方式：<br>        取出记录时,获取当前 version<br>        更新时,带上这个 version<br>        执行更新时, set version= newVersion where version<br>   ·    如果 version不对,就更新失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">--A<br>update user set name=&quot;kuangsheng&quot;,version=version+1<br>where id = 2 and version = 1<br><br>--B 线程抢先完成，这个时候version=2，会导致A修改失败<br>update user set name=&quot;kuangshen&quot;,version=version+1<br>where id = 2 and version = 1<br></code></pre></td></tr></table></figure><blockquote><p>测试MP的乐观锁插件</p></blockquote><p>1、给数据库增加version字段</p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802151825260.png" alt="image-20210802151825260"></p><p>2、POJO添加version属性，并添加注解@Version</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@TableField(fill=INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill=INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> version;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、注册组件</p><p>config包下，写MyBatisPlusConfig 并添加@Configuration 注解</p><p>​                                                                @EnableTransactionManagement</p><p>​                                                                @MapperScan(“com.kuang.mabatis”)  将MybatisPlusApplication上的注                                                                                                                                                                        解迁移到这里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@MapperScan(&quot;com.kuang.mybatis.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisPlusConfig</span> </span>&#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>        MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();<br>        interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> OptimisticLockerInnerInterceptor());<br>        <span class="hljs-keyword">return</span> interceptor;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802154320229.png" alt="image-20210802154320229"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802154343821.png" alt="image-20210802154343821"></p><p>注意一定是Integer类型，不然直接上锁，无法完成CRUD操作。</p><h3 id="查询操作、删除操作"><a href="#查询操作、删除操作" class="headerlink" title="查询操作、删除操作"></a>查询操作、删除操作</h3><p>查询和删除都差不多</p><blockquote><p>单个查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testInsert</span><span class="hljs-params">()</span></span>&#123;<br>    User user = <span class="hljs-keyword">new</span> User();<br>    user.setAge(<span class="hljs-number">2</span>);<br>    user.setEmail(<span class="hljs-string">&quot;lsd@qq.com&quot;</span>);<br>    user.setName(<span class="hljs-string">&quot;lsd&quot;</span>);<br>    userMapper.insert(user);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>通过Collection查询</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByIds</span><span class="hljs-params">()</span></span>&#123;<br>    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">for</span> (User user : users) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>line3 利用数组工具，转化为Collection</p><blockquote><p>通过map来查</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelectByMap</span><span class="hljs-params">()</span></span>&#123;<br>    HashMap&lt;String,Object&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    map.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lsd&quot;</span>);<br>    List&lt;User&gt; users = userMapper.selectByMap(map);<br>    users.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><p>line3 HashMap&lt;String,Object&gt; map</p><p>line 6</p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><p>1、原始的limt迸行分页<br>2、 pageHelper第三方插件<br>3、MP其实也内置了分页插件!</p><blockquote><p>如何使用</p></blockquote><p>1、配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> MybatisPlusInterceptor <span class="hljs-title">mybatisPlusInterceptor</span><span class="hljs-params">()</span> </span>&#123;<br>    MybatisPlusInterceptor interceptor = <span class="hljs-keyword">new</span> MybatisPlusInterceptor();<br>    interceptor.addInnerInterceptor(<span class="hljs-keyword">new</span> PaginationInnerInterceptor(DbType.H2));<br>    <span class="hljs-keyword">return</span> interceptor;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testPage</span><span class="hljs-params">()</span></span>&#123;<br>    Page&lt;User&gt; objectPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br>    userMapper.selectPage(objectPage,<span class="hljs-keyword">null</span>);<br>    <span class="hljs-keyword">for</span> (User record : objectPage.getRecords()) &#123;<br>        System.out.println(record);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h3><blockquote><p>逻辑删除：在数据库没有被移除，而是通过变量让它失效</p><p>物理删除：从数据库中删除   deleted=1 deleted=0</p></blockquote><p>管理员可以查看被删除的记录，类似于回收站</p><p>测试：</p><p>1、在数据表中之间deleted 字段</p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802170223066.png" alt="image-20210802170223066"></p><p>未被删除为0，删除了为1</p><p>2、POJO增加deleted属性，注解@TableLogic</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-meta">@TableField(fill=INSERT)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br>    <span class="hljs-meta">@TableField(fill=INSERT_UPDATE)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>    <span class="hljs-meta">@Version</span><br>    <span class="hljs-keyword">private</span> Integer version;<br>    <span class="hljs-meta">@TableLogic</span><br>    <span class="hljs-keyword">private</span> Integer deleted;         <span class="hljs-comment">//------</span><br></code></pre></td></tr></table></figure><p>3、配置逻辑删除组件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="hljs-string">1</span><br><span class="hljs-meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="hljs-string">0</span><br></code></pre></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testLogicDelete</span><span class="hljs-params">()</span></span>&#123;<br>    userMapper.deleteById(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802171115265.png" alt="image-20210802171115265"></p><p>数据没有被删除,实际上是一个更新语句。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testSelect</span><span class="hljs-params">()</span></span>&#123;<br>    User user = userMapper.selectById(<span class="hljs-number">1</span>);<br>    System.out.println(user);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802171420197.png" alt="image-20210802171420197"></p><p>查询查不到，拼接了sql deleted = 0</p><h2 id="性能分析插件"><a href="#性能分析插件" class="headerlink" title="性能分析插件"></a>性能分析插件</h2><p>查找慢sql。超过这个时间就停止运行。</p><p>PerformanceInterceptor在3.2.0被移除了，如果想进行性能分析，用第三方的，官方这样写的“该插件 <code>3.2.0</code> 以上版本移除推荐使用第三方扩展 <code>执行 SQL 分析打印</code> 功能”</p><p>1、配置开发环境</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br>  <span class="hljs-meta">@Profile(&#123;&quot;dev&quot;,&quot;test&quot;&#125;)</span> <span class="hljs-comment">//设置dev test 环境开启，保证我们的效率</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> PerformanceInterceptor <span class="hljs-title">performanceInterceptor</span><span class="hljs-params">()</span></span>&#123;<br>      PerformanceInterceptor performanceInterceptor = <span class="hljs-keyword">new</span> PerformanceInterceptor();<br>      performanceInterceptor.setMaxTime(<span class="hljs-number">1</span>); <span class="hljs-comment">//ms 设置sql执行的最大时间 如果超过则不执行</span><br>      performanceInterceptor.setFormat(<span class="hljs-keyword">true</span>);<span class="hljs-comment">//是否格式化代码</span><br>      <span class="hljs-keyword">return</span> performanceInterceptor;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-meta">spring.profiles.active</span>=<span class="hljs-string">dev</span><br></code></pre></td></tr></table></figure><p>2、测试</p><p>直接使用sql语句，超过了规定时间的就会报红。</p><h2 id="条件构造器"><a href="#条件构造器" class="headerlink" title="条件构造器"></a>条件构造器</h2><p>复制的sql可以使用Wrapper构造</p><p>还有很多，看官方文档。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test1</span><span class="hljs-params">()</span></span>&#123;<br>    QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    objectQueryWrapper<br>            .isNotNull(<span class="hljs-string">&quot;name&quot;</span>)<br>            .isNotNull(<span class="hljs-string">&quot;email&quot;</span>)<br>            .ge(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">12</span>);           <span class="hljs-comment">//大于等于12</span><br>    <span class="hljs-keyword">for</span> (User user : userMapper.selectList(objectQueryWrapper)) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;<br>      QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>      objectQueryWrapper.eq(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;lsd&quot;</span>);   <span class="hljs-comment">//名字等于lsd</span><br>      userMapper.selectList(objectQueryWrapper).forEach(System.out::println);<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test3</span><span class="hljs-params">()</span></span>&#123;<br>    QueryWrapper&lt;User&gt; objectQueryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;();<br>    objectQueryWrapper.between(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);    <span class="hljs-comment">//年龄在10-20之间的</span><br>    <span class="hljs-keyword">for</span> (User user : userMapper.selectList(objectQueryWrapper)) &#123;<br>        System.out.println(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码生成器"><a href="#代码生成器" class="headerlink" title="代码生成器"></a>代码生成器</h2><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802212025335.png" alt="image-20210802212025335"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802212035334.png" alt="image-20210802212035334"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802212042298.png" alt="image-20210802212042298"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802212048678.png" alt="image-20210802212048678"></p><p><img src="/2021/10/03/MyBatisPlus/Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210802212052978.png" alt="image-20210802212052978"></p>]]></content>
    
    
    <categories>
      
      <category>Java后端</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JUC面试</title>
    <link href="/2021/10/03/JUC%E9%9D%A2%E8%AF%95/"/>
    <url>/2021/10/03/JUC%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是线程和进程"><a href="#什么是线程和进程" class="headerlink" title="什么是线程和进程"></a><strong>什么是线程和进程</strong></h3><p>启动了一个java的main就相当于启动了一个JVM进程，而JVM进程的运行又是由main进程，也就是主线程和其他线程同时运行的。</p><p>进程就是程序的一次执行，线程是一个比进程更小的一个单位。</p><h3 id="线程与进程的关系-区别及优缺点？"><a href="#线程与进程的关系-区别及优缺点？" class="headerlink" title="线程与进程的关系,区别及优缺点？"></a><strong>线程与进程的关系,区别及优缺点？</strong></h3><p><img src="/2021/10/03/JUC%E9%9D%A2%E8%AF%95/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210929001413506.png" alt="image-20210929001413506"></p><h3 id="程序计数器为什么是私有的"><a href="#程序计数器为什么是私有的" class="headerlink" title="程序计数器为什么是私有的?"></a><strong>程序计数器为什么是私有的?</strong></h3><p>程序计数器相当于指针，可以知道通过改变程序计数器来一次读取指令，也可以记录执行的位置。</p><p><strong>线程切换后能恢复到正确的执行位置</strong></p><h3 id="虚拟机栈和本地方法栈为什么是私有的"><a href="#虚拟机栈和本地方法栈为什么是私有的" class="headerlink" title="虚拟机栈和本地方法栈为什么是私有的?"></a>虚拟机栈和本地方法栈为什么是私有的?</h3><p>保证线程中的局部变量不被别的线程访问到</p><h3 id="并发与并⾏的区别"><a href="#并发与并⾏的区别" class="headerlink" title="并发与并⾏的区别"></a>并发与并⾏的区别</h3><p><strong>并发：</strong> 同⼀时间段，多个任务都在执⾏ (单位时间内不⼀定同时执⾏)；（os欺骗用户）</p><p><strong>并⾏：</strong> 单位时间内，多个任务同时执⾏。</p><h3 id="为什么要使⽤多线程"><a href="#为什么要使⽤多线程" class="headerlink" title="为什么要使⽤多线程"></a><strong>为什么要使⽤多线程</strong></h3><p>单核心cpu只能<strong>同一时刻</strong>运行一个线程</p><p>互联网发展趋势</p><h3 id="多线程可能带来什么问题"><a href="#多线程可能带来什么问题" class="headerlink" title="多线程可能带来什么问题?"></a>多线程可能带来什么问题?</h3><p>内存泄漏、上下⽂切换、死锁</p><h3 id="线程的⽣命周期和状态"><a href="#线程的⽣命周期和状态" class="headerlink" title="线程的⽣命周期和状态"></a><strong>线程的⽣命周期和状态</strong></h3><p><img src="/2021/10/03/JUC%E9%9D%A2%E8%AF%95/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210929003450639.png" alt="image-20210929003450639"></p><h3 id="上下⽂切换"><a href="#上下⽂切换" class="headerlink" title="上下⽂切换"></a><strong>上下⽂切换</strong></h3><p>当⼀个线程的时间⽚⽤完的时候就会重新处于就绪状态让给其他线程使⽤，这个过程就属于⼀次上下⽂切换。</p><h3 id="是线程死锁-如何避免死锁"><a href="#是线程死锁-如何避免死锁" class="headerlink" title="是线程死锁?如何避免死锁"></a><strong>是线程死锁</strong>?如何避免死锁</h3><p>线程被⽆限期地阻塞，程序不可能终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeadLock</span> </span>&#123;<br><br>    <span class="hljs-comment">//创建两个对象</span><br>    <span class="hljs-keyword">static</span> Object a = <span class="hljs-keyword">new</span> Object();<br>    <span class="hljs-keyword">static</span> Object b = <span class="hljs-keyword">new</span> Object();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">synchronized</span> (a) &#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 持有锁a，试图获取锁b&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span> (b) &#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 获取锁b&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;A&quot;</span>).start();<br><br>        <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>            <span class="hljs-keyword">synchronized</span> (b) &#123;<br>                System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 持有锁b，试图获取锁a&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    TimeUnit.SECONDS.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">synchronized</span> (a) &#123;<br>                    System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot; 获取锁a&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;,<span class="hljs-string">&quot;B&quot;</span>).start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>线程已获得的资源在末使⽤完之前不能被其他线程强⾏剥夺，只有⾃⼰使⽤完毕后才释放资源。</p><p><img src="/2021/10/03/JUC%E9%9D%A2%E8%AF%95/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20210929004843928.png" alt="image-20210929004843928"></p><h3 id="sleep-⽅法和-wait-⽅法区别和共同点"><a href="#sleep-⽅法和-wait-⽅法区别和共同点" class="headerlink" title="sleep() ⽅法和 wait() ⽅法区别和共同点?"></a><strong>sleep()</strong> <strong>⽅法和</strong> <strong>wait()</strong> ⽅法区别和共同点?</h3><ul><li>区别：<ul><li><strong>sleep()</strong> <strong>⽅法没有释放锁，⽽</strong> <strong>wait()</strong> <strong>⽅法释放了锁</strong> 。</li><li>wait()是Object的方法，sleep是Thread的方法</li></ul></li><li>相同<ul><li>都可以暂停线程</li></ul></li></ul><h3 id="start-⽅法时会执⾏-run-⽅法"><a href="#start-⽅法时会执⾏-run-⽅法" class="headerlink" title="start() ⽅法时会执⾏ run() ⽅法"></a><strong>start()</strong> <strong>⽅法时会执⾏</strong> <strong>run()</strong> <strong>⽅法</strong></h3><p> 调⽤ start() ⽅法⽅可启动线程并使线程进⼊就绪状态，（分配到时间片后执行）</p><p>直接执⾏ run() ⽅法的话不会以多线程的⽅式执⾏。</p><h3 id="synchronized-关键字"><a href="#synchronized-关键字" class="headerlink" title="synchronized 关键字"></a><strong>synchronized</strong> <strong>关键字</strong></h3><p>synchronized 关键字可以保证，被它修饰的⽅法或者代码块在任意时刻只能有⼀个线程执⾏。</p><p>J在 Java 早期版本中， synchronized 属于 <strong>重量级锁</strong>，JDK1.6 对锁的实现引⼊了⼤量的优化，引入了自旋锁、适应性自选锁等来减少锁操作的开销。所以synchronized被大量使用。</p>]]></content>
    
    
    <categories>
      
      <category>面试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>谷粒商城笔记总结2</title>
    <link href="/2021/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B02/"/>
    <url>/2021/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<h3 id="TableField-exist-false"><a href="#TableField-exist-false" class="headerlink" title="@TableField(exist=false)"></a>@TableField(exist=false)</h3><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">使用该注解可以增加<span class="hljs-keyword">entity</span>对象的属性，而不用改变数据库<br></code></pre></td></tr></table></figure><h3 id="使用Stream对集合做过滤筛选等操作"><a href="#使用Stream对集合做过滤筛选等操作" class="headerlink" title="使用Stream对集合做过滤筛选等操作"></a>使用Stream对集合做过滤筛选等操作</h3><p><a href>https://www.runoob.com/java/java8-streams.html</a></p><h3 id="使用nacos，服务注册与发现"><a href="#使用nacos，服务注册与发现" class="headerlink" title="使用nacos，服务注册与发现"></a>使用nacos，服务注册与发现</h3><ol><li>引入依赖</li><li>@EnableDiscoveryClient</li><li>yml文件配置nacos注册中心的地址</li></ol><h3 id="使用ncaos-配置中心"><a href="#使用ncaos-配置中心" class="headerlink" title="使用ncaos,配置中心"></a>使用ncaos,配置中心</h3><ol><li>完成服务注册</li><li>bootstrap.properties文件配置服务发现地址，和名称空间,和该服务的服务名</li></ol><h3 id="网关的配置"><a href="#网关的配置" class="headerlink" title="网关的配置"></a>网关的配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">admin_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://renren</span>                 <span class="hljs-comment">##做负载均衡，后面加服务名</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span>   <span class="hljs-comment">##//重写路径</span><br>            <br>            <br></code></pre></td></tr></table></figure><h3 id="服务端签名后直传"><a href="#服务端签名后直传" class="headerlink" title="服务端签名后直传"></a>服务端签名后直传</h3><p>优点：采用JavaScript客户端直接签名（参见<a href="https://help.aliyun.com/document_detail/31925.htm?spm=a2c4g.11186623.0.0.169c5d3fQhtHY6#concept-frd-4gy-5db">JavaScript客户端签名直传</a>）时，AccessKey ID和AcessKey Secret会暴露在前端页面，因此存在严重的安全隐患。因此，OSS提供了服务端签名后直传的方案。</p><p><img src="http://help-static-aliyun-doc.aliyuncs.com/assets/img/zh-CN/3156348951/p139016.png" alt="img"></p><p>官网实例：</p><p><a href="https://help.aliyun.com/document_detail/91868.htm?spm=a2c4g.11186623.0.0.169c5d3fQhtHY6#concept-ahk-rfz-2fb">https://help.aliyun.com/document_detail/91868.htm?spm=a2c4g.11186623.0.0.169c5d3fQhtHY6#concept-ahk-rfz-2fb</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="hljs-function">            <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br><br>        String accessId = <span class="hljs-string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>; <span class="hljs-comment">// 请填写您的AccessKeyId。</span><br>        String accessKey = <span class="hljs-string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>; <span class="hljs-comment">// 请填写您的AccessKeySecret。</span><br>        String endpoint = <span class="hljs-string">&quot;oss-cn-hangzhou.aliyuncs.com&quot;</span>; <span class="hljs-comment">// 请填写您的 endpoint。</span><br>        String bucket = <span class="hljs-string">&quot;bucket-name&quot;</span>; <span class="hljs-comment">// 请填写您的 bucketname 。</span><br>        String host = <span class="hljs-string">&quot;https://&quot;</span> + bucket + <span class="hljs-string">&quot;.&quot;</span> + endpoint; <span class="hljs-comment">// host的格式为 bucketname.endpoint</span><br>        <span class="hljs-comment">// callbackUrl为上传回调服务器的URL，请将下面的IP和Port配置为您自己的真实信息。</span><br>        String callbackUrl = <span class="hljs-string">&quot;http://88.88.88.88:8888&quot;</span>;<br>        String dir = <span class="hljs-string">&quot;user-dir-prefix/&quot;</span>; <span class="hljs-comment">// 用户上传文件时指定的前缀。</span><br><br>        <span class="hljs-comment">// 创建OSSClient实例。</span><br>        OSS ossClient = <span class="hljs-keyword">new</span> OSSClientBuilder().build(endpoint, accessId, accessKey);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">long</span> expireTime = <span class="hljs-number">30</span>;<br>            <span class="hljs-keyword">long</span> expireEndTime = System.currentTimeMillis() + expireTime * <span class="hljs-number">1000</span>;<br>            Date expiration = <span class="hljs-keyword">new</span> Date(expireEndTime);<br>            <span class="hljs-comment">// PostObject请求最大可支持的文件大小为5 GB，即CONTENT_LENGTH_RANGE为5*1024*1024*1024。</span><br>            PolicyConditions policyConds = <span class="hljs-keyword">new</span> PolicyConditions();<br>            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="hljs-number">0</span>, <span class="hljs-number">1048576000</span>);<br>            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);<br><br>            String postPolicy = ossClient.generatePostPolicy(expiration, policyConds);<br>            <span class="hljs-keyword">byte</span>[] binaryData = postPolicy.getBytes(<span class="hljs-string">&quot;utf-8&quot;</span>);<br>            String encodedPolicy = BinaryUtil.toBase64String(binaryData);<br>            String postSignature = ossClient.calculatePostSignature(postPolicy);<br><br>            Map&lt;String, String&gt; respMap = <span class="hljs-keyword">new</span> LinkedHashMap&lt;String, String&gt;();<br>            respMap.put(<span class="hljs-string">&quot;accessid&quot;</span>, accessId);<br>            respMap.put(<span class="hljs-string">&quot;policy&quot;</span>, encodedPolicy);<br>            respMap.put(<span class="hljs-string">&quot;signature&quot;</span>, postSignature);<br>            respMap.put(<span class="hljs-string">&quot;dir&quot;</span>, dir);<br>            respMap.put(<span class="hljs-string">&quot;host&quot;</span>, host);<br>            respMap.put(<span class="hljs-string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="hljs-number">1000</span>));<br>            <span class="hljs-comment">// respMap.put(&quot;expire&quot;, formatISO8601Date(expiration));</span><br><br>            JSONObject jasonCallback = <span class="hljs-keyword">new</span> JSONObject();<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackUrl&quot;</span>, callbackUrl);<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackBody&quot;</span>,<br>                    <span class="hljs-string">&quot;filename=$&#123;object&#125;&amp;size=$&#123;size&#125;&amp;mimeType=$&#123;mimeType&#125;&amp;height=$&#123;imageInfo.height&#125;&amp;width=$&#123;imageInfo.width&#125;&quot;</span>);<br>            jasonCallback.put(<span class="hljs-string">&quot;callbackBodyType&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>            String base64CallbackBody = BinaryUtil.toBase64String(jasonCallback.toString().getBytes());<br>            respMap.put(<span class="hljs-string">&quot;callback&quot;</span>, base64CallbackBody);<br><br>            JSONObject ja1 = JSONObject.fromObject(respMap);<br>            <span class="hljs-comment">// System.out.println(ja1.toString());</span><br>            response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>);<br>            response.setHeader(<span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>, <span class="hljs-string">&quot;GET, POST&quot;</span>);<br>            response(request, response, ja1.toString());<br><br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-comment">// Assert.fail(e.getMessage());</span><br>            System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span> &#123; <br>            ossClient.shutdown();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这一系列操作就是在服务器端，通过一系列运算，回传给客户端accessid、policy、signature、host等信息，客户端拿到该信息就可以直接将文件上传。</p><h3 id="配置oss，bucket的注意事项"><a href="#配置oss，bucket的注意事项" class="headerlink" title="配置oss，bucket的注意事项"></a>配置oss，bucket的注意事项</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8848</span><br>    <span class="hljs-attr">alicloud:</span><br>      <span class="hljs-attr">access-key:</span> <span class="hljs-string">LTAI5tP1PoxWnCtW119aEpnx</span><br>      <span class="hljs-attr">secret-key:</span> <span class="hljs-string">qUTmqUFbac8WdY848QJb8Lh0oXInm7</span><br>      <span class="hljs-attr">oss:</span><br>        <span class="hljs-attr">endpoint:</span> <span class="hljs-string">oss-cn-beijing.aliyuncs.com</span><br>        <span class="hljs-attr">bucket:</span> <span class="hljs-string">guli-lapuda</span><br></code></pre></td></tr></table></figure><p>bucket是没有在ConfigurationProperties里的，但是可以手动添加，方便@Value()注入。</p><p>因为access-key和secret-key，就包含了bucket列表，但是也要配置正确，因为传给客户端的host就包含了bucket。如果bucket错误，虽然可以上传文件成功，但是做一些其他操作会失败。（例如调用上传的图片时，地址发生错误）</p><h2 id="JSR303"><a href="#JSR303" class="headerlink" title="JSR303"></a>JSR303</h2><h3 id="单组校验："><a href="#单组校验：" class="headerlink" title="单组校验："></a>单组校验：</h3><ol><li><p>在entity对象的属性中添加校验注解（在javax.validation.constraints包下）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NotBlank(message = &quot;品牌名必须提交&quot;)</span><span class="hljs-comment">//自定义message消息</span><br>   <span class="hljs-keyword">private</span> String name;<br>   <br><span class="hljs-meta">@Pattern(regexp=&quot;^[a-zA-Z]$&quot;,message = &quot;检索首字母必须是一个字母&quot;)</span><span class="hljs-comment">//支持正则</span><br>   <span class="hljs-keyword">private</span> String firstLetter;<br>   <br><span class="hljs-meta">@URL</span><br><span class="hljs-keyword">private</span> String EMail;<br></code></pre></td></tr></table></figure></li><li><p>在请求的controller方法中添加@Valid注解</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/save&quot;</span>)<br>    public R save(<span class="hljs-variable">@Valid</span> <span class="hljs-variable">@RequestBody</span> BrandEntity brand)&#123;<br><span class="hljs-selector-tag">brandService</span><span class="hljs-selector-class">.save</span>(brand);<br><br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">R</span><span class="hljs-selector-class">.ok</span>();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。(但会造成代码冗余)，可以采取统一异常处理。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino">@<span class="hljs-built_in">RequestMapping</span>(<span class="hljs-string">&quot;/save&quot;</span>)<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">save</span><span class="hljs-params">(@Valid @RequestBody BrandEntity brand, BindingResult result)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>( result.<span class="hljs-built_in">hasErrors</span>())&#123;<br>            Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>            <span class="hljs-comment">//1.获取错误的校验结果</span><br>            result.<span class="hljs-built_in">getFieldErrors</span>().forEach((item)-&gt;&#123;<br>                <span class="hljs-comment">//获取发生错误时的message</span><br>                <span class="hljs-keyword">String</span> message = item.<span class="hljs-built_in">getDefaultMessage</span>();<br>                <span class="hljs-comment">//获取发生错误的字段</span><br>                <span class="hljs-keyword">String</span> field = item.<span class="hljs-built_in">getField</span>();<br>                map.<span class="hljs-built_in">put</span>(field,message);<br>            &#125;);<br>            <span class="hljs-keyword">return</span> R.<span class="hljs-built_in">error</span>(<span class="hljs-number">400</span>,<span class="hljs-string">&quot;提交的数据不合法&quot;</span>).<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;data&quot;</span>,map);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br><br>        &#125;<br>brandService.<span class="hljs-built_in">save</span>(brand);<br><br>        <span class="hljs-keyword">return</span> R.<span class="hljs-built_in">ok</span>();<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>统一异常处理</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java">统一异常处理过程：<br><br><span class="hljs-number">1.</span> 创建异常处理类（专门创建一个exception的包）<br><span class="hljs-number">2.</span> 添加<span class="hljs-meta">@ControllerAdvice</span>注解<br><span class="hljs-number">3.</span> 在类写具体处理的类，需添加<span class="hljs-meta">@ExceptionHandler(value=xxxExcepion.class)</span>指明需要处理的异常类型。<br><br>- <span class="hljs-meta">@RestControllerAdvice</span>=<span class="hljs-meta">@ResponseBody</span>+<span class="hljs-meta">@Controller</span>+<span class="hljs-meta">@Advice</span>（basePackge=）可以指定处理哪里的异常<br>- 打印日志：先引入<span class="hljs-meta">@Slf4j</span>注解，再使用log.erro()等就可以打印日志了<br>    <br>    <br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestControllerAdvice(basePackages = &quot;com.atguigu.gulimall.product&quot;)</span>   <span class="hljs-comment">//指定检验的包</span><br><span class="hljs-comment">//@RestControllerAdvice=@ResponseBody+@Controller+@Advice</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GulimallExceptionControllerAdvice</span> </span>&#123;<br>    <span class="hljs-meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">handleValidException</span><span class="hljs-params">(MethodArgumentNotValidException e)</span> </span>&#123;<br>        log.error(<span class="hljs-string">&quot;数据校验出错：&#123;&#125;，异常类型：&#123;&#125;&quot;</span>, e.getMessage(), e.getClass());<br>        BindingResult bindingResult = e.getBindingResult();<br>        Map&lt;String,String&gt; errorMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        bindingResult.getFieldErrors().forEach((fieldError)-&gt;&#123;<br>            errorMap.put(fieldError.getField(),fieldError.getDefaultMessage());<br>        &#125;);<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnume.VAILD_EXCEPTION.getCode(),BizCodeEnume.VAILD_EXCEPTION.getMsg())<br>            .put(<span class="hljs-string">&quot;data&quot;</span>,errorMap);<br>    &#125;<br><br>    <span class="hljs-meta">@ExceptionHandler(value = Throwable.class)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> R <span class="hljs-title">handlerException</span><span class="hljs-params">(Throwable throwable)</span></span>&#123;<br>        log.error(<span class="hljs-string">&quot;error:&quot;</span>,throwable);<br>        <span class="hljs-keyword">return</span> R.error(BizCodeEnume.UNKNOW_EXCEPTION.getCode(),BizCodeEnume.UNKNOW_EXCEPTION.getMsg());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    可以通过创建枚举类,统一定义返回的状态码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>  <span class="hljs-title">BizCodeEnume</span> </span>&#123;<br>    UNKNOW_EXCEPTION(<span class="hljs-number">10000</span>,<span class="hljs-string">&quot;系统未知异常&quot;</span>),<br>    VAILD_EXCEPTION(<span class="hljs-number">10001</span>,<span class="hljs-string">&quot;参数格式校验失败&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> code;<br>    <span class="hljs-keyword">private</span> String msg;<br>    BizCodeEnume(<span class="hljs-keyword">int</span> code,String msg)&#123;<br>        <span class="hljs-keyword">this</span>.code = code;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getCode</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h3><p>Bean对象的属性检验在不同的业务情况下，检验的是不同的。如：在创建Bean时，id属性应该为空；在更新Bean时，id属性不为空。</p><ol><li><p>在Entity类上的校验注解上添加group属性，属性中是一个<strong>接口类</strong>。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@NotNull</span>(message = <span class="hljs-string">&quot;修改必须指定品牌id&quot;</span>,groups = &#123;UpdateGroup.class&#125;)<br>  <span class="hljs-variable">@Null</span>(message = <span class="hljs-string">&quot;新增不能指定id&quot;</span>,groups = &#123;AddGroup.class&#125;)<br>  <span class="hljs-variable">@TableId</span><br>  private Long brandId;<br></code></pre></td></tr></table></figure></li><li><p>在请求的controller方法中添加**@Valided**注解,并添加需要的分组的接口类。</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/save&quot;</span>)<br>public R save(<span class="hljs-variable">@Validated</span>(&#123;AddGroup.class&#125;) <span class="hljs-variable">@RequestBody</span> BrandEntity brand) &#123;<br>    <span class="hljs-selector-tag">brandService</span><span class="hljs-selector-class">.save</span>(brand);<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">R</span><span class="hljs-selector-class">.ok</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="手写一个检验注解"><a href="#手写一个检验注解" class="headerlink" title="手写一个检验注解"></a>手写一个检验注解</h3><ol><li><p>创建一个注解的接口（一般参照其他注解接口，直接复制）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//以ListValue自定义注解为例</span><br><span class="hljs-meta">@ListValue(vals=&#123;0,1&#125;,groups = &#123;AddGroup.class, UpdateStatusGroup.class&#125;)</span><br><span class="hljs-keyword">private</span> Integer showStatus;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class &#125;)</span><br><span class="hljs-meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> ListValue &#123;<br>    <span class="hljs-function">String <span class="hljs-title">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> &quot;</span>&#123;com.atguigu.common.valid.ListValue.message&#125;<span class="hljs-string">&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Class&lt;?&gt;[] groups() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Class&lt;? extends Payload&gt;[] payload() default &#123; &#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    int[] vals() default &#123; &#125;;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建ValidationMessages.properties，添加messages属性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">com<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.common</span><span class="hljs-selector-class">.valid</span><span class="hljs-selector-class">.ListValue</span>.message=必须提交指定的值<br></code></pre></td></tr></table></figure></li><li><p>创建校验器类，实现ConstraintValidator类，并编写校验规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//注解名   检验的数据类型</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListValueConstraintValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ConstraintValidator</span>&lt;<span class="hljs-title">ListValue</span>,<span class="hljs-title">Integer</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">private</span> Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-comment">//初始化方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initialize</span><span class="hljs-params">(ListValue constraintAnnotation)</span> </span>&#123;<br><br>        <span class="hljs-keyword">int</span>[] vals = constraintAnnotation.vals();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> val : vals) &#123;<br>            set.add(val);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">//判断是否校验成功</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 需要校验的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(Integer value, ConstraintValidatorContext context)</span> </span>&#123;<br><br>        <span class="hljs-keyword">return</span> set.contains(value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="基于SPU-SKU的商品数据库设计"><a href="#基于SPU-SKU的商品数据库设计" class="headerlink" title="基于SPU SKU的商品数据库设计"></a>基于SPU SKU的商品数据库设计</h2><h3 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h3><p><img src="/2021/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E7%AC%94%E8%AE%B02/AppData/Roaming/Typora/typora-user-images/image-20211001040314341.png" alt="image-20211001040314341"></p>]]></content>
    
    
    <categories>
      
      <category>项目</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2021/10/02/Redis/"/>
    <url>/2021/10/02/Redis/</url>
    
    <content type="html"><![CDATA[<p><img src="/2021/10/02/Redis/image-20211002173734737.png" alt="image-20211002173734737"></p><p>12</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">admin_route</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://renren</span>                 <span class="hljs-comment">##做负载均衡，后面加服务名</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/api/**</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">RewritePath=/api/(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span>   <span class="hljs-comment">##//重写路径</span><br>            <br>            <br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/lightGallery/js/lightgallery-all.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/masonry/masonry.pkgd.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/materialize/materialize.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/prism/prism.css.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/share/css/share.<span class="hljs-built_in">min</span>.css.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/share/js/jquery.share.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/share/js/social-share.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/tocbot/tocbot.css.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/twikoo/twikoo.all.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/valine/Valine.<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span> your working <span class="hljs-built_in">directory</span><br>warning: LF will be replaced <span class="hljs-keyword">by</span> <span class="hljs-literal">CRLF</span> <span class="hljs-keyword">in</span> libs/valine/av-<span class="hljs-built_in">min</span>.js.<br>The <span class="hljs-built_in">file</span> will have its original <span class="hljs-built_in">line</span> endings <span class="hljs-keyword">in</span><br></code></pre></td></tr></table></figure><p><img src="/2021/10/02/Redis/image-20211002232751359.png" alt="image-20211002232751359"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
